
HelloNucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d60  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003f28  08003f28  00013f28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fe8  08003fe8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003fe8  08003fe8  00013fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ff0  08003ff0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ff0  08003ff0  00013ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ff4  08003ff4  00013ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000074  0800406c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  0800406c  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e1a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b0  00000000  00000000  00027ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  00029570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a0  00000000  00000000  00029c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c94  00000000  00000000  0002a338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000083ad  00000000  00000000  0004afcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7b02  00000000  00000000  00053379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011ae7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002020  00000000  00000000  0011aed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000074 	.word	0x20000074
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003f10 	.word	0x08003f10

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000078 	.word	0x20000078
 8000204:	08003f10 	.word	0x08003f10

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_uldivmod>:
 8000b30:	b953      	cbnz	r3, 8000b48 <__aeabi_uldivmod+0x18>
 8000b32:	b94a      	cbnz	r2, 8000b48 <__aeabi_uldivmod+0x18>
 8000b34:	2900      	cmp	r1, #0
 8000b36:	bf08      	it	eq
 8000b38:	2800      	cmpeq	r0, #0
 8000b3a:	bf1c      	itt	ne
 8000b3c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b40:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b44:	f000 b96e 	b.w	8000e24 <__aeabi_idiv0>
 8000b48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b50:	f000 f806 	bl	8000b60 <__udivmoddi4>
 8000b54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5c:	b004      	add	sp, #16
 8000b5e:	4770      	bx	lr

08000b60 <__udivmoddi4>:
 8000b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b64:	9d08      	ldr	r5, [sp, #32]
 8000b66:	4604      	mov	r4, r0
 8000b68:	468c      	mov	ip, r1
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f040 8083 	bne.w	8000c76 <__udivmoddi4+0x116>
 8000b70:	428a      	cmp	r2, r1
 8000b72:	4617      	mov	r7, r2
 8000b74:	d947      	bls.n	8000c06 <__udivmoddi4+0xa6>
 8000b76:	fab2 f282 	clz	r2, r2
 8000b7a:	b142      	cbz	r2, 8000b8e <__udivmoddi4+0x2e>
 8000b7c:	f1c2 0020 	rsb	r0, r2, #32
 8000b80:	fa24 f000 	lsr.w	r0, r4, r0
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4097      	lsls	r7, r2
 8000b88:	ea40 0c01 	orr.w	ip, r0, r1
 8000b8c:	4094      	lsls	r4, r2
 8000b8e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b92:	0c23      	lsrs	r3, r4, #16
 8000b94:	fbbc f6f8 	udiv	r6, ip, r8
 8000b98:	fa1f fe87 	uxth.w	lr, r7
 8000b9c:	fb08 c116 	mls	r1, r8, r6, ip
 8000ba0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba4:	fb06 f10e 	mul.w	r1, r6, lr
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x60>
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bb2:	f080 8119 	bcs.w	8000de8 <__udivmoddi4+0x288>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 8116 	bls.w	8000de8 <__udivmoddi4+0x288>
 8000bbc:	3e02      	subs	r6, #2
 8000bbe:	443b      	add	r3, r7
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bd4:	45a6      	cmp	lr, r4
 8000bd6:	d909      	bls.n	8000bec <__udivmoddi4+0x8c>
 8000bd8:	193c      	adds	r4, r7, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bde:	f080 8105 	bcs.w	8000dec <__udivmoddi4+0x28c>
 8000be2:	45a6      	cmp	lr, r4
 8000be4:	f240 8102 	bls.w	8000dec <__udivmoddi4+0x28c>
 8000be8:	3802      	subs	r0, #2
 8000bea:	443c      	add	r4, r7
 8000bec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bf0:	eba4 040e 	sub.w	r4, r4, lr
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	b11d      	cbz	r5, 8000c00 <__udivmoddi4+0xa0>
 8000bf8:	40d4      	lsrs	r4, r2
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e9c5 4300 	strd	r4, r3, [r5]
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	b902      	cbnz	r2, 8000c0a <__udivmoddi4+0xaa>
 8000c08:	deff      	udf	#255	; 0xff
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	2a00      	cmp	r2, #0
 8000c10:	d150      	bne.n	8000cb4 <__udivmoddi4+0x154>
 8000c12:	1bcb      	subs	r3, r1, r7
 8000c14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c18:	fa1f f887 	uxth.w	r8, r7
 8000c1c:	2601      	movs	r6, #1
 8000c1e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c22:	0c21      	lsrs	r1, r4, #16
 8000c24:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c2c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c30:	428b      	cmp	r3, r1
 8000c32:	d907      	bls.n	8000c44 <__udivmoddi4+0xe4>
 8000c34:	1879      	adds	r1, r7, r1
 8000c36:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0xe2>
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	f200 80e9 	bhi.w	8000e14 <__udivmoddi4+0x2b4>
 8000c42:	4684      	mov	ip, r0
 8000c44:	1ac9      	subs	r1, r1, r3
 8000c46:	b2a3      	uxth	r3, r4
 8000c48:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c4c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c50:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c54:	fb08 f800 	mul.w	r8, r8, r0
 8000c58:	45a0      	cmp	r8, r4
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0x10c>
 8000c5c:	193c      	adds	r4, r7, r4
 8000c5e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x10a>
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	f200 80d9 	bhi.w	8000e1c <__udivmoddi4+0x2bc>
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	eba4 0408 	sub.w	r4, r4, r8
 8000c70:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c74:	e7bf      	b.n	8000bf6 <__udivmoddi4+0x96>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d909      	bls.n	8000c8e <__udivmoddi4+0x12e>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	f000 80b1 	beq.w	8000de2 <__udivmoddi4+0x282>
 8000c80:	2600      	movs	r6, #0
 8000c82:	e9c5 0100 	strd	r0, r1, [r5]
 8000c86:	4630      	mov	r0, r6
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	fab3 f683 	clz	r6, r3
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d14a      	bne.n	8000d2c <__udivmoddi4+0x1cc>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0x140>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 80b8 	bhi.w	8000e10 <__udivmoddi4+0x2b0>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb61 0103 	sbc.w	r1, r1, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	468c      	mov	ip, r1
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0a8      	beq.n	8000c00 <__udivmoddi4+0xa0>
 8000cae:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cb2:	e7a5      	b.n	8000c00 <__udivmoddi4+0xa0>
 8000cb4:	f1c2 0320 	rsb	r3, r2, #32
 8000cb8:	fa20 f603 	lsr.w	r6, r0, r3
 8000cbc:	4097      	lsls	r7, r2
 8000cbe:	fa01 f002 	lsl.w	r0, r1, r2
 8000cc2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc6:	40d9      	lsrs	r1, r3
 8000cc8:	4330      	orrs	r0, r6
 8000cca:	0c03      	lsrs	r3, r0, #16
 8000ccc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f108 	mul.w	r1, r6, r8
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce6:	d909      	bls.n	8000cfc <__udivmoddi4+0x19c>
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000cee:	f080 808d 	bcs.w	8000e0c <__udivmoddi4+0x2ac>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 808a 	bls.w	8000e0c <__udivmoddi4+0x2ac>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	443b      	add	r3, r7
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b281      	uxth	r1, r0
 8000d00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb00 f308 	mul.w	r3, r0, r8
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x1c4>
 8000d14:	1879      	adds	r1, r7, r1
 8000d16:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d1a:	d273      	bcs.n	8000e04 <__udivmoddi4+0x2a4>
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d971      	bls.n	8000e04 <__udivmoddi4+0x2a4>
 8000d20:	3802      	subs	r0, #2
 8000d22:	4439      	add	r1, r7
 8000d24:	1acb      	subs	r3, r1, r3
 8000d26:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d2a:	e778      	b.n	8000c1e <__udivmoddi4+0xbe>
 8000d2c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d30:	fa03 f406 	lsl.w	r4, r3, r6
 8000d34:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d38:	431c      	orrs	r4, r3
 8000d3a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d42:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d46:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d4a:	431f      	orrs	r7, r3
 8000d4c:	0c3b      	lsrs	r3, r7, #16
 8000d4e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d52:	fa1f f884 	uxth.w	r8, r4
 8000d56:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d5a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d5e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d62:	458a      	cmp	sl, r1
 8000d64:	fa02 f206 	lsl.w	r2, r2, r6
 8000d68:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x220>
 8000d6e:	1861      	adds	r1, r4, r1
 8000d70:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d74:	d248      	bcs.n	8000e08 <__udivmoddi4+0x2a8>
 8000d76:	458a      	cmp	sl, r1
 8000d78:	d946      	bls.n	8000e08 <__udivmoddi4+0x2a8>
 8000d7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7e:	4421      	add	r1, r4
 8000d80:	eba1 010a 	sub.w	r1, r1, sl
 8000d84:	b2bf      	uxth	r7, r7
 8000d86:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d8a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d92:	fb00 f808 	mul.w	r8, r0, r8
 8000d96:	45b8      	cmp	r8, r7
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x24a>
 8000d9a:	19e7      	adds	r7, r4, r7
 8000d9c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000da0:	d22e      	bcs.n	8000e00 <__udivmoddi4+0x2a0>
 8000da2:	45b8      	cmp	r8, r7
 8000da4:	d92c      	bls.n	8000e00 <__udivmoddi4+0x2a0>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4427      	add	r7, r4
 8000daa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dae:	eba7 0708 	sub.w	r7, r7, r8
 8000db2:	fba0 8902 	umull	r8, r9, r0, r2
 8000db6:	454f      	cmp	r7, r9
 8000db8:	46c6      	mov	lr, r8
 8000dba:	4649      	mov	r1, r9
 8000dbc:	d31a      	bcc.n	8000df4 <__udivmoddi4+0x294>
 8000dbe:	d017      	beq.n	8000df0 <__udivmoddi4+0x290>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x27a>
 8000dc2:	ebb3 020e 	subs.w	r2, r3, lr
 8000dc6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dca:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dce:	40f2      	lsrs	r2, r6
 8000dd0:	ea4c 0202 	orr.w	r2, ip, r2
 8000dd4:	40f7      	lsrs	r7, r6
 8000dd6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dda:	2600      	movs	r6, #0
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	462e      	mov	r6, r5
 8000de4:	4628      	mov	r0, r5
 8000de6:	e70b      	b.n	8000c00 <__udivmoddi4+0xa0>
 8000de8:	4606      	mov	r6, r0
 8000dea:	e6e9      	b.n	8000bc0 <__udivmoddi4+0x60>
 8000dec:	4618      	mov	r0, r3
 8000dee:	e6fd      	b.n	8000bec <__udivmoddi4+0x8c>
 8000df0:	4543      	cmp	r3, r8
 8000df2:	d2e5      	bcs.n	8000dc0 <__udivmoddi4+0x260>
 8000df4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000df8:	eb69 0104 	sbc.w	r1, r9, r4
 8000dfc:	3801      	subs	r0, #1
 8000dfe:	e7df      	b.n	8000dc0 <__udivmoddi4+0x260>
 8000e00:	4608      	mov	r0, r1
 8000e02:	e7d2      	b.n	8000daa <__udivmoddi4+0x24a>
 8000e04:	4660      	mov	r0, ip
 8000e06:	e78d      	b.n	8000d24 <__udivmoddi4+0x1c4>
 8000e08:	4681      	mov	r9, r0
 8000e0a:	e7b9      	b.n	8000d80 <__udivmoddi4+0x220>
 8000e0c:	4666      	mov	r6, ip
 8000e0e:	e775      	b.n	8000cfc <__udivmoddi4+0x19c>
 8000e10:	4630      	mov	r0, r6
 8000e12:	e74a      	b.n	8000caa <__udivmoddi4+0x14a>
 8000e14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e18:	4439      	add	r1, r7
 8000e1a:	e713      	b.n	8000c44 <__udivmoddi4+0xe4>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	443c      	add	r4, r7
 8000e20:	e724      	b.n	8000c6c <__udivmoddi4+0x10c>
 8000e22:	bf00      	nop

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <createSegment>:
#include "math.h"

uint32_t delayTime = 1000; // Used in the blink function. Initial value 1s (1000ms)

void createSegment (Segment *seg, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	4613      	mov	r3, r2
 8000e34:	80fb      	strh	r3, [r7, #6]
    seg->port = GPIOx;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	68ba      	ldr	r2, [r7, #8]
 8000e3a:	601a      	str	r2, [r3, #0]
    seg->pin = GPIO_Pin;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	88fa      	ldrh	r2, [r7, #6]
 8000e40:	809a      	strh	r2, [r3, #4]
}
 8000e42:	bf00      	nop
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <displayFactory>:

void displayFactory (Display *display, GPIO_TypeDef *ports[], uint16_t pins[])
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	60f8      	str	r0, [r7, #12]
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < SEGMENT_COUNT; ++i)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	e013      	b.n	8000e88 <displayFactory+0x3a>
    {
        createSegment (&display->segments[i], ports[i], pins[i]);
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	18d0      	adds	r0, r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	68ba      	ldr	r2, [r7, #8]
 8000e6e:	4413      	add	r3, r2
 8000e70:	6819      	ldr	r1, [r3, #0]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	f7ff ffd3 	bl	8000e28 <createSegment>
    for (int i = 0; i < SEGMENT_COUNT; ++i)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	3301      	adds	r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	2b07      	cmp	r3, #7
 8000e8c:	dde8      	ble.n	8000e60 <displayFactory+0x12>
    }
}
 8000e8e:	bf00      	nop
 8000e90:	bf00      	nop
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <displayDigit>:

void displayDigit (Display *display, int digit)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	2b08      	cmp	r3, #8
 8000ea8:	d838      	bhi.n	8000f1c <displayDigit+0x84>
 8000eaa:	a201      	add	r2, pc, #4	; (adr r2, 8000eb0 <displayDigit+0x18>)
 8000eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb0:	08000ed5 	.word	0x08000ed5
 8000eb4:	08000edd 	.word	0x08000edd
 8000eb8:	08000ee5 	.word	0x08000ee5
 8000ebc:	08000eed 	.word	0x08000eed
 8000ec0:	08000ef5 	.word	0x08000ef5
 8000ec4:	08000efd 	.word	0x08000efd
 8000ec8:	08000f05 	.word	0x08000f05
 8000ecc:	08000f0d 	.word	0x08000f0d
 8000ed0:	08000f15 	.word	0x08000f15
    switch (digit)
        {
        case 1:
            displayDigit1 (display);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f000 f924 	bl	8001122 <displayDigit1>
            break;
 8000eda:	e023      	b.n	8000f24 <displayDigit+0x8c>
        case 2:
            displayDigit2 (display);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f000 f934 	bl	800114a <displayDigit2>
            break;
 8000ee2:	e01f      	b.n	8000f24 <displayDigit+0x8c>
        case 3:
            displayDigit3 (display);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 f94c 	bl	8001182 <displayDigit3>
            break;
 8000eea:	e01b      	b.n	8000f24 <displayDigit+0x8c>
        case 4:
            displayDigit4 (display);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f000 f964 	bl	80011ba <displayDigit4>
            break;
 8000ef2:	e017      	b.n	8000f24 <displayDigit+0x8c>
        case 5:
            displayDigit5 (display);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 f97a 	bl	80011ee <displayDigit5>
            break;
 8000efa:	e013      	b.n	8000f24 <displayDigit+0x8c>
        case 6:
            displayDigit6 (display);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 f992 	bl	8001226 <displayDigit6>
            break;
 8000f02:	e00f      	b.n	8000f24 <displayDigit+0x8c>
        case 7:
            displayDigit7 (display);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 f9ad 	bl	8001264 <displayDigit7>
            break;
 8000f0a:	e00b      	b.n	8000f24 <displayDigit+0x8c>
        case 8:
            displayDigit8 (display);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 f9bf 	bl	8001290 <displayDigit8>
            break;
 8000f12:	e007      	b.n	8000f24 <displayDigit+0x8c>
        case 9:
            displayDigit9 (display);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 f9dd 	bl	80012d4 <displayDigit9>
            break;
 8000f1a:	e003      	b.n	8000f24 <displayDigit+0x8c>
        default:
            displayDigit0 (display);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f8e1 	bl	80010e4 <displayDigit0>
            break;
 8000f22:	bf00      	nop
        }
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <digitCount>:

int digitCount (int number)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
    int count = !number;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	bf0c      	ite	eq
 8000f3a:	2301      	moveq	r3, #1
 8000f3c:	2300      	movne	r3, #0
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	60fb      	str	r3, [r7, #12]

    while (number > 0)
 8000f42:	e00a      	b.n	8000f5a <digitCount+0x2e>
    {
        count++;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	3301      	adds	r3, #1
 8000f48:	60fb      	str	r3, [r7, #12]
        number /= 10;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <digitCount+0x44>)
 8000f4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f52:	1092      	asrs	r2, r2, #2
 8000f54:	17db      	asrs	r3, r3, #31
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	607b      	str	r3, [r7, #4]
    while (number > 0)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	dcf1      	bgt.n	8000f44 <digitCount+0x18>
    }

    return count;
 8000f60:	68fb      	ldr	r3, [r7, #12]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	66666667 	.word	0x66666667
 8000f74:	00000000 	.word	0x00000000

08000f78 <displayNumber>:

void displayNumber (Display *displays[], int displayCount, double number,
                    uint32_t delay)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6178      	str	r0, [r7, #20]
 8000f80:	6139      	str	r1, [r7, #16]
 8000f82:	ed87 0b02 	vstr	d0, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
    delayTime = delay;
 8000f88:	4a53      	ldr	r2, [pc, #332]	; (80010d8 <displayNumber+0x160>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]

    int digits = digitCount (number);
 8000f8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f92:	f7ff fda5 	bl	8000ae0 <__aeabi_d2iz>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ffc7 	bl	8000f2c <digitCount>
 8000f9e:	6278      	str	r0, [r7, #36]	; 0x24

    if (digits > displayCount)
 8000fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	dd04      	ble.n	8000fb2 <displayNumber+0x3a>
    {
        displayError (displays, displayCount);
 8000fa8:	6939      	ldr	r1, [r7, #16]
 8000faa:	6978      	ldr	r0, [r7, #20]
 8000fac:	f000 f9c1 	bl	8001332 <displayError>
        {
            displayDigit (displays[i - 1], displayNum % 10);
            displayNum /= 10;
        }
    }
}
 8000fb0:	e08a      	b.n	80010c8 <displayNumber+0x150>
        int displayNum = (int) number;
 8000fb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fb6:	f7ff fd93 	bl	8000ae0 <__aeabi_d2iz>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	623b      	str	r3, [r7, #32]
        if (digits < displayCount
 8000fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	da58      	bge.n	8001078 <displayNumber+0x100>
                && (int) (number * pow (10, (displayCount - digits))) % 10 != 0)
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fa6d 	bl	80004ac <__aeabi_i2d>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	ec43 2b11 	vmov	d1, r2, r3
 8000fda:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 80010d0 <displayNumber+0x158>
 8000fde:	f001 ffaf 	bl	8002f40 <pow>
 8000fe2:	ec51 0b10 	vmov	r0, r1, d0
 8000fe6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000fea:	f7ff fac9 	bl	8000580 <__aeabi_dmul>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f7ff fd73 	bl	8000ae0 <__aeabi_d2iz>
 8000ffa:	4601      	mov	r1, r0
 8000ffc:	4b37      	ldr	r3, [pc, #220]	; (80010dc <displayNumber+0x164>)
 8000ffe:	fb83 2301 	smull	r2, r3, r3, r1
 8001002:	109a      	asrs	r2, r3, #2
 8001004:	17cb      	asrs	r3, r1, #31
 8001006:	1ad2      	subs	r2, r2, r3
 8001008:	4613      	mov	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	1aca      	subs	r2, r1, r3
 8001012:	2a00      	cmp	r2, #0
 8001014:	d030      	beq.n	8001078 <displayNumber+0x100>
                    (int) (number * pow (10, (displayCount - digits)) + 0.5);
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fa45 	bl	80004ac <__aeabi_i2d>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	ec43 2b11 	vmov	d1, r2, r3
 800102a:	ed9f 0b29 	vldr	d0, [pc, #164]	; 80010d0 <displayNumber+0x158>
 800102e:	f001 ff87 	bl	8002f40 <pow>
 8001032:	ec51 0b10 	vmov	r0, r1, d0
 8001036:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800103a:	f7ff faa1 	bl	8000580 <__aeabi_dmul>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <displayNumber+0x168>)
 800104c:	f7ff f8e2 	bl	8000214 <__adddf3>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
            displayNum =
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fd42 	bl	8000ae0 <__aeabi_d2iz>
 800105c:	4603      	mov	r3, r0
 800105e:	623b      	str	r3, [r7, #32]
            displayDP (displays[displayCount - digits]);
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	4413      	add	r3, r2
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f94f 	bl	8001312 <displayDP>
            digits += displayCount - digits;
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
        for (int i = 1; i <= digits; ++i)
 8001078:	2301      	movs	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	e020      	b.n	80010c0 <displayNumber+0x148>
            displayDigit (displays[i - 1], displayNum % 10);
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001084:	3b01      	subs	r3, #1
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	4413      	add	r3, r2
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	6a3a      	ldr	r2, [r7, #32]
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <displayNumber+0x164>)
 8001092:	fb83 1302 	smull	r1, r3, r3, r2
 8001096:	1099      	asrs	r1, r3, #2
 8001098:	17d3      	asrs	r3, r2, #31
 800109a:	1ac9      	subs	r1, r1, r3
 800109c:	460b      	mov	r3, r1
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	1ad1      	subs	r1, r2, r3
 80010a6:	f7ff fef7 	bl	8000e98 <displayDigit>
            displayNum /= 10;
 80010aa:	6a3b      	ldr	r3, [r7, #32]
 80010ac:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <displayNumber+0x164>)
 80010ae:	fb82 1203 	smull	r1, r2, r2, r3
 80010b2:	1092      	asrs	r2, r2, #2
 80010b4:	17db      	asrs	r3, r3, #31
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	623b      	str	r3, [r7, #32]
        for (int i = 1; i <= digits; ++i)
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3301      	adds	r3, #1
 80010be:	61fb      	str	r3, [r7, #28]
 80010c0:	69fa      	ldr	r2, [r7, #28]
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	429a      	cmp	r2, r3
 80010c6:	ddda      	ble.n	800107e <displayNumber+0x106>
}
 80010c8:	bf00      	nop
 80010ca:	3728      	adds	r7, #40	; 0x28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	00000000 	.word	0x00000000
 80010d4:	40240000 	.word	0x40240000
 80010d8:	20000000 	.word	0x20000000
 80010dc:	66666667 	.word	0x66666667
 80010e0:	3fe00000 	.word	0x3fe00000

080010e4 <displayDigit0>:
    DIGIT_EIGHT = 7,
    DIGIT_NINE = 6
};

void displayDigit0 (Display *display)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    Segment *segments[] =
        { &display->segments[A], &display->segments[B], &display->segments[C],
 80010ec:	687b      	ldr	r3, [r7, #4]
    Segment *segments[] =
 80010ee:	60bb      	str	r3, [r7, #8]
        { &display->segments[A], &display->segments[B], &display->segments[C],
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3308      	adds	r3, #8
    Segment *segments[] =
 80010f4:	60fb      	str	r3, [r7, #12]
        { &display->segments[A], &display->segments[B], &display->segments[C],
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3310      	adds	r3, #16
    Segment *segments[] =
 80010fa:	613b      	str	r3, [r7, #16]
                &display->segments[D], &display->segments[E],
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3318      	adds	r3, #24
    Segment *segments[] =
 8001100:	617b      	str	r3, [r7, #20]
                &display->segments[D], &display->segments[E],
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3320      	adds	r3, #32
    Segment *segments[] =
 8001106:	61bb      	str	r3, [r7, #24]
                &display->segments[F] };
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3328      	adds	r3, #40	; 0x28
    Segment *segments[] =
 800110c:	61fb      	str	r3, [r7, #28]

    blink (segments, DIGIT_ZERO);
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	2106      	movs	r1, #6
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f971 	bl	80013fc <blink>
}
 800111a:	bf00      	nop
 800111c:	3720      	adds	r7, #32
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <displayDigit1>:

void displayDigit1 (Display *display)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
    Segment *segments[] =
        { &display->segments[B], &display->segments[C] };
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3308      	adds	r3, #8
    Segment *segments[] =
 800112e:	60bb      	str	r3, [r7, #8]
        { &display->segments[B], &display->segments[C] };
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3310      	adds	r3, #16
    Segment *segments[] =
 8001134:	60fb      	str	r3, [r7, #12]

    blink (segments, DIGIT_ONE);
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	2102      	movs	r1, #2
 800113c:	4618      	mov	r0, r3
 800113e:	f000 f95d 	bl	80013fc <blink>
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <displayDigit2>:

void displayDigit2 (Display *display)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b088      	sub	sp, #32
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
    Segment *segments[] =
        { &display->segments[A], &display->segments[B], &display->segments[G],
 8001152:	687b      	ldr	r3, [r7, #4]
    Segment *segments[] =
 8001154:	60fb      	str	r3, [r7, #12]
        { &display->segments[A], &display->segments[B], &display->segments[G],
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3308      	adds	r3, #8
    Segment *segments[] =
 800115a:	613b      	str	r3, [r7, #16]
        { &display->segments[A], &display->segments[B], &display->segments[G],
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3330      	adds	r3, #48	; 0x30
    Segment *segments[] =
 8001160:	617b      	str	r3, [r7, #20]
                &display->segments[E], &display->segments[D] };
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3320      	adds	r3, #32
    Segment *segments[] =
 8001166:	61bb      	str	r3, [r7, #24]
                &display->segments[E], &display->segments[D] };
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3318      	adds	r3, #24
    Segment *segments[] =
 800116c:	61fb      	str	r3, [r7, #28]

    blink (segments, DIGIT_TWO);
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	2105      	movs	r1, #5
 8001174:	4618      	mov	r0, r3
 8001176:	f000 f941 	bl	80013fc <blink>
}
 800117a:	bf00      	nop
 800117c:	3720      	adds	r7, #32
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <displayDigit3>:

void displayDigit3 (Display *display)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b088      	sub	sp, #32
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
    Segment *segments[] =
        { &display->segments[A], &display->segments[B], &display->segments[G],
 800118a:	687b      	ldr	r3, [r7, #4]
    Segment *segments[] =
 800118c:	60fb      	str	r3, [r7, #12]
        { &display->segments[A], &display->segments[B], &display->segments[G],
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3308      	adds	r3, #8
    Segment *segments[] =
 8001192:	613b      	str	r3, [r7, #16]
        { &display->segments[A], &display->segments[B], &display->segments[G],
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3330      	adds	r3, #48	; 0x30
    Segment *segments[] =
 8001198:	617b      	str	r3, [r7, #20]
                &display->segments[C], &display->segments[D] };
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3310      	adds	r3, #16
    Segment *segments[] =
 800119e:	61bb      	str	r3, [r7, #24]
                &display->segments[C], &display->segments[D] };
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3318      	adds	r3, #24
    Segment *segments[] =
 80011a4:	61fb      	str	r3, [r7, #28]

    blink (segments, DIGIT_THREE);
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	2105      	movs	r1, #5
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 f925 	bl	80013fc <blink>
}
 80011b2:	bf00      	nop
 80011b4:	3720      	adds	r7, #32
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <displayDigit4>:

void displayDigit4 (Display *display)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
    Segment *segments[] =
        { &display->segments[F], &display->segments[B], &display->segments[G],
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3328      	adds	r3, #40	; 0x28
    Segment *segments[] =
 80011c6:	60bb      	str	r3, [r7, #8]
        { &display->segments[F], &display->segments[B], &display->segments[G],
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3308      	adds	r3, #8
    Segment *segments[] =
 80011cc:	60fb      	str	r3, [r7, #12]
        { &display->segments[F], &display->segments[B], &display->segments[G],
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3330      	adds	r3, #48	; 0x30
    Segment *segments[] =
 80011d2:	613b      	str	r3, [r7, #16]
                &display->segments[C] };
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3310      	adds	r3, #16
    Segment *segments[] =
 80011d8:	617b      	str	r3, [r7, #20]

    blink (segments, DIGIT_FOUR);
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	2104      	movs	r1, #4
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 f90b 	bl	80013fc <blink>
}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <displayDigit5>:

void displayDigit5 (Display *display)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b088      	sub	sp, #32
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
    Segment *segments[] =
        { &display->segments[A], &display->segments[F], &display->segments[G],
 80011f6:	687b      	ldr	r3, [r7, #4]
    Segment *segments[] =
 80011f8:	60fb      	str	r3, [r7, #12]
        { &display->segments[A], &display->segments[F], &display->segments[G],
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3328      	adds	r3, #40	; 0x28
    Segment *segments[] =
 80011fe:	613b      	str	r3, [r7, #16]
        { &display->segments[A], &display->segments[F], &display->segments[G],
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3330      	adds	r3, #48	; 0x30
    Segment *segments[] =
 8001204:	617b      	str	r3, [r7, #20]
                &display->segments[C], &display->segments[D] };
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3310      	adds	r3, #16
    Segment *segments[] =
 800120a:	61bb      	str	r3, [r7, #24]
                &display->segments[C], &display->segments[D] };
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3318      	adds	r3, #24
    Segment *segments[] =
 8001210:	61fb      	str	r3, [r7, #28]

    blink (segments, DIGIT_FIVE);
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2105      	movs	r1, #5
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f8ef 	bl	80013fc <blink>
}
 800121e:	bf00      	nop
 8001220:	3720      	adds	r7, #32
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <displayDigit6>:

void displayDigit6 (Display *display)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b088      	sub	sp, #32
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
    Segment *segments[] =
        { &display->segments[A], &display->segments[F], &display->segments[G],
 800122e:	687b      	ldr	r3, [r7, #4]
    Segment *segments[] =
 8001230:	60bb      	str	r3, [r7, #8]
        { &display->segments[A], &display->segments[F], &display->segments[G],
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3328      	adds	r3, #40	; 0x28
    Segment *segments[] =
 8001236:	60fb      	str	r3, [r7, #12]
        { &display->segments[A], &display->segments[F], &display->segments[G],
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3330      	adds	r3, #48	; 0x30
    Segment *segments[] =
 800123c:	613b      	str	r3, [r7, #16]
                &display->segments[E], &display->segments[C],
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3320      	adds	r3, #32
    Segment *segments[] =
 8001242:	617b      	str	r3, [r7, #20]
                &display->segments[E], &display->segments[C],
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3310      	adds	r3, #16
    Segment *segments[] =
 8001248:	61bb      	str	r3, [r7, #24]
                &display->segments[D] };
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3318      	adds	r3, #24
    Segment *segments[] =
 800124e:	61fb      	str	r3, [r7, #28]

    blink (segments, DIGIT_SIX);
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	2106      	movs	r1, #6
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f8d0 	bl	80013fc <blink>
}
 800125c:	bf00      	nop
 800125e:	3720      	adds	r7, #32
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <displayDigit7>:

void displayDigit7 (Display *display)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
    Segment *segments[] =
        { &display->segments[A], &display->segments[B], &display->segments[C] };
 800126c:	687b      	ldr	r3, [r7, #4]
    Segment *segments[] =
 800126e:	60fb      	str	r3, [r7, #12]
        { &display->segments[A], &display->segments[B], &display->segments[C] };
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3308      	adds	r3, #8
    Segment *segments[] =
 8001274:	613b      	str	r3, [r7, #16]
        { &display->segments[A], &display->segments[B], &display->segments[C] };
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3310      	adds	r3, #16
    Segment *segments[] =
 800127a:	617b      	str	r3, [r7, #20]

    blink (segments, DIGIT_SEVEN);
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2103      	movs	r1, #3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f8ba 	bl	80013fc <blink>
}
 8001288:	bf00      	nop
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <displayDigit8>:

void displayDigit8 (Display *display)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
    Segment *segments[] =
        { &display->segments[A], &display->segments[B], &display->segments[C],
 8001298:	687b      	ldr	r3, [r7, #4]
    Segment *segments[] =
 800129a:	60fb      	str	r3, [r7, #12]
        { &display->segments[A], &display->segments[B], &display->segments[C],
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3308      	adds	r3, #8
    Segment *segments[] =
 80012a0:	613b      	str	r3, [r7, #16]
        { &display->segments[A], &display->segments[B], &display->segments[C],
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3310      	adds	r3, #16
    Segment *segments[] =
 80012a6:	617b      	str	r3, [r7, #20]
                &display->segments[D], &display->segments[E],
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3318      	adds	r3, #24
    Segment *segments[] =
 80012ac:	61bb      	str	r3, [r7, #24]
                &display->segments[D], &display->segments[E],
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3320      	adds	r3, #32
    Segment *segments[] =
 80012b2:	61fb      	str	r3, [r7, #28]
                &display->segments[F], &display->segments[G] };
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3328      	adds	r3, #40	; 0x28
    Segment *segments[] =
 80012b8:	623b      	str	r3, [r7, #32]
                &display->segments[F], &display->segments[G] };
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3330      	adds	r3, #48	; 0x30
    Segment *segments[] =
 80012be:	627b      	str	r3, [r7, #36]	; 0x24

    blink (segments, DIGIT_EIGHT);
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	2107      	movs	r1, #7
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f898 	bl	80013fc <blink>
}
 80012cc:	bf00      	nop
 80012ce:	3728      	adds	r7, #40	; 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <displayDigit9>:

void displayDigit9 (Display *display)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
    Segment *segments[] =
        { &display->segments[A], &display->segments[B], &display->segments[C],
 80012dc:	687b      	ldr	r3, [r7, #4]
    Segment *segments[] =
 80012de:	60bb      	str	r3, [r7, #8]
        { &display->segments[A], &display->segments[B], &display->segments[C],
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3308      	adds	r3, #8
    Segment *segments[] =
 80012e4:	60fb      	str	r3, [r7, #12]
        { &display->segments[A], &display->segments[B], &display->segments[C],
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3310      	adds	r3, #16
    Segment *segments[] =
 80012ea:	613b      	str	r3, [r7, #16]
                &display->segments[D], &display->segments[F],
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3318      	adds	r3, #24
    Segment *segments[] =
 80012f0:	617b      	str	r3, [r7, #20]
                &display->segments[D], &display->segments[F],
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3328      	adds	r3, #40	; 0x28
    Segment *segments[] =
 80012f6:	61bb      	str	r3, [r7, #24]
                &display->segments[G] };
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3330      	adds	r3, #48	; 0x30
    Segment *segments[] =
 80012fc:	61fb      	str	r3, [r7, #28]

    blink (segments, DIGIT_NINE);
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	2106      	movs	r1, #6
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f879 	bl	80013fc <blink>
}
 800130a:	bf00      	nop
 800130c:	3720      	adds	r7, #32
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <displayDP>:

void displayDP (Display *display)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin (display->segments[H].port, display->segments[H].pin,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001322:	2200      	movs	r2, #0
 8001324:	4619      	mov	r1, r3
 8001326:	f000 fe71 	bl	800200c <HAL_GPIO_WritePin>
                       GPIO_PIN_RESET);
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <displayError>:

void displayError (Display *displays[], int displayCount)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b08c      	sub	sp, #48	; 0x30
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]
    enum
    {
        R_SEG_COUNT = 2, E_SEG_COUNT = 5
    };

    int d = displayCount - 1;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	3b01      	subs	r3, #1
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c

    Segment *letterE[] =
        { &displays[d]->segments[A], &displays[d]->segments[F],
 8001342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	681b      	ldr	r3, [r3, #0]
    Segment *letterE[] =
 800134c:	61bb      	str	r3, [r7, #24]
        { &displays[d]->segments[A], &displays[d]->segments[F],
 800134e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3328      	adds	r3, #40	; 0x28
    Segment *letterE[] =
 800135a:	61fb      	str	r3, [r7, #28]
                &displays[d]->segments[G], &displays[d]->segments[E],
 800135c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	4413      	add	r3, r2
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	3330      	adds	r3, #48	; 0x30
    Segment *letterE[] =
 8001368:	623b      	str	r3, [r7, #32]
                &displays[d]->segments[G], &displays[d]->segments[E],
 800136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3320      	adds	r3, #32
    Segment *letterE[] =
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
                &displays[d]->segments[D] };
 8001378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	4413      	add	r3, r2
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	3318      	adds	r3, #24
    Segment *letterE[] =
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28

    Segment *letterR1[] =
 8001386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001388:	3b01      	subs	r3, #1
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
        { &displays[--d]->segments[E], &displays[d]->segments[G] }; // decrementing d: moving to next display
 800138c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	4413      	add	r3, r2
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	3320      	adds	r3, #32
    Segment *letterR1[] =
 8001398:	613b      	str	r3, [r7, #16]
        { &displays[--d]->segments[E], &displays[d]->segments[G] }; // decrementing d: moving to next display
 800139a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3330      	adds	r3, #48	; 0x30
    Segment *letterR1[] =
 80013a6:	617b      	str	r3, [r7, #20]

    blink (letterE, E_SEG_COUNT);
 80013a8:	f107 0318 	add.w	r3, r7, #24
 80013ac:	2105      	movs	r1, #5
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f824 	bl	80013fc <blink>
    blink (letterR1, R_SEG_COUNT);
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	2102      	movs	r1, #2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f81e 	bl	80013fc <blink>

    if (displayCount >= 3)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	dd16      	ble.n	80013f4 <displayError+0xc2>
    {
        Segment *letterR2[] =
 80013c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c8:	3b01      	subs	r3, #1
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
            { &displays[--d]->segments[E], &displays[d]->segments[G] }; // decrementing d: moving to next display
 80013cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	4413      	add	r3, r2
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3320      	adds	r3, #32
        Segment *letterR2[] =
 80013d8:	60bb      	str	r3, [r7, #8]
            { &displays[--d]->segments[E], &displays[d]->segments[G] }; // decrementing d: moving to next display
 80013da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	3330      	adds	r3, #48	; 0x30
        Segment *letterR2[] =
 80013e6:	60fb      	str	r3, [r7, #12]

        blink (letterR2, R_SEG_COUNT);
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	2102      	movs	r1, #2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f804 	bl	80013fc <blink>
    }
}
 80013f4:	bf00      	nop
 80013f6:	3730      	adds	r7, #48	; 0x30
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <blink>:

void blink (Segment *segments[], int segCount)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < segCount; ++i)
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	e012      	b.n	8001432 <blink+0x36>
    {
        HAL_GPIO_WritePin (segments[i]->port, segments[i]->pin, GPIO_PIN_RESET);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	4413      	add	r3, r2
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6818      	ldr	r0, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	889b      	ldrh	r3, [r3, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	4619      	mov	r1, r3
 8001428:	f000 fdf0 	bl	800200c <HAL_GPIO_WritePin>
    for (int i = 0; i < segCount; ++i)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3301      	adds	r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	dbe8      	blt.n	800140c <blink+0x10>
    }

    HAL_Delay(delayTime);
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <blink+0x88>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f000 fb46 	bl	8001ad0 <HAL_Delay>

    for (int i = 0; i < segCount; ++i)
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	e012      	b.n	8001470 <blink+0x74>
    {
        HAL_GPIO_WritePin (segments[i]->port, segments[i]->pin,
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	889b      	ldrh	r3, [r3, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	4619      	mov	r1, r3
 8001466:	f000 fdd1 	bl	800200c <HAL_GPIO_WritePin>
    for (int i = 0; i < segCount; ++i)
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	3301      	adds	r3, #1
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	dbe8      	blt.n	800144a <blink+0x4e>
                           GPIO_PIN_SET);
    }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000000 	.word	0x20000000

08001488 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main (void)
{
 8001488:	b5b0      	push	{r4, r5, r7, lr}
 800148a:	b0bc      	sub	sp, #240	; 0xf0
 800148c:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init ();
 800148e:	f000 faad 	bl	80019ec <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config ();
 8001492:	f000 f871 	bl	8001578 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init ();
 8001496:	f000 f907 	bl	80016a8 <MX_GPIO_Init>
    MX_USART2_UART_Init ();
 800149a:	f000 f8db 	bl	8001654 <MX_USART2_UART_Init>
    /* USER CODE BEGIN 2 */

    GPIO_TypeDef *d0Ports[] =
 800149e:	4b32      	ldr	r3, [pc, #200]	; (8001568 <main+0xe0>)
 80014a0:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 80014a4:	461d      	mov	r5, r3
 80014a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        { D0_SEG_A_GPIO_Port, D0_SEG_B_GPIO_Port, D0_SEG_C_GPIO_Port,
        D0_SEG_D_GPIO_Port, D0_SEG_E_GPIO_Port, D0_SEG_F_GPIO_Port,
        D0_SEG_G_GPIO_Port, D0_SEG_H_GPIO_Port };

    uint16_t d0Pins[] =
 80014b2:	4b2e      	ldr	r3, [pc, #184]	; (800156c <main+0xe4>)
 80014b4:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 80014b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        { D0_SEG_A_Pin, D0_SEG_B_Pin, D0_SEG_C_Pin, D0_SEG_D_Pin,
        D0_SEG_E_Pin, D0_SEG_F_Pin, D0_SEG_G_Pin, D0_SEG_H_Pin };

    GPIO_TypeDef *d1Ports[] =
 80014be:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <main+0xe8>)
 80014c0:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 80014c4:	461d      	mov	r5, r3
 80014c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        { D1_SEG_A_GPIO_Port, D1_SEG_B_GPIO_Port, D1_SEG_C_GPIO_Port,
        D1_SEG_D_GPIO_Port, D1_SEG_E_GPIO_Port, D1_SEG_F_GPIO_Port,
        D1_SEG_G_GPIO_Port, D1_SEG_H_GPIO_Port };

    uint16_t d1Pins[] =
 80014d2:	4b28      	ldr	r3, [pc, #160]	; (8001574 <main+0xec>)
 80014d4:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80014d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        D1_SEG_E_Pin, D1_SEG_F_Pin, D1_SEG_G_Pin, D1_SEG_H_Pin };

    Display d0;
    Display d1;

    displayFactory (&d0, d0Ports, d0Pins);
 80014de:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80014e2:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80014e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fcaf 	bl	8000e4e <displayFactory>
    displayFactory (&d1, d1Ports, d1Pins);
 80014f0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80014f4:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fca6 	bl	8000e4e <displayFactory>

    Display *displays[] =
 8001502:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	60bb      	str	r3, [r7, #8]
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        /* USER CODE END WHILE */

        for (int i = 1; i < 10; ++i)
 800150e:	2301      	movs	r3, #1
 8001510:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001514:	e01c      	b.n	8001550 <main+0xc8>
        {
            displayNumber (displays, 2, i * 2.3, 1000);
 8001516:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800151a:	f7fe ffc7 	bl	80004ac <__aeabi_i2d>
 800151e:	a310      	add	r3, pc, #64	; (adr r3, 8001560 <main+0xd8>)
 8001520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001524:	f7ff f82c 	bl	8000580 <__aeabi_dmul>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	ec43 2b17 	vmov	d7, r2, r3
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001536:	eeb0 0a47 	vmov.f32	s0, s14
 800153a:	eef0 0a67 	vmov.f32	s1, s15
 800153e:	2102      	movs	r1, #2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fd19 	bl	8000f78 <displayNumber>
        for (int i = 1; i < 10; ++i)
 8001546:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800154a:	3301      	adds	r3, #1
 800154c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001550:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001554:	2b09      	cmp	r3, #9
 8001556:	ddde      	ble.n	8001516 <main+0x8e>
 8001558:	e7d9      	b.n	800150e <main+0x86>
 800155a:	bf00      	nop
 800155c:	f3af 8000 	nop.w
 8001560:	66666666 	.word	0x66666666
 8001564:	40026666 	.word	0x40026666
 8001568:	08003f28 	.word	0x08003f28
 800156c:	08003f48 	.word	0x08003f48
 8001570:	08003f58 	.word	0x08003f58
 8001574:	08003f78 	.word	0x08003f78

08001578 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config (void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b094      	sub	sp, #80	; 0x50
 800157c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct =
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	2234      	movs	r2, #52	; 0x34
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f002 fcba 	bl	8003f00 <memset>
        { 0 };
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
        { 0 };

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	4b2a      	ldr	r3, [pc, #168]	; (800164c <SystemClock_Config+0xd4>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	4a29      	ldr	r2, [pc, #164]	; (800164c <SystemClock_Config+0xd4>)
 80015a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015aa:	6413      	str	r3, [r2, #64]	; 0x40
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <SystemClock_Config+0xd4>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015b8:	2300      	movs	r3, #0
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <SystemClock_Config+0xd8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015c4:	4a22      	ldr	r2, [pc, #136]	; (8001650 <SystemClock_Config+0xd8>)
 80015c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b20      	ldr	r3, [pc, #128]	; (8001650 <SystemClock_Config+0xd8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	683b      	ldr	r3, [r7, #0]
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d8:	2302      	movs	r3, #2
 80015da:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015dc:	2301      	movs	r3, #1
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015e0:	2310      	movs	r3, #16
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e4:	2302      	movs	r3, #2
 80015e6:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015e8:	2300      	movs	r3, #0
 80015ea:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 16;
 80015ec:	2310      	movs	r3, #16
 80015ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 336;
 80015f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015f4:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015f6:	2304      	movs	r3, #4
 80015f8:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 80015fa:	2302      	movs	r3, #2
 80015fc:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 80015fe:	2302      	movs	r3, #2
 8001600:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4618      	mov	r0, r3
 8001608:	f000 ffe6 	bl	80025d8 <HAL_RCC_OscConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <SystemClock_Config+0x9e>
    {
        Error_Handler ();
 8001612:	f000 f90f 	bl	8001834 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001616:	230f      	movs	r3, #15
 8001618:	60bb      	str	r3, [r7, #8]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161a:	2302      	movs	r3, #2
 800161c:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001626:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001628:	2300      	movs	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	2102      	movs	r1, #2
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fd04 	bl	8002040 <HAL_RCC_ClockConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <SystemClock_Config+0xca>
    {
        Error_Handler ();
 800163e:	f000 f8f9 	bl	8001834 <Error_Handler>
    }
}
 8001642:	bf00      	nop
 8001644:	3750      	adds	r7, #80	; 0x50
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40007000 	.word	0x40007000

08001654 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init (void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_USART2_UART_Init+0x4c>)
 800165a:	4a12      	ldr	r2, [pc, #72]	; (80016a4 <MX_USART2_UART_Init+0x50>)
 800165c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <MX_USART2_UART_Init+0x4c>)
 8001660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001664:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <MX_USART2_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <MX_USART2_UART_Init+0x4c>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <MX_USART2_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <MX_USART2_UART_Init+0x4c>)
 800167a:	220c      	movs	r2, #12
 800167c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <MX_USART2_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <MX_USART2_UART_Init+0x4c>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init (&huart2) != HAL_OK)
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_USART2_UART_Init+0x4c>)
 800168c:	f001 fa42 	bl	8002b14 <HAL_UART_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_USART2_UART_Init+0x46>
    {
        Error_Handler ();
 8001696:	f000 f8cd 	bl	8001834 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000090 	.word	0x20000090
 80016a4:	40004400 	.word	0x40004400

080016a8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init (void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct =
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]
        { 0 };

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	4b56      	ldr	r3, [pc, #344]	; (800181c <MX_GPIO_Init+0x174>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a55      	ldr	r2, [pc, #340]	; (800181c <MX_GPIO_Init+0x174>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b53      	ldr	r3, [pc, #332]	; (800181c <MX_GPIO_Init+0x174>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b4f      	ldr	r3, [pc, #316]	; (800181c <MX_GPIO_Init+0x174>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a4e      	ldr	r2, [pc, #312]	; (800181c <MX_GPIO_Init+0x174>)
 80016e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b4c      	ldr	r3, [pc, #304]	; (800181c <MX_GPIO_Init+0x174>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	4b48      	ldr	r3, [pc, #288]	; (800181c <MX_GPIO_Init+0x174>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a47      	ldr	r2, [pc, #284]	; (800181c <MX_GPIO_Init+0x174>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b45      	ldr	r3, [pc, #276]	; (800181c <MX_GPIO_Init+0x174>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	4b41      	ldr	r3, [pc, #260]	; (800181c <MX_GPIO_Init+0x174>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a40      	ldr	r2, [pc, #256]	; (800181c <MX_GPIO_Init+0x174>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b3e      	ldr	r3, [pc, #248]	; (800181c <MX_GPIO_Init+0x174>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	603b      	str	r3, [r7, #0]
 8001732:	4b3a      	ldr	r3, [pc, #232]	; (800181c <MX_GPIO_Init+0x174>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a39      	ldr	r2, [pc, #228]	; (800181c <MX_GPIO_Init+0x174>)
 8001738:	f043 0308 	orr.w	r3, r3, #8
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b37      	ldr	r3, [pc, #220]	; (800181c <MX_GPIO_Init+0x174>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	2120      	movs	r1, #32
 800174e:	4834      	ldr	r0, [pc, #208]	; (8001820 <MX_GPIO_Init+0x178>)
 8001750:	f000 fc5c 	bl	800200c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin (
 8001754:	2201      	movs	r2, #1
 8001756:	f649 01c0 	movw	r1, #39104	; 0x98c0
 800175a:	4831      	ldr	r0, [pc, #196]	; (8001820 <MX_GPIO_Init+0x178>)
 800175c:	f000 fc56 	bl	800200c <HAL_GPIO_WritePin>
            D0_SEG_D_Pin | D0_SEG_F_Pin | D0_SEG_E_Pin | D0_SEG_C_Pin
                    | D1_SEG_G_Pin,
            GPIO_PIN_SET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin (
 8001760:	2201      	movs	r2, #1
 8001762:	f44f 51fb 	mov.w	r1, #8032	; 0x1f60
 8001766:	482f      	ldr	r0, [pc, #188]	; (8001824 <MX_GPIO_Init+0x17c>)
 8001768:	f000 fc50 	bl	800200c <HAL_GPIO_WritePin>
            D0_SEG_B_Pin | D1_SEG_H_Pin | D1_SEG_F_Pin | D1_SEG_E_Pin
                    | D1_SEG_A_Pin | D1_SEG_B_Pin | D1_SEG_C_Pin,
            GPIO_PIN_SET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin (GPIOB, D0_SEG_G_Pin | D0_SEG_H_Pin | D0_SEG_A_Pin,
 800176c:	2201      	movs	r2, #1
 800176e:	f44f 5192 	mov.w	r1, #4672	; 0x1240
 8001772:	482d      	ldr	r0, [pc, #180]	; (8001828 <MX_GPIO_Init+0x180>)
 8001774:	f000 fc4a 	bl	800200c <HAL_GPIO_WritePin>
                       GPIO_PIN_SET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin (D1_SEG_D_GPIO_Port, D1_SEG_D_Pin, GPIO_PIN_SET);
 8001778:	2201      	movs	r2, #1
 800177a:	2104      	movs	r1, #4
 800177c:	482b      	ldr	r0, [pc, #172]	; (800182c <MX_GPIO_Init+0x184>)
 800177e:	f000 fc45 	bl	800200c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 8001782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001788:	4b29      	ldr	r3, [pc, #164]	; (8001830 <MX_GPIO_Init+0x188>)
 800178a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init (B1_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	4619      	mov	r1, r3
 8001796:	4823      	ldr	r0, [pc, #140]	; (8001824 <MX_GPIO_Init+0x17c>)
 8001798:	f000 faa4 	bl	8001ce4 <HAL_GPIO_Init>

    /*Configure GPIO pins : LD2_Pin D0_SEG_D_Pin D0_SEG_F_Pin D0_SEG_E_Pin
     D0_SEG_C_Pin D1_SEG_G_Pin */
    GPIO_InitStruct.Pin = LD2_Pin | D0_SEG_D_Pin | D0_SEG_F_Pin | D0_SEG_E_Pin
 800179c:	f649 03e0 	movw	r3, #39136	; 0x98e0
 80017a0:	617b      	str	r3, [r7, #20]
            | D0_SEG_C_Pin | D1_SEG_G_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	481a      	ldr	r0, [pc, #104]	; (8001820 <MX_GPIO_Init+0x178>)
 80017b6:	f000 fa95 	bl	8001ce4 <HAL_GPIO_Init>

    /*Configure GPIO pins : D0_SEG_B_Pin D1_SEG_H_Pin D1_SEG_F_Pin D1_SEG_E_Pin
     D1_SEG_A_Pin D1_SEG_B_Pin D1_SEG_C_Pin */
    GPIO_InitStruct.Pin = D0_SEG_B_Pin | D1_SEG_H_Pin | D1_SEG_F_Pin
 80017ba:	f44f 53fb 	mov.w	r3, #8032	; 0x1f60
 80017be:	617b      	str	r3, [r7, #20]
            | D1_SEG_E_Pin | D1_SEG_A_Pin | D1_SEG_B_Pin | D1_SEG_C_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init (GPIOC, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	4814      	ldr	r0, [pc, #80]	; (8001824 <MX_GPIO_Init+0x17c>)
 80017d4:	f000 fa86 	bl	8001ce4 <HAL_GPIO_Init>

    /*Configure GPIO pins : D0_SEG_G_Pin D0_SEG_H_Pin D0_SEG_A_Pin */
    GPIO_InitStruct.Pin = D0_SEG_G_Pin | D0_SEG_H_Pin | D0_SEG_A_Pin;
 80017d8:	f44f 5392 	mov.w	r3, #4672	; 0x1240
 80017dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017de:	2301      	movs	r3, #1
 80017e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	480d      	ldr	r0, [pc, #52]	; (8001828 <MX_GPIO_Init+0x180>)
 80017f2:	f000 fa77 	bl	8001ce4 <HAL_GPIO_Init>

    /*Configure GPIO pin : D1_SEG_D_Pin */
    GPIO_InitStruct.Pin = D1_SEG_D_Pin;
 80017f6:	2304      	movs	r3, #4
 80017f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init (D1_SEG_D_GPIO_Port, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	4807      	ldr	r0, [pc, #28]	; (800182c <MX_GPIO_Init+0x184>)
 800180e:	f000 fa69 	bl	8001ce4 <HAL_GPIO_Init>

}
 8001812:	bf00      	nop
 8001814:	3728      	adds	r7, #40	; 0x28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	40020000 	.word	0x40020000
 8001824:	40020800 	.word	0x40020800
 8001828:	40020400 	.word	0x40020400
 800182c:	40020c00 	.word	0x40020c00
 8001830:	10210000 	.word	0x10210000

08001834 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler (void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001838:	b672      	cpsid	i
}
 800183a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq ();
    while (1)
 800183c:	e7fe      	b.n	800183c <Error_Handler+0x8>
	...

08001840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <HAL_MspInit+0x4c>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a0f      	ldr	r2, [pc, #60]	; (800188c <HAL_MspInit+0x4c>)
 8001850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b0d      	ldr	r3, [pc, #52]	; (800188c <HAL_MspInit+0x4c>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_MspInit+0x4c>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a08      	ldr	r2, [pc, #32]	; (800188c <HAL_MspInit+0x4c>)
 800186c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_MspInit+0x4c>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800187e:	2007      	movs	r0, #7
 8001880:	f000 f9fc 	bl	8001c7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40023800 	.word	0x40023800

08001890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_UART_MspInit+0x84>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d12b      	bne.n	800190a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a17      	ldr	r2, [pc, #92]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a10      	ldr	r2, [pc, #64]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ea:	230c      	movs	r3, #12
 80018ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018fa:	2307      	movs	r3, #7
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <HAL_UART_MspInit+0x8c>)
 8001906:	f000 f9ed 	bl	8001ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	; 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40004400 	.word	0x40004400
 8001918:	40023800 	.word	0x40023800
 800191c:	40020000 	.word	0x40020000

08001920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <NMI_Handler+0x4>

08001926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <HardFault_Handler+0x4>

0800192c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <MemManage_Handler+0x4>

08001932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <BusFault_Handler+0x4>

08001938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <UsageFault_Handler+0x4>

0800193e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196c:	f000 f890 	bl	8001a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}

08001974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <SystemInit+0x20>)
 800197a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <SystemInit+0x20>)
 8001980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800199c:	480d      	ldr	r0, [pc, #52]	; (80019d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800199e:	490e      	ldr	r1, [pc, #56]	; (80019d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019a0:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a4:	e002      	b.n	80019ac <LoopCopyDataInit>

080019a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019aa:	3304      	adds	r3, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b0:	d3f9      	bcc.n	80019a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019b4:	4c0b      	ldr	r4, [pc, #44]	; (80019e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b8:	e001      	b.n	80019be <LoopFillZerobss>

080019ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019bc:	3204      	adds	r2, #4

080019be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c0:	d3fb      	bcc.n	80019ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019c2:	f7ff ffd7 	bl	8001974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019c6:	f002 fa77 	bl	8003eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ca:	f7ff fd5d 	bl	8001488 <main>
  bx  lr    
 80019ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80019dc:	08003ff8 	.word	0x08003ff8
  ldr r2, =_sbss
 80019e0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80019e4:	200000d8 	.word	0x200000d8

080019e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC_IRQHandler>
	...

080019ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <HAL_Init+0x40>)
 80019f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_Init+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <HAL_Init+0x40>)
 8001a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <HAL_Init+0x40>)
 8001a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f000 f931 	bl	8001c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f000 f808 	bl	8001a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a20:	f7ff ff0e 	bl	8001840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023c00 	.word	0x40023c00

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_InitTick+0x54>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_InitTick+0x58>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 f93b 	bl	8001cca <HAL_SYSTICK_Config>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00e      	b.n	8001a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0f      	cmp	r3, #15
 8001a62:	d80a      	bhi.n	8001a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a64:	2200      	movs	r2, #0
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a6c:	f000 f911 	bl	8001c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a70:	4a06      	ldr	r2, [pc, #24]	; (8001a8c <HAL_InitTick+0x5c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e000      	b.n	8001a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000004 	.word	0x20000004
 8001a88:	2000000c 	.word	0x2000000c
 8001a8c:	20000008 	.word	0x20000008

08001a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_IncTick+0x20>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_IncTick+0x24>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <HAL_IncTick+0x24>)
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	2000000c 	.word	0x2000000c
 8001ab4:	200000d4 	.word	0x200000d4

08001ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return uwTick;
 8001abc:	4b03      	ldr	r3, [pc, #12]	; (8001acc <HAL_GetTick+0x14>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	200000d4 	.word	0x200000d4

08001ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad8:	f7ff ffee 	bl	8001ab8 <HAL_GetTick>
 8001adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ae8:	d005      	beq.n	8001af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_Delay+0x44>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001af6:	bf00      	nop
 8001af8:	f7ff ffde 	bl	8001ab8 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d8f7      	bhi.n	8001af8 <HAL_Delay+0x28>
  {
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000000c 	.word	0x2000000c

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	db0a      	blt.n	8001ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	490c      	ldr	r1, [pc, #48]	; (8001bc8 <__NVIC_SetPriority+0x4c>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba4:	e00a      	b.n	8001bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4908      	ldr	r1, [pc, #32]	; (8001bcc <__NVIC_SetPriority+0x50>)
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	3b04      	subs	r3, #4
 8001bb4:	0112      	lsls	r2, r2, #4
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	440b      	add	r3, r1
 8001bba:	761a      	strb	r2, [r3, #24]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	; 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f1c3 0307 	rsb	r3, r3, #7
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	bf28      	it	cs
 8001bee:	2304      	movcs	r3, #4
 8001bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d902      	bls.n	8001c00 <NVIC_EncodePriority+0x30>
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3b03      	subs	r3, #3
 8001bfe:	e000      	b.n	8001c02 <NVIC_EncodePriority+0x32>
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	401a      	ands	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43d9      	mvns	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	4313      	orrs	r3, r2
         );
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3724      	adds	r7, #36	; 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c48:	d301      	bcc.n	8001c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00f      	b.n	8001c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <SysTick_Config+0x40>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c56:	210f      	movs	r1, #15
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c5c:	f7ff ff8e 	bl	8001b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <SysTick_Config+0x40>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c66:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <SysTick_Config+0x40>)
 8001c68:	2207      	movs	r2, #7
 8001c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	e000e010 	.word	0xe000e010

08001c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff47 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca4:	f7ff ff5c 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	6978      	ldr	r0, [r7, #20]
 8001cb0:	f7ff ff8e 	bl	8001bd0 <NVIC_EncodePriority>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff5d 	bl	8001b7c <__NVIC_SetPriority>
}
 8001cc2:	bf00      	nop
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ffb0 	bl	8001c38 <SysTick_Config>
 8001cd8:	4603      	mov	r3, r0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	e165      	b.n	8001fcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d00:	2201      	movs	r2, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	f040 8154 	bne.w	8001fc6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d005      	beq.n	8001d36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d130      	bne.n	8001d98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 0201 	and.w	r2, r3, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d017      	beq.n	8001dd4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d123      	bne.n	8001e28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	08da      	lsrs	r2, r3, #3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3208      	adds	r2, #8
 8001de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	220f      	movs	r2, #15
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	08da      	lsrs	r2, r3, #3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3208      	adds	r2, #8
 8001e22:	69b9      	ldr	r1, [r7, #24]
 8001e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2203      	movs	r2, #3
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0203 	and.w	r2, r3, #3
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80ae 	beq.w	8001fc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b5d      	ldr	r3, [pc, #372]	; (8001fe4 <HAL_GPIO_Init+0x300>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	4a5c      	ldr	r2, [pc, #368]	; (8001fe4 <HAL_GPIO_Init+0x300>)
 8001e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e78:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7a:	4b5a      	ldr	r3, [pc, #360]	; (8001fe4 <HAL_GPIO_Init+0x300>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e86:	4a58      	ldr	r2, [pc, #352]	; (8001fe8 <HAL_GPIO_Init+0x304>)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	220f      	movs	r2, #15
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4f      	ldr	r2, [pc, #316]	; (8001fec <HAL_GPIO_Init+0x308>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d025      	beq.n	8001efe <HAL_GPIO_Init+0x21a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4e      	ldr	r2, [pc, #312]	; (8001ff0 <HAL_GPIO_Init+0x30c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d01f      	beq.n	8001efa <HAL_GPIO_Init+0x216>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4d      	ldr	r2, [pc, #308]	; (8001ff4 <HAL_GPIO_Init+0x310>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d019      	beq.n	8001ef6 <HAL_GPIO_Init+0x212>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4c      	ldr	r2, [pc, #304]	; (8001ff8 <HAL_GPIO_Init+0x314>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d013      	beq.n	8001ef2 <HAL_GPIO_Init+0x20e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4b      	ldr	r2, [pc, #300]	; (8001ffc <HAL_GPIO_Init+0x318>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00d      	beq.n	8001eee <HAL_GPIO_Init+0x20a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a4a      	ldr	r2, [pc, #296]	; (8002000 <HAL_GPIO_Init+0x31c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d007      	beq.n	8001eea <HAL_GPIO_Init+0x206>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a49      	ldr	r2, [pc, #292]	; (8002004 <HAL_GPIO_Init+0x320>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <HAL_GPIO_Init+0x202>
 8001ee2:	2306      	movs	r3, #6
 8001ee4:	e00c      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001ee6:	2307      	movs	r3, #7
 8001ee8:	e00a      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001eea:	2305      	movs	r3, #5
 8001eec:	e008      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001eee:	2304      	movs	r3, #4
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e004      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e002      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001efe:	2300      	movs	r3, #0
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	f002 0203 	and.w	r2, r2, #3
 8001f06:	0092      	lsls	r2, r2, #2
 8001f08:	4093      	lsls	r3, r2
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f10:	4935      	ldr	r1, [pc, #212]	; (8001fe8 <HAL_GPIO_Init+0x304>)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	089b      	lsrs	r3, r3, #2
 8001f16:	3302      	adds	r3, #2
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f1e:	4b3a      	ldr	r3, [pc, #232]	; (8002008 <HAL_GPIO_Init+0x324>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f42:	4a31      	ldr	r2, [pc, #196]	; (8002008 <HAL_GPIO_Init+0x324>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f48:	4b2f      	ldr	r3, [pc, #188]	; (8002008 <HAL_GPIO_Init+0x324>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f6c:	4a26      	ldr	r2, [pc, #152]	; (8002008 <HAL_GPIO_Init+0x324>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f72:	4b25      	ldr	r3, [pc, #148]	; (8002008 <HAL_GPIO_Init+0x324>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f96:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <HAL_GPIO_Init+0x324>)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <HAL_GPIO_Init+0x324>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fc0:	4a11      	ldr	r2, [pc, #68]	; (8002008 <HAL_GPIO_Init+0x324>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	2b0f      	cmp	r3, #15
 8001fd0:	f67f ae96 	bls.w	8001d00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	3724      	adds	r7, #36	; 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40013800 	.word	0x40013800
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020c00 	.word	0x40020c00
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40021400 	.word	0x40021400
 8002004:	40021800 	.word	0x40021800
 8002008:	40013c00 	.word	0x40013c00

0800200c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	807b      	strh	r3, [r7, #2]
 8002018:	4613      	mov	r3, r2
 800201a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800201c:	787b      	ldrb	r3, [r7, #1]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002022:	887a      	ldrh	r2, [r7, #2]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002028:	e003      	b.n	8002032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800202a:	887b      	ldrh	r3, [r7, #2]
 800202c:	041a      	lsls	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	619a      	str	r2, [r3, #24]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0cc      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002054:	4b68      	ldr	r3, [pc, #416]	; (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d90c      	bls.n	800207c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b65      	ldr	r3, [pc, #404]	; (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800206a:	4b63      	ldr	r3, [pc, #396]	; (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0b8      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d020      	beq.n	80020ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002094:	4b59      	ldr	r3, [pc, #356]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	4a58      	ldr	r2, [pc, #352]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800209e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020ac:	4b53      	ldr	r3, [pc, #332]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4a52      	ldr	r2, [pc, #328]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b8:	4b50      	ldr	r3, [pc, #320]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	494d      	ldr	r1, [pc, #308]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d044      	beq.n	8002160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	4b47      	ldr	r3, [pc, #284]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d119      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e07f      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d003      	beq.n	80020fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fe:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e06f      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210e:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e067      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211e:	4b37      	ldr	r3, [pc, #220]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f023 0203 	bic.w	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4934      	ldr	r1, [pc, #208]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	4313      	orrs	r3, r2
 800212e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002130:	f7ff fcc2 	bl	8001ab8 <HAL_GetTick>
 8002134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	e00a      	b.n	800214e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002138:	f7ff fcbe 	bl	8001ab8 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	; 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e04f      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 020c 	and.w	r2, r3, #12
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	429a      	cmp	r2, r3
 800215e:	d1eb      	bne.n	8002138 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002160:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d20c      	bcs.n	8002188 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e032      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4916      	ldr	r1, [pc, #88]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	490e      	ldr	r1, [pc, #56]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021c6:	f000 f855 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 80021ca:	4602      	mov	r2, r0
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	490a      	ldr	r1, [pc, #40]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	5ccb      	ldrb	r3, [r1, r3]
 80021da:	fa22 f303 	lsr.w	r3, r2, r3
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_ClockConfig+0x1c8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fc22 	bl	8001a30 <HAL_InitTick>

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023c00 	.word	0x40023c00
 80021fc:	40023800 	.word	0x40023800
 8002200:	08003f88 	.word	0x08003f88
 8002204:	20000004 	.word	0x20000004
 8002208:	20000008 	.word	0x20000008

0800220c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <HAL_RCC_GetHCLKFreq+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000004 	.word	0x20000004

08002224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002228:	f7ff fff0 	bl	800220c <HAL_RCC_GetHCLKFreq>
 800222c:	4602      	mov	r2, r0
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	0a9b      	lsrs	r3, r3, #10
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	4903      	ldr	r1, [pc, #12]	; (8002248 <HAL_RCC_GetPCLK1Freq+0x24>)
 800223a:	5ccb      	ldrb	r3, [r1, r3]
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002240:	4618      	mov	r0, r3
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40023800 	.word	0x40023800
 8002248:	08003f98 	.word	0x08003f98

0800224c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002250:	f7ff ffdc 	bl	800220c <HAL_RCC_GetHCLKFreq>
 8002254:	4602      	mov	r2, r0
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	0b5b      	lsrs	r3, r3, #13
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	4903      	ldr	r1, [pc, #12]	; (8002270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002262:	5ccb      	ldrb	r3, [r1, r3]
 8002264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002268:	4618      	mov	r0, r3
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40023800 	.word	0x40023800
 8002270:	08003f98 	.word	0x08003f98

08002274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002278:	b088      	sub	sp, #32
 800227a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002290:	4bce      	ldr	r3, [pc, #824]	; (80025cc <HAL_RCC_GetSysClockFreq+0x358>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b0c      	cmp	r3, #12
 800229a:	f200 818d 	bhi.w	80025b8 <HAL_RCC_GetSysClockFreq+0x344>
 800229e:	a201      	add	r2, pc, #4	; (adr r2, 80022a4 <HAL_RCC_GetSysClockFreq+0x30>)
 80022a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a4:	080022d9 	.word	0x080022d9
 80022a8:	080025b9 	.word	0x080025b9
 80022ac:	080025b9 	.word	0x080025b9
 80022b0:	080025b9 	.word	0x080025b9
 80022b4:	080022df 	.word	0x080022df
 80022b8:	080025b9 	.word	0x080025b9
 80022bc:	080025b9 	.word	0x080025b9
 80022c0:	080025b9 	.word	0x080025b9
 80022c4:	080022e5 	.word	0x080022e5
 80022c8:	080025b9 	.word	0x080025b9
 80022cc:	080025b9 	.word	0x080025b9
 80022d0:	080025b9 	.word	0x080025b9
 80022d4:	08002459 	.word	0x08002459
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022d8:	4bbd      	ldr	r3, [pc, #756]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80022da:	61bb      	str	r3, [r7, #24]
       break;
 80022dc:	e16f      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022de:	4bbd      	ldr	r3, [pc, #756]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x360>)
 80022e0:	61bb      	str	r3, [r7, #24]
      break;
 80022e2:	e16c      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022e4:	4bb9      	ldr	r3, [pc, #740]	; (80025cc <HAL_RCC_GetSysClockFreq+0x358>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022ec:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ee:	4bb7      	ldr	r3, [pc, #732]	; (80025cc <HAL_RCC_GetSysClockFreq+0x358>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d053      	beq.n	80023a2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022fa:	4bb4      	ldr	r3, [pc, #720]	; (80025cc <HAL_RCC_GetSysClockFreq+0x358>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	099b      	lsrs	r3, r3, #6
 8002300:	461a      	mov	r2, r3
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	f240 10ff 	movw	r0, #511	; 0x1ff
 800230a:	f04f 0100 	mov.w	r1, #0
 800230e:	ea02 0400 	and.w	r4, r2, r0
 8002312:	603c      	str	r4, [r7, #0]
 8002314:	400b      	ands	r3, r1
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	e9d7 4500 	ldrd	r4, r5, [r7]
 800231c:	4620      	mov	r0, r4
 800231e:	4629      	mov	r1, r5
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	014b      	lsls	r3, r1, #5
 800232a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800232e:	0142      	lsls	r2, r0, #5
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	4623      	mov	r3, r4
 8002336:	1ac0      	subs	r0, r0, r3
 8002338:	462b      	mov	r3, r5
 800233a:	eb61 0103 	sbc.w	r1, r1, r3
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	018b      	lsls	r3, r1, #6
 8002348:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800234c:	0182      	lsls	r2, r0, #6
 800234e:	1a12      	subs	r2, r2, r0
 8002350:	eb63 0301 	sbc.w	r3, r3, r1
 8002354:	f04f 0000 	mov.w	r0, #0
 8002358:	f04f 0100 	mov.w	r1, #0
 800235c:	00d9      	lsls	r1, r3, #3
 800235e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002362:	00d0      	lsls	r0, r2, #3
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4621      	mov	r1, r4
 800236a:	1852      	adds	r2, r2, r1
 800236c:	4629      	mov	r1, r5
 800236e:	eb43 0101 	adc.w	r1, r3, r1
 8002372:	460b      	mov	r3, r1
 8002374:	f04f 0000 	mov.w	r0, #0
 8002378:	f04f 0100 	mov.w	r1, #0
 800237c:	0259      	lsls	r1, r3, #9
 800237e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002382:	0250      	lsls	r0, r2, #9
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	461a      	mov	r2, r3
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	f7fe fbcc 	bl	8000b30 <__aeabi_uldivmod>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4613      	mov	r3, r2
 800239e:	61fb      	str	r3, [r7, #28]
 80023a0:	e04c      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a2:	4b8a      	ldr	r3, [pc, #552]	; (80025cc <HAL_RCC_GetSysClockFreq+0x358>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	099b      	lsrs	r3, r3, #6
 80023a8:	461a      	mov	r2, r3
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023b2:	f04f 0100 	mov.w	r1, #0
 80023b6:	ea02 0a00 	and.w	sl, r2, r0
 80023ba:	ea03 0b01 	and.w	fp, r3, r1
 80023be:	4650      	mov	r0, sl
 80023c0:	4659      	mov	r1, fp
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	014b      	lsls	r3, r1, #5
 80023cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023d0:	0142      	lsls	r2, r0, #5
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	ebb0 000a 	subs.w	r0, r0, sl
 80023da:	eb61 010b 	sbc.w	r1, r1, fp
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	018b      	lsls	r3, r1, #6
 80023e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023ec:	0182      	lsls	r2, r0, #6
 80023ee:	1a12      	subs	r2, r2, r0
 80023f0:	eb63 0301 	sbc.w	r3, r3, r1
 80023f4:	f04f 0000 	mov.w	r0, #0
 80023f8:	f04f 0100 	mov.w	r1, #0
 80023fc:	00d9      	lsls	r1, r3, #3
 80023fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002402:	00d0      	lsls	r0, r2, #3
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	eb12 020a 	adds.w	r2, r2, sl
 800240c:	eb43 030b 	adc.w	r3, r3, fp
 8002410:	f04f 0000 	mov.w	r0, #0
 8002414:	f04f 0100 	mov.w	r1, #0
 8002418:	0299      	lsls	r1, r3, #10
 800241a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800241e:	0290      	lsls	r0, r2, #10
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	461a      	mov	r2, r3
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	f7fe fb7e 	bl	8000b30 <__aeabi_uldivmod>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4613      	mov	r3, r2
 800243a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800243c:	4b63      	ldr	r3, [pc, #396]	; (80025cc <HAL_RCC_GetSysClockFreq+0x358>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	3301      	adds	r3, #1
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	fbb2 f3f3 	udiv	r3, r2, r3
 8002454:	61bb      	str	r3, [r7, #24]
      break;
 8002456:	e0b2      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002458:	4b5c      	ldr	r3, [pc, #368]	; (80025cc <HAL_RCC_GetSysClockFreq+0x358>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002460:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002462:	4b5a      	ldr	r3, [pc, #360]	; (80025cc <HAL_RCC_GetSysClockFreq+0x358>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d04d      	beq.n	800250a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246e:	4b57      	ldr	r3, [pc, #348]	; (80025cc <HAL_RCC_GetSysClockFreq+0x358>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	099b      	lsrs	r3, r3, #6
 8002474:	461a      	mov	r2, r3
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800247e:	f04f 0100 	mov.w	r1, #0
 8002482:	ea02 0800 	and.w	r8, r2, r0
 8002486:	ea03 0901 	and.w	r9, r3, r1
 800248a:	4640      	mov	r0, r8
 800248c:	4649      	mov	r1, r9
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	014b      	lsls	r3, r1, #5
 8002498:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800249c:	0142      	lsls	r2, r0, #5
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	ebb0 0008 	subs.w	r0, r0, r8
 80024a6:	eb61 0109 	sbc.w	r1, r1, r9
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	018b      	lsls	r3, r1, #6
 80024b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024b8:	0182      	lsls	r2, r0, #6
 80024ba:	1a12      	subs	r2, r2, r0
 80024bc:	eb63 0301 	sbc.w	r3, r3, r1
 80024c0:	f04f 0000 	mov.w	r0, #0
 80024c4:	f04f 0100 	mov.w	r1, #0
 80024c8:	00d9      	lsls	r1, r3, #3
 80024ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024ce:	00d0      	lsls	r0, r2, #3
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	eb12 0208 	adds.w	r2, r2, r8
 80024d8:	eb43 0309 	adc.w	r3, r3, r9
 80024dc:	f04f 0000 	mov.w	r0, #0
 80024e0:	f04f 0100 	mov.w	r1, #0
 80024e4:	0259      	lsls	r1, r3, #9
 80024e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80024ea:	0250      	lsls	r0, r2, #9
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	461a      	mov	r2, r3
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	f7fe fb18 	bl	8000b30 <__aeabi_uldivmod>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4613      	mov	r3, r2
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	e04a      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800250a:	4b30      	ldr	r3, [pc, #192]	; (80025cc <HAL_RCC_GetSysClockFreq+0x358>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	099b      	lsrs	r3, r3, #6
 8002510:	461a      	mov	r2, r3
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	f240 10ff 	movw	r0, #511	; 0x1ff
 800251a:	f04f 0100 	mov.w	r1, #0
 800251e:	ea02 0400 	and.w	r4, r2, r0
 8002522:	ea03 0501 	and.w	r5, r3, r1
 8002526:	4620      	mov	r0, r4
 8002528:	4629      	mov	r1, r5
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	014b      	lsls	r3, r1, #5
 8002534:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002538:	0142      	lsls	r2, r0, #5
 800253a:	4610      	mov	r0, r2
 800253c:	4619      	mov	r1, r3
 800253e:	1b00      	subs	r0, r0, r4
 8002540:	eb61 0105 	sbc.w	r1, r1, r5
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	018b      	lsls	r3, r1, #6
 800254e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002552:	0182      	lsls	r2, r0, #6
 8002554:	1a12      	subs	r2, r2, r0
 8002556:	eb63 0301 	sbc.w	r3, r3, r1
 800255a:	f04f 0000 	mov.w	r0, #0
 800255e:	f04f 0100 	mov.w	r1, #0
 8002562:	00d9      	lsls	r1, r3, #3
 8002564:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002568:	00d0      	lsls	r0, r2, #3
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	1912      	adds	r2, r2, r4
 8002570:	eb45 0303 	adc.w	r3, r5, r3
 8002574:	f04f 0000 	mov.w	r0, #0
 8002578:	f04f 0100 	mov.w	r1, #0
 800257c:	0299      	lsls	r1, r3, #10
 800257e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002582:	0290      	lsls	r0, r2, #10
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	461a      	mov	r2, r3
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	f7fe facc 	bl	8000b30 <__aeabi_uldivmod>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4613      	mov	r3, r2
 800259e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80025a0:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_RCC_GetSysClockFreq+0x358>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	0f1b      	lsrs	r3, r3, #28
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80025ac:	69fa      	ldr	r2, [r7, #28]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	61bb      	str	r3, [r7, #24]
      break;
 80025b6:	e002      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80025ba:	61bb      	str	r3, [r7, #24]
      break;
 80025bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025be:	69bb      	ldr	r3, [r7, #24]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	00f42400 	.word	0x00f42400
 80025d4:	007a1200 	.word	0x007a1200

080025d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e28d      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 8083 	beq.w	80026fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80025f8:	4b94      	ldr	r3, [pc, #592]	; (800284c <HAL_RCC_OscConfig+0x274>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b04      	cmp	r3, #4
 8002602:	d019      	beq.n	8002638 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002604:	4b91      	ldr	r3, [pc, #580]	; (800284c <HAL_RCC_OscConfig+0x274>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800260c:	2b08      	cmp	r3, #8
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002610:	4b8e      	ldr	r3, [pc, #568]	; (800284c <HAL_RCC_OscConfig+0x274>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800261c:	d00c      	beq.n	8002638 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800261e:	4b8b      	ldr	r3, [pc, #556]	; (800284c <HAL_RCC_OscConfig+0x274>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002626:	2b0c      	cmp	r3, #12
 8002628:	d112      	bne.n	8002650 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262a:	4b88      	ldr	r3, [pc, #544]	; (800284c <HAL_RCC_OscConfig+0x274>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002636:	d10b      	bne.n	8002650 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002638:	4b84      	ldr	r3, [pc, #528]	; (800284c <HAL_RCC_OscConfig+0x274>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d05b      	beq.n	80026fc <HAL_RCC_OscConfig+0x124>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d157      	bne.n	80026fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e25a      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002658:	d106      	bne.n	8002668 <HAL_RCC_OscConfig+0x90>
 800265a:	4b7c      	ldr	r3, [pc, #496]	; (800284c <HAL_RCC_OscConfig+0x274>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a7b      	ldr	r2, [pc, #492]	; (800284c <HAL_RCC_OscConfig+0x274>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e01d      	b.n	80026a4 <HAL_RCC_OscConfig+0xcc>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0xb4>
 8002672:	4b76      	ldr	r3, [pc, #472]	; (800284c <HAL_RCC_OscConfig+0x274>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a75      	ldr	r2, [pc, #468]	; (800284c <HAL_RCC_OscConfig+0x274>)
 8002678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b73      	ldr	r3, [pc, #460]	; (800284c <HAL_RCC_OscConfig+0x274>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a72      	ldr	r2, [pc, #456]	; (800284c <HAL_RCC_OscConfig+0x274>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e00b      	b.n	80026a4 <HAL_RCC_OscConfig+0xcc>
 800268c:	4b6f      	ldr	r3, [pc, #444]	; (800284c <HAL_RCC_OscConfig+0x274>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a6e      	ldr	r2, [pc, #440]	; (800284c <HAL_RCC_OscConfig+0x274>)
 8002692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	4b6c      	ldr	r3, [pc, #432]	; (800284c <HAL_RCC_OscConfig+0x274>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a6b      	ldr	r2, [pc, #428]	; (800284c <HAL_RCC_OscConfig+0x274>)
 800269e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d013      	beq.n	80026d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7ff fa04 	bl	8001ab8 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b4:	f7ff fa00 	bl	8001ab8 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e21f      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	4b61      	ldr	r3, [pc, #388]	; (800284c <HAL_RCC_OscConfig+0x274>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0xdc>
 80026d2:	e014      	b.n	80026fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7ff f9f0 	bl	8001ab8 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026dc:	f7ff f9ec 	bl	8001ab8 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	; 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e20b      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ee:	4b57      	ldr	r3, [pc, #348]	; (800284c <HAL_RCC_OscConfig+0x274>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x104>
 80026fa:	e000      	b.n	80026fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d06f      	beq.n	80027ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800270a:	4b50      	ldr	r3, [pc, #320]	; (800284c <HAL_RCC_OscConfig+0x274>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b00      	cmp	r3, #0
 8002714:	d017      	beq.n	8002746 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002716:	4b4d      	ldr	r3, [pc, #308]	; (800284c <HAL_RCC_OscConfig+0x274>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800271e:	2b08      	cmp	r3, #8
 8002720:	d105      	bne.n	800272e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002722:	4b4a      	ldr	r3, [pc, #296]	; (800284c <HAL_RCC_OscConfig+0x274>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCC_OscConfig+0x274>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002736:	2b0c      	cmp	r3, #12
 8002738:	d11c      	bne.n	8002774 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273a:	4b44      	ldr	r3, [pc, #272]	; (800284c <HAL_RCC_OscConfig+0x274>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d116      	bne.n	8002774 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002746:	4b41      	ldr	r3, [pc, #260]	; (800284c <HAL_RCC_OscConfig+0x274>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <HAL_RCC_OscConfig+0x186>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d001      	beq.n	800275e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e1d3      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275e:	4b3b      	ldr	r3, [pc, #236]	; (800284c <HAL_RCC_OscConfig+0x274>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4937      	ldr	r1, [pc, #220]	; (800284c <HAL_RCC_OscConfig+0x274>)
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002772:	e03a      	b.n	80027ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800277c:	4b34      	ldr	r3, [pc, #208]	; (8002850 <HAL_RCC_OscConfig+0x278>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002782:	f7ff f999 	bl	8001ab8 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800278a:	f7ff f995 	bl	8001ab8 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e1b4      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_RCC_OscConfig+0x274>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b28      	ldr	r3, [pc, #160]	; (800284c <HAL_RCC_OscConfig+0x274>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4925      	ldr	r1, [pc, #148]	; (800284c <HAL_RCC_OscConfig+0x274>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]
 80027bc:	e015      	b.n	80027ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027be:	4b24      	ldr	r3, [pc, #144]	; (8002850 <HAL_RCC_OscConfig+0x278>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7ff f978 	bl	8001ab8 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027cc:	f7ff f974 	bl	8001ab8 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e193      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027de:	4b1b      	ldr	r3, [pc, #108]	; (800284c <HAL_RCC_OscConfig+0x274>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d036      	beq.n	8002864 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d016      	beq.n	800282c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <HAL_RCC_OscConfig+0x27c>)
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7ff f958 	bl	8001ab8 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280c:	f7ff f954 	bl	8001ab8 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e173      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_OscConfig+0x274>)
 8002820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x234>
 800282a:	e01b      	b.n	8002864 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_RCC_OscConfig+0x27c>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7ff f941 	bl	8001ab8 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002838:	e00e      	b.n	8002858 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283a:	f7ff f93d 	bl	8001ab8 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d907      	bls.n	8002858 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e15c      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
 800284c:	40023800 	.word	0x40023800
 8002850:	42470000 	.word	0x42470000
 8002854:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002858:	4b8a      	ldr	r3, [pc, #552]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 800285a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ea      	bne.n	800283a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8097 	beq.w	80029a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002876:	4b83      	ldr	r3, [pc, #524]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10f      	bne.n	80028a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	4b7f      	ldr	r3, [pc, #508]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	4a7e      	ldr	r2, [pc, #504]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 800288c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002890:	6413      	str	r3, [r2, #64]	; 0x40
 8002892:	4b7c      	ldr	r3, [pc, #496]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289e:	2301      	movs	r3, #1
 80028a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a2:	4b79      	ldr	r3, [pc, #484]	; (8002a88 <HAL_RCC_OscConfig+0x4b0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d118      	bne.n	80028e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ae:	4b76      	ldr	r3, [pc, #472]	; (8002a88 <HAL_RCC_OscConfig+0x4b0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a75      	ldr	r2, [pc, #468]	; (8002a88 <HAL_RCC_OscConfig+0x4b0>)
 80028b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ba:	f7ff f8fd 	bl	8001ab8 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c2:	f7ff f8f9 	bl	8001ab8 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e118      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d4:	4b6c      	ldr	r3, [pc, #432]	; (8002a88 <HAL_RCC_OscConfig+0x4b0>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d106      	bne.n	80028f6 <HAL_RCC_OscConfig+0x31e>
 80028e8:	4b66      	ldr	r3, [pc, #408]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4a65      	ldr	r2, [pc, #404]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6713      	str	r3, [r2, #112]	; 0x70
 80028f4:	e01c      	b.n	8002930 <HAL_RCC_OscConfig+0x358>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b05      	cmp	r3, #5
 80028fc:	d10c      	bne.n	8002918 <HAL_RCC_OscConfig+0x340>
 80028fe:	4b61      	ldr	r3, [pc, #388]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	4a60      	ldr	r2, [pc, #384]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	6713      	str	r3, [r2, #112]	; 0x70
 800290a:	4b5e      	ldr	r3, [pc, #376]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	4a5d      	ldr	r2, [pc, #372]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6713      	str	r3, [r2, #112]	; 0x70
 8002916:	e00b      	b.n	8002930 <HAL_RCC_OscConfig+0x358>
 8002918:	4b5a      	ldr	r3, [pc, #360]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	4a59      	ldr	r2, [pc, #356]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	6713      	str	r3, [r2, #112]	; 0x70
 8002924:	4b57      	ldr	r3, [pc, #348]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	4a56      	ldr	r2, [pc, #344]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 800292a:	f023 0304 	bic.w	r3, r3, #4
 800292e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d015      	beq.n	8002964 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7ff f8be 	bl	8001ab8 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293e:	e00a      	b.n	8002956 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002940:	f7ff f8ba 	bl	8001ab8 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	; 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e0d7      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002956:	4b4b      	ldr	r3, [pc, #300]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0ee      	beq.n	8002940 <HAL_RCC_OscConfig+0x368>
 8002962:	e014      	b.n	800298e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7ff f8a8 	bl	8001ab8 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296a:	e00a      	b.n	8002982 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296c:	f7ff f8a4 	bl	8001ab8 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	; 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e0c1      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002982:	4b40      	ldr	r3, [pc, #256]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1ee      	bne.n	800296c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800298e:	7dfb      	ldrb	r3, [r7, #23]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d105      	bne.n	80029a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002994:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	4a3a      	ldr	r2, [pc, #232]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 800299a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80ad 	beq.w	8002b04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029aa:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d060      	beq.n	8002a78 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d145      	bne.n	8002a4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029be:	4b33      	ldr	r3, [pc, #204]	; (8002a8c <HAL_RCC_OscConfig+0x4b4>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7ff f878 	bl	8001ab8 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029cc:	f7ff f874 	bl	8001ab8 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e093      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69da      	ldr	r2, [r3, #28]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	019b      	lsls	r3, r3, #6
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	085b      	lsrs	r3, r3, #1
 8002a02:	3b01      	subs	r3, #1
 8002a04:	041b      	lsls	r3, r3, #16
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	061b      	lsls	r3, r3, #24
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	071b      	lsls	r3, r3, #28
 8002a16:	491b      	ldr	r1, [pc, #108]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <HAL_RCC_OscConfig+0x4b4>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a22:	f7ff f849 	bl	8001ab8 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2a:	f7ff f845 	bl	8001ab8 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e064      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x452>
 8002a48:	e05c      	b.n	8002b04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_RCC_OscConfig+0x4b4>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7ff f832 	bl	8001ab8 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a58:	f7ff f82e 	bl	8001ab8 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e04d      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x480>
 8002a76:	e045      	b.n	8002b04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d107      	bne.n	8002a90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e040      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40007000 	.word	0x40007000
 8002a8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a90:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <HAL_RCC_OscConfig+0x538>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d030      	beq.n	8002b00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d129      	bne.n	8002b00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d122      	bne.n	8002b00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ac6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d119      	bne.n	8002b00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	085b      	lsrs	r3, r3, #1
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d10f      	bne.n	8002b00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d107      	bne.n	8002b00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800

08002b14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e03f      	b.n	8002ba6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7fe fea8 	bl	8001890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2224      	movs	r2, #36	; 0x24
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f829 	bl	8002bb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695a      	ldr	r2, [r3, #20]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bb4:	b09f      	sub	sp, #124	; 0x7c
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc6:	68d9      	ldr	r1, [r3, #12]
 8002bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	ea40 0301 	orr.w	r3, r0, r1
 8002bd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002bf4:	f021 010c 	bic.w	r1, r1, #12
 8002bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bfe:	430b      	orrs	r3, r1
 8002c00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c0e:	6999      	ldr	r1, [r3, #24]
 8002c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	ea40 0301 	orr.w	r3, r0, r1
 8002c18:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4bc5      	ldr	r3, [pc, #788]	; (8002f34 <UART_SetConfig+0x384>)
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d004      	beq.n	8002c2e <UART_SetConfig+0x7e>
 8002c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4bc3      	ldr	r3, [pc, #780]	; (8002f38 <UART_SetConfig+0x388>)
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d103      	bne.n	8002c36 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c2e:	f7ff fb0d 	bl	800224c <HAL_RCC_GetPCLK2Freq>
 8002c32:	6778      	str	r0, [r7, #116]	; 0x74
 8002c34:	e002      	b.n	8002c3c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c36:	f7ff faf5 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8002c3a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c44:	f040 80b6 	bne.w	8002db4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c4a:	461c      	mov	r4, r3
 8002c4c:	f04f 0500 	mov.w	r5, #0
 8002c50:	4622      	mov	r2, r4
 8002c52:	462b      	mov	r3, r5
 8002c54:	1891      	adds	r1, r2, r2
 8002c56:	6439      	str	r1, [r7, #64]	; 0x40
 8002c58:	415b      	adcs	r3, r3
 8002c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c60:	1912      	adds	r2, r2, r4
 8002c62:	eb45 0303 	adc.w	r3, r5, r3
 8002c66:	f04f 0000 	mov.w	r0, #0
 8002c6a:	f04f 0100 	mov.w	r1, #0
 8002c6e:	00d9      	lsls	r1, r3, #3
 8002c70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c74:	00d0      	lsls	r0, r2, #3
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	1911      	adds	r1, r2, r4
 8002c7c:	6639      	str	r1, [r7, #96]	; 0x60
 8002c7e:	416b      	adcs	r3, r5
 8002c80:	667b      	str	r3, [r7, #100]	; 0x64
 8002c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	461a      	mov	r2, r3
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	1891      	adds	r1, r2, r2
 8002c8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c90:	415b      	adcs	r3, r3
 8002c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c98:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002c9c:	f7fd ff48 	bl	8000b30 <__aeabi_uldivmod>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4ba5      	ldr	r3, [pc, #660]	; (8002f3c <UART_SetConfig+0x38c>)
 8002ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	011e      	lsls	r6, r3, #4
 8002cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cb0:	461c      	mov	r4, r3
 8002cb2:	f04f 0500 	mov.w	r5, #0
 8002cb6:	4622      	mov	r2, r4
 8002cb8:	462b      	mov	r3, r5
 8002cba:	1891      	adds	r1, r2, r2
 8002cbc:	6339      	str	r1, [r7, #48]	; 0x30
 8002cbe:	415b      	adcs	r3, r3
 8002cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002cc6:	1912      	adds	r2, r2, r4
 8002cc8:	eb45 0303 	adc.w	r3, r5, r3
 8002ccc:	f04f 0000 	mov.w	r0, #0
 8002cd0:	f04f 0100 	mov.w	r1, #0
 8002cd4:	00d9      	lsls	r1, r3, #3
 8002cd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cda:	00d0      	lsls	r0, r2, #3
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	1911      	adds	r1, r2, r4
 8002ce2:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ce4:	416b      	adcs	r3, r5
 8002ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	461a      	mov	r2, r3
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	1891      	adds	r1, r2, r2
 8002cf4:	62b9      	str	r1, [r7, #40]	; 0x28
 8002cf6:	415b      	adcs	r3, r3
 8002cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cfe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002d02:	f7fd ff15 	bl	8000b30 <__aeabi_uldivmod>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4b8c      	ldr	r3, [pc, #560]	; (8002f3c <UART_SetConfig+0x38c>)
 8002d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	2164      	movs	r1, #100	; 0x64
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	3332      	adds	r3, #50	; 0x32
 8002d1e:	4a87      	ldr	r2, [pc, #540]	; (8002f3c <UART_SetConfig+0x38c>)
 8002d20:	fba2 2303 	umull	r2, r3, r2, r3
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d2c:	441e      	add	r6, r3
 8002d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d30:	4618      	mov	r0, r3
 8002d32:	f04f 0100 	mov.w	r1, #0
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	1894      	adds	r4, r2, r2
 8002d3c:	623c      	str	r4, [r7, #32]
 8002d3e:	415b      	adcs	r3, r3
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
 8002d42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d46:	1812      	adds	r2, r2, r0
 8002d48:	eb41 0303 	adc.w	r3, r1, r3
 8002d4c:	f04f 0400 	mov.w	r4, #0
 8002d50:	f04f 0500 	mov.w	r5, #0
 8002d54:	00dd      	lsls	r5, r3, #3
 8002d56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d5a:	00d4      	lsls	r4, r2, #3
 8002d5c:	4622      	mov	r2, r4
 8002d5e:	462b      	mov	r3, r5
 8002d60:	1814      	adds	r4, r2, r0
 8002d62:	653c      	str	r4, [r7, #80]	; 0x50
 8002d64:	414b      	adcs	r3, r1
 8002d66:	657b      	str	r3, [r7, #84]	; 0x54
 8002d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	1891      	adds	r1, r2, r2
 8002d74:	61b9      	str	r1, [r7, #24]
 8002d76:	415b      	adcs	r3, r3
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d7e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002d82:	f7fd fed5 	bl	8000b30 <__aeabi_uldivmod>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4b6c      	ldr	r3, [pc, #432]	; (8002f3c <UART_SetConfig+0x38c>)
 8002d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	2164      	movs	r1, #100	; 0x64
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	3332      	adds	r3, #50	; 0x32
 8002d9e:	4a67      	ldr	r2, [pc, #412]	; (8002f3c <UART_SetConfig+0x38c>)
 8002da0:	fba2 2303 	umull	r2, r3, r2, r3
 8002da4:	095b      	lsrs	r3, r3, #5
 8002da6:	f003 0207 	and.w	r2, r3, #7
 8002daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4432      	add	r2, r6
 8002db0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002db2:	e0b9      	b.n	8002f28 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002db4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db6:	461c      	mov	r4, r3
 8002db8:	f04f 0500 	mov.w	r5, #0
 8002dbc:	4622      	mov	r2, r4
 8002dbe:	462b      	mov	r3, r5
 8002dc0:	1891      	adds	r1, r2, r2
 8002dc2:	6139      	str	r1, [r7, #16]
 8002dc4:	415b      	adcs	r3, r3
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002dcc:	1912      	adds	r2, r2, r4
 8002dce:	eb45 0303 	adc.w	r3, r5, r3
 8002dd2:	f04f 0000 	mov.w	r0, #0
 8002dd6:	f04f 0100 	mov.w	r1, #0
 8002dda:	00d9      	lsls	r1, r3, #3
 8002ddc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002de0:	00d0      	lsls	r0, r2, #3
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	eb12 0804 	adds.w	r8, r2, r4
 8002dea:	eb43 0905 	adc.w	r9, r3, r5
 8002dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f04f 0100 	mov.w	r1, #0
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	008b      	lsls	r3, r1, #2
 8002e02:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e06:	0082      	lsls	r2, r0, #2
 8002e08:	4640      	mov	r0, r8
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	f7fd fe90 	bl	8000b30 <__aeabi_uldivmod>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4b49      	ldr	r3, [pc, #292]	; (8002f3c <UART_SetConfig+0x38c>)
 8002e16:	fba3 2302 	umull	r2, r3, r3, r2
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	011e      	lsls	r6, r3, #4
 8002e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e20:	4618      	mov	r0, r3
 8002e22:	f04f 0100 	mov.w	r1, #0
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	1894      	adds	r4, r2, r2
 8002e2c:	60bc      	str	r4, [r7, #8]
 8002e2e:	415b      	adcs	r3, r3
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e36:	1812      	adds	r2, r2, r0
 8002e38:	eb41 0303 	adc.w	r3, r1, r3
 8002e3c:	f04f 0400 	mov.w	r4, #0
 8002e40:	f04f 0500 	mov.w	r5, #0
 8002e44:	00dd      	lsls	r5, r3, #3
 8002e46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e4a:	00d4      	lsls	r4, r2, #3
 8002e4c:	4622      	mov	r2, r4
 8002e4e:	462b      	mov	r3, r5
 8002e50:	1814      	adds	r4, r2, r0
 8002e52:	64bc      	str	r4, [r7, #72]	; 0x48
 8002e54:	414b      	adcs	r3, r1
 8002e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f04f 0100 	mov.w	r1, #0
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	008b      	lsls	r3, r1, #2
 8002e6c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e70:	0082      	lsls	r2, r0, #2
 8002e72:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002e76:	f7fd fe5b 	bl	8000b30 <__aeabi_uldivmod>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4b2f      	ldr	r3, [pc, #188]	; (8002f3c <UART_SetConfig+0x38c>)
 8002e80:	fba3 1302 	umull	r1, r3, r3, r2
 8002e84:	095b      	lsrs	r3, r3, #5
 8002e86:	2164      	movs	r1, #100	; 0x64
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	3332      	adds	r3, #50	; 0x32
 8002e92:	4a2a      	ldr	r2, [pc, #168]	; (8002f3c <UART_SetConfig+0x38c>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e9e:	441e      	add	r6, r3
 8002ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f04f 0100 	mov.w	r1, #0
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	1894      	adds	r4, r2, r2
 8002eae:	603c      	str	r4, [r7, #0]
 8002eb0:	415b      	adcs	r3, r3
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eb8:	1812      	adds	r2, r2, r0
 8002eba:	eb41 0303 	adc.w	r3, r1, r3
 8002ebe:	f04f 0400 	mov.w	r4, #0
 8002ec2:	f04f 0500 	mov.w	r5, #0
 8002ec6:	00dd      	lsls	r5, r3, #3
 8002ec8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ecc:	00d4      	lsls	r4, r2, #3
 8002ece:	4622      	mov	r2, r4
 8002ed0:	462b      	mov	r3, r5
 8002ed2:	eb12 0a00 	adds.w	sl, r2, r0
 8002ed6:	eb43 0b01 	adc.w	fp, r3, r1
 8002eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f04f 0100 	mov.w	r1, #0
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	008b      	lsls	r3, r1, #2
 8002eee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ef2:	0082      	lsls	r2, r0, #2
 8002ef4:	4650      	mov	r0, sl
 8002ef6:	4659      	mov	r1, fp
 8002ef8:	f7fd fe1a 	bl	8000b30 <__aeabi_uldivmod>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <UART_SetConfig+0x38c>)
 8002f02:	fba3 1302 	umull	r1, r3, r3, r2
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	2164      	movs	r1, #100	; 0x64
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	3332      	adds	r3, #50	; 0x32
 8002f14:	4a09      	ldr	r2, [pc, #36]	; (8002f3c <UART_SetConfig+0x38c>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	f003 020f 	and.w	r2, r3, #15
 8002f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4432      	add	r2, r6
 8002f26:	609a      	str	r2, [r3, #8]
}
 8002f28:	bf00      	nop
 8002f2a:	377c      	adds	r7, #124	; 0x7c
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f32:	bf00      	nop
 8002f34:	40011000 	.word	0x40011000
 8002f38:	40011400 	.word	0x40011400
 8002f3c:	51eb851f 	.word	0x51eb851f

08002f40 <pow>:
 8002f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f44:	ec59 8b10 	vmov	r8, r9, d0
 8002f48:	ec57 6b11 	vmov	r6, r7, d1
 8002f4c:	f000 f8a8 	bl	80030a0 <__ieee754_pow>
 8002f50:	4b4e      	ldr	r3, [pc, #312]	; (800308c <pow+0x14c>)
 8002f52:	f993 3000 	ldrsb.w	r3, [r3]
 8002f56:	3301      	adds	r3, #1
 8002f58:	ec55 4b10 	vmov	r4, r5, d0
 8002f5c:	d015      	beq.n	8002f8a <pow+0x4a>
 8002f5e:	4632      	mov	r2, r6
 8002f60:	463b      	mov	r3, r7
 8002f62:	4630      	mov	r0, r6
 8002f64:	4639      	mov	r1, r7
 8002f66:	f7fd fda5 	bl	8000ab4 <__aeabi_dcmpun>
 8002f6a:	b970      	cbnz	r0, 8002f8a <pow+0x4a>
 8002f6c:	4642      	mov	r2, r8
 8002f6e:	464b      	mov	r3, r9
 8002f70:	4640      	mov	r0, r8
 8002f72:	4649      	mov	r1, r9
 8002f74:	f7fd fd9e 	bl	8000ab4 <__aeabi_dcmpun>
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	b148      	cbz	r0, 8002f92 <pow+0x52>
 8002f7e:	4630      	mov	r0, r6
 8002f80:	4639      	mov	r1, r7
 8002f82:	f7fd fd65 	bl	8000a50 <__aeabi_dcmpeq>
 8002f86:	2800      	cmp	r0, #0
 8002f88:	d17d      	bne.n	8003086 <pow+0x146>
 8002f8a:	ec45 4b10 	vmov	d0, r4, r5
 8002f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f92:	4640      	mov	r0, r8
 8002f94:	4649      	mov	r1, r9
 8002f96:	f7fd fd5b 	bl	8000a50 <__aeabi_dcmpeq>
 8002f9a:	b1e0      	cbz	r0, 8002fd6 <pow+0x96>
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	4630      	mov	r0, r6
 8002fa2:	4639      	mov	r1, r7
 8002fa4:	f7fd fd54 	bl	8000a50 <__aeabi_dcmpeq>
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d16c      	bne.n	8003086 <pow+0x146>
 8002fac:	ec47 6b10 	vmov	d0, r6, r7
 8002fb0:	f000 fe55 	bl	8003c5e <finite>
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	d0e8      	beq.n	8002f8a <pow+0x4a>
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2300      	movs	r3, #0
 8002fbc:	4630      	mov	r0, r6
 8002fbe:	4639      	mov	r1, r7
 8002fc0:	f7fd fd50 	bl	8000a64 <__aeabi_dcmplt>
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d0e0      	beq.n	8002f8a <pow+0x4a>
 8002fc8:	f000 ff70 	bl	8003eac <__errno>
 8002fcc:	2321      	movs	r3, #33	; 0x21
 8002fce:	6003      	str	r3, [r0, #0]
 8002fd0:	2400      	movs	r4, #0
 8002fd2:	4d2f      	ldr	r5, [pc, #188]	; (8003090 <pow+0x150>)
 8002fd4:	e7d9      	b.n	8002f8a <pow+0x4a>
 8002fd6:	ec45 4b10 	vmov	d0, r4, r5
 8002fda:	f000 fe40 	bl	8003c5e <finite>
 8002fde:	bbb8      	cbnz	r0, 8003050 <pow+0x110>
 8002fe0:	ec49 8b10 	vmov	d0, r8, r9
 8002fe4:	f000 fe3b 	bl	8003c5e <finite>
 8002fe8:	b390      	cbz	r0, 8003050 <pow+0x110>
 8002fea:	ec47 6b10 	vmov	d0, r6, r7
 8002fee:	f000 fe36 	bl	8003c5e <finite>
 8002ff2:	b368      	cbz	r0, 8003050 <pow+0x110>
 8002ff4:	4622      	mov	r2, r4
 8002ff6:	462b      	mov	r3, r5
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	4629      	mov	r1, r5
 8002ffc:	f7fd fd5a 	bl	8000ab4 <__aeabi_dcmpun>
 8003000:	b160      	cbz	r0, 800301c <pow+0xdc>
 8003002:	f000 ff53 	bl	8003eac <__errno>
 8003006:	2321      	movs	r3, #33	; 0x21
 8003008:	6003      	str	r3, [r0, #0]
 800300a:	2200      	movs	r2, #0
 800300c:	2300      	movs	r3, #0
 800300e:	4610      	mov	r0, r2
 8003010:	4619      	mov	r1, r3
 8003012:	f7fd fbdf 	bl	80007d4 <__aeabi_ddiv>
 8003016:	4604      	mov	r4, r0
 8003018:	460d      	mov	r5, r1
 800301a:	e7b6      	b.n	8002f8a <pow+0x4a>
 800301c:	f000 ff46 	bl	8003eac <__errno>
 8003020:	2322      	movs	r3, #34	; 0x22
 8003022:	6003      	str	r3, [r0, #0]
 8003024:	2200      	movs	r2, #0
 8003026:	2300      	movs	r3, #0
 8003028:	4640      	mov	r0, r8
 800302a:	4649      	mov	r1, r9
 800302c:	f7fd fd1a 	bl	8000a64 <__aeabi_dcmplt>
 8003030:	2400      	movs	r4, #0
 8003032:	b158      	cbz	r0, 800304c <pow+0x10c>
 8003034:	ec47 6b10 	vmov	d0, r6, r7
 8003038:	f000 fe26 	bl	8003c88 <rint>
 800303c:	4632      	mov	r2, r6
 800303e:	ec51 0b10 	vmov	r0, r1, d0
 8003042:	463b      	mov	r3, r7
 8003044:	f7fd fd04 	bl	8000a50 <__aeabi_dcmpeq>
 8003048:	2800      	cmp	r0, #0
 800304a:	d0c2      	beq.n	8002fd2 <pow+0x92>
 800304c:	4d11      	ldr	r5, [pc, #68]	; (8003094 <pow+0x154>)
 800304e:	e79c      	b.n	8002f8a <pow+0x4a>
 8003050:	2200      	movs	r2, #0
 8003052:	2300      	movs	r3, #0
 8003054:	4620      	mov	r0, r4
 8003056:	4629      	mov	r1, r5
 8003058:	f7fd fcfa 	bl	8000a50 <__aeabi_dcmpeq>
 800305c:	2800      	cmp	r0, #0
 800305e:	d094      	beq.n	8002f8a <pow+0x4a>
 8003060:	ec49 8b10 	vmov	d0, r8, r9
 8003064:	f000 fdfb 	bl	8003c5e <finite>
 8003068:	2800      	cmp	r0, #0
 800306a:	d08e      	beq.n	8002f8a <pow+0x4a>
 800306c:	ec47 6b10 	vmov	d0, r6, r7
 8003070:	f000 fdf5 	bl	8003c5e <finite>
 8003074:	2800      	cmp	r0, #0
 8003076:	d088      	beq.n	8002f8a <pow+0x4a>
 8003078:	f000 ff18 	bl	8003eac <__errno>
 800307c:	2322      	movs	r3, #34	; 0x22
 800307e:	6003      	str	r3, [r0, #0]
 8003080:	2400      	movs	r4, #0
 8003082:	2500      	movs	r5, #0
 8003084:	e781      	b.n	8002f8a <pow+0x4a>
 8003086:	4d04      	ldr	r5, [pc, #16]	; (8003098 <pow+0x158>)
 8003088:	2400      	movs	r4, #0
 800308a:	e77e      	b.n	8002f8a <pow+0x4a>
 800308c:	2000000d 	.word	0x2000000d
 8003090:	fff00000 	.word	0xfff00000
 8003094:	7ff00000 	.word	0x7ff00000
 8003098:	3ff00000 	.word	0x3ff00000
 800309c:	00000000 	.word	0x00000000

080030a0 <__ieee754_pow>:
 80030a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030a4:	ed2d 8b06 	vpush	{d8-d10}
 80030a8:	b08d      	sub	sp, #52	; 0x34
 80030aa:	ed8d 1b02 	vstr	d1, [sp, #8]
 80030ae:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80030b2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80030b6:	ea56 0100 	orrs.w	r1, r6, r0
 80030ba:	ec53 2b10 	vmov	r2, r3, d0
 80030be:	f000 84d1 	beq.w	8003a64 <__ieee754_pow+0x9c4>
 80030c2:	497f      	ldr	r1, [pc, #508]	; (80032c0 <__ieee754_pow+0x220>)
 80030c4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80030c8:	428c      	cmp	r4, r1
 80030ca:	ee10 8a10 	vmov	r8, s0
 80030ce:	4699      	mov	r9, r3
 80030d0:	dc09      	bgt.n	80030e6 <__ieee754_pow+0x46>
 80030d2:	d103      	bne.n	80030dc <__ieee754_pow+0x3c>
 80030d4:	b97a      	cbnz	r2, 80030f6 <__ieee754_pow+0x56>
 80030d6:	42a6      	cmp	r6, r4
 80030d8:	dd02      	ble.n	80030e0 <__ieee754_pow+0x40>
 80030da:	e00c      	b.n	80030f6 <__ieee754_pow+0x56>
 80030dc:	428e      	cmp	r6, r1
 80030de:	dc02      	bgt.n	80030e6 <__ieee754_pow+0x46>
 80030e0:	428e      	cmp	r6, r1
 80030e2:	d110      	bne.n	8003106 <__ieee754_pow+0x66>
 80030e4:	b178      	cbz	r0, 8003106 <__ieee754_pow+0x66>
 80030e6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80030ea:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80030ee:	ea54 0308 	orrs.w	r3, r4, r8
 80030f2:	f000 84b7 	beq.w	8003a64 <__ieee754_pow+0x9c4>
 80030f6:	4873      	ldr	r0, [pc, #460]	; (80032c4 <__ieee754_pow+0x224>)
 80030f8:	b00d      	add	sp, #52	; 0x34
 80030fa:	ecbd 8b06 	vpop	{d8-d10}
 80030fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003102:	f000 bdb9 	b.w	8003c78 <nan>
 8003106:	f1b9 0f00 	cmp.w	r9, #0
 800310a:	da36      	bge.n	800317a <__ieee754_pow+0xda>
 800310c:	496e      	ldr	r1, [pc, #440]	; (80032c8 <__ieee754_pow+0x228>)
 800310e:	428e      	cmp	r6, r1
 8003110:	dc51      	bgt.n	80031b6 <__ieee754_pow+0x116>
 8003112:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8003116:	428e      	cmp	r6, r1
 8003118:	f340 84af 	ble.w	8003a7a <__ieee754_pow+0x9da>
 800311c:	1531      	asrs	r1, r6, #20
 800311e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8003122:	2914      	cmp	r1, #20
 8003124:	dd0f      	ble.n	8003146 <__ieee754_pow+0xa6>
 8003126:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800312a:	fa20 fc01 	lsr.w	ip, r0, r1
 800312e:	fa0c f101 	lsl.w	r1, ip, r1
 8003132:	4281      	cmp	r1, r0
 8003134:	f040 84a1 	bne.w	8003a7a <__ieee754_pow+0x9da>
 8003138:	f00c 0c01 	and.w	ip, ip, #1
 800313c:	f1cc 0102 	rsb	r1, ip, #2
 8003140:	9100      	str	r1, [sp, #0]
 8003142:	b180      	cbz	r0, 8003166 <__ieee754_pow+0xc6>
 8003144:	e059      	b.n	80031fa <__ieee754_pow+0x15a>
 8003146:	2800      	cmp	r0, #0
 8003148:	d155      	bne.n	80031f6 <__ieee754_pow+0x156>
 800314a:	f1c1 0114 	rsb	r1, r1, #20
 800314e:	fa46 fc01 	asr.w	ip, r6, r1
 8003152:	fa0c f101 	lsl.w	r1, ip, r1
 8003156:	42b1      	cmp	r1, r6
 8003158:	f040 848c 	bne.w	8003a74 <__ieee754_pow+0x9d4>
 800315c:	f00c 0c01 	and.w	ip, ip, #1
 8003160:	f1cc 0102 	rsb	r1, ip, #2
 8003164:	9100      	str	r1, [sp, #0]
 8003166:	4959      	ldr	r1, [pc, #356]	; (80032cc <__ieee754_pow+0x22c>)
 8003168:	428e      	cmp	r6, r1
 800316a:	d12d      	bne.n	80031c8 <__ieee754_pow+0x128>
 800316c:	2f00      	cmp	r7, #0
 800316e:	da79      	bge.n	8003264 <__ieee754_pow+0x1c4>
 8003170:	4956      	ldr	r1, [pc, #344]	; (80032cc <__ieee754_pow+0x22c>)
 8003172:	2000      	movs	r0, #0
 8003174:	f7fd fb2e 	bl	80007d4 <__aeabi_ddiv>
 8003178:	e016      	b.n	80031a8 <__ieee754_pow+0x108>
 800317a:	2100      	movs	r1, #0
 800317c:	9100      	str	r1, [sp, #0]
 800317e:	2800      	cmp	r0, #0
 8003180:	d13b      	bne.n	80031fa <__ieee754_pow+0x15a>
 8003182:	494f      	ldr	r1, [pc, #316]	; (80032c0 <__ieee754_pow+0x220>)
 8003184:	428e      	cmp	r6, r1
 8003186:	d1ee      	bne.n	8003166 <__ieee754_pow+0xc6>
 8003188:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800318c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003190:	ea53 0308 	orrs.w	r3, r3, r8
 8003194:	f000 8466 	beq.w	8003a64 <__ieee754_pow+0x9c4>
 8003198:	4b4d      	ldr	r3, [pc, #308]	; (80032d0 <__ieee754_pow+0x230>)
 800319a:	429c      	cmp	r4, r3
 800319c:	dd0d      	ble.n	80031ba <__ieee754_pow+0x11a>
 800319e:	2f00      	cmp	r7, #0
 80031a0:	f280 8464 	bge.w	8003a6c <__ieee754_pow+0x9cc>
 80031a4:	2000      	movs	r0, #0
 80031a6:	2100      	movs	r1, #0
 80031a8:	ec41 0b10 	vmov	d0, r0, r1
 80031ac:	b00d      	add	sp, #52	; 0x34
 80031ae:	ecbd 8b06 	vpop	{d8-d10}
 80031b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031b6:	2102      	movs	r1, #2
 80031b8:	e7e0      	b.n	800317c <__ieee754_pow+0xdc>
 80031ba:	2f00      	cmp	r7, #0
 80031bc:	daf2      	bge.n	80031a4 <__ieee754_pow+0x104>
 80031be:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80031c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80031c6:	e7ef      	b.n	80031a8 <__ieee754_pow+0x108>
 80031c8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80031cc:	d104      	bne.n	80031d8 <__ieee754_pow+0x138>
 80031ce:	4610      	mov	r0, r2
 80031d0:	4619      	mov	r1, r3
 80031d2:	f7fd f9d5 	bl	8000580 <__aeabi_dmul>
 80031d6:	e7e7      	b.n	80031a8 <__ieee754_pow+0x108>
 80031d8:	493e      	ldr	r1, [pc, #248]	; (80032d4 <__ieee754_pow+0x234>)
 80031da:	428f      	cmp	r7, r1
 80031dc:	d10d      	bne.n	80031fa <__ieee754_pow+0x15a>
 80031de:	f1b9 0f00 	cmp.w	r9, #0
 80031e2:	db0a      	blt.n	80031fa <__ieee754_pow+0x15a>
 80031e4:	ec43 2b10 	vmov	d0, r2, r3
 80031e8:	b00d      	add	sp, #52	; 0x34
 80031ea:	ecbd 8b06 	vpop	{d8-d10}
 80031ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f2:	f000 bc77 	b.w	8003ae4 <__ieee754_sqrt>
 80031f6:	2100      	movs	r1, #0
 80031f8:	9100      	str	r1, [sp, #0]
 80031fa:	ec43 2b10 	vmov	d0, r2, r3
 80031fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003202:	f000 fd23 	bl	8003c4c <fabs>
 8003206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800320a:	ec51 0b10 	vmov	r0, r1, d0
 800320e:	f1b8 0f00 	cmp.w	r8, #0
 8003212:	d12a      	bne.n	800326a <__ieee754_pow+0x1ca>
 8003214:	b12c      	cbz	r4, 8003222 <__ieee754_pow+0x182>
 8003216:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80032cc <__ieee754_pow+0x22c>
 800321a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800321e:	45e6      	cmp	lr, ip
 8003220:	d123      	bne.n	800326a <__ieee754_pow+0x1ca>
 8003222:	2f00      	cmp	r7, #0
 8003224:	da05      	bge.n	8003232 <__ieee754_pow+0x192>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	2000      	movs	r0, #0
 800322c:	4927      	ldr	r1, [pc, #156]	; (80032cc <__ieee754_pow+0x22c>)
 800322e:	f7fd fad1 	bl	80007d4 <__aeabi_ddiv>
 8003232:	f1b9 0f00 	cmp.w	r9, #0
 8003236:	dab7      	bge.n	80031a8 <__ieee754_pow+0x108>
 8003238:	9b00      	ldr	r3, [sp, #0]
 800323a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800323e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003242:	4323      	orrs	r3, r4
 8003244:	d108      	bne.n	8003258 <__ieee754_pow+0x1b8>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4610      	mov	r0, r2
 800324c:	4619      	mov	r1, r3
 800324e:	f7fc ffdf 	bl	8000210 <__aeabi_dsub>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	e78d      	b.n	8003174 <__ieee754_pow+0xd4>
 8003258:	9b00      	ldr	r3, [sp, #0]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d1a4      	bne.n	80031a8 <__ieee754_pow+0x108>
 800325e:	4602      	mov	r2, r0
 8003260:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003264:	4610      	mov	r0, r2
 8003266:	4619      	mov	r1, r3
 8003268:	e79e      	b.n	80031a8 <__ieee754_pow+0x108>
 800326a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800326e:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8003272:	950a      	str	r5, [sp, #40]	; 0x28
 8003274:	9d00      	ldr	r5, [sp, #0]
 8003276:	46ac      	mov	ip, r5
 8003278:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800327a:	ea5c 0505 	orrs.w	r5, ip, r5
 800327e:	d0e4      	beq.n	800324a <__ieee754_pow+0x1aa>
 8003280:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <__ieee754_pow+0x238>)
 8003282:	429e      	cmp	r6, r3
 8003284:	f340 80fc 	ble.w	8003480 <__ieee754_pow+0x3e0>
 8003288:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800328c:	429e      	cmp	r6, r3
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <__ieee754_pow+0x230>)
 8003290:	dd07      	ble.n	80032a2 <__ieee754_pow+0x202>
 8003292:	429c      	cmp	r4, r3
 8003294:	dc0a      	bgt.n	80032ac <__ieee754_pow+0x20c>
 8003296:	2f00      	cmp	r7, #0
 8003298:	da84      	bge.n	80031a4 <__ieee754_pow+0x104>
 800329a:	a307      	add	r3, pc, #28	; (adr r3, 80032b8 <__ieee754_pow+0x218>)
 800329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a0:	e795      	b.n	80031ce <__ieee754_pow+0x12e>
 80032a2:	429c      	cmp	r4, r3
 80032a4:	dbf7      	blt.n	8003296 <__ieee754_pow+0x1f6>
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <__ieee754_pow+0x22c>)
 80032a8:	429c      	cmp	r4, r3
 80032aa:	dd17      	ble.n	80032dc <__ieee754_pow+0x23c>
 80032ac:	2f00      	cmp	r7, #0
 80032ae:	dcf4      	bgt.n	800329a <__ieee754_pow+0x1fa>
 80032b0:	e778      	b.n	80031a4 <__ieee754_pow+0x104>
 80032b2:	bf00      	nop
 80032b4:	f3af 8000 	nop.w
 80032b8:	8800759c 	.word	0x8800759c
 80032bc:	7e37e43c 	.word	0x7e37e43c
 80032c0:	7ff00000 	.word	0x7ff00000
 80032c4:	08003fa0 	.word	0x08003fa0
 80032c8:	433fffff 	.word	0x433fffff
 80032cc:	3ff00000 	.word	0x3ff00000
 80032d0:	3fefffff 	.word	0x3fefffff
 80032d4:	3fe00000 	.word	0x3fe00000
 80032d8:	41e00000 	.word	0x41e00000
 80032dc:	4b64      	ldr	r3, [pc, #400]	; (8003470 <__ieee754_pow+0x3d0>)
 80032de:	2200      	movs	r2, #0
 80032e0:	f7fc ff96 	bl	8000210 <__aeabi_dsub>
 80032e4:	a356      	add	r3, pc, #344	; (adr r3, 8003440 <__ieee754_pow+0x3a0>)
 80032e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ea:	4604      	mov	r4, r0
 80032ec:	460d      	mov	r5, r1
 80032ee:	f7fd f947 	bl	8000580 <__aeabi_dmul>
 80032f2:	a355      	add	r3, pc, #340	; (adr r3, 8003448 <__ieee754_pow+0x3a8>)
 80032f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f8:	4606      	mov	r6, r0
 80032fa:	460f      	mov	r7, r1
 80032fc:	4620      	mov	r0, r4
 80032fe:	4629      	mov	r1, r5
 8003300:	f7fd f93e 	bl	8000580 <__aeabi_dmul>
 8003304:	4b5b      	ldr	r3, [pc, #364]	; (8003474 <__ieee754_pow+0x3d4>)
 8003306:	4682      	mov	sl, r0
 8003308:	468b      	mov	fp, r1
 800330a:	2200      	movs	r2, #0
 800330c:	4620      	mov	r0, r4
 800330e:	4629      	mov	r1, r5
 8003310:	f7fd f936 	bl	8000580 <__aeabi_dmul>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	a14d      	add	r1, pc, #308	; (adr r1, 8003450 <__ieee754_pow+0x3b0>)
 800331a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800331e:	f7fc ff77 	bl	8000210 <__aeabi_dsub>
 8003322:	4622      	mov	r2, r4
 8003324:	462b      	mov	r3, r5
 8003326:	f7fd f92b 	bl	8000580 <__aeabi_dmul>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	2000      	movs	r0, #0
 8003330:	4951      	ldr	r1, [pc, #324]	; (8003478 <__ieee754_pow+0x3d8>)
 8003332:	f7fc ff6d 	bl	8000210 <__aeabi_dsub>
 8003336:	4622      	mov	r2, r4
 8003338:	4680      	mov	r8, r0
 800333a:	4689      	mov	r9, r1
 800333c:	462b      	mov	r3, r5
 800333e:	4620      	mov	r0, r4
 8003340:	4629      	mov	r1, r5
 8003342:	f7fd f91d 	bl	8000580 <__aeabi_dmul>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4640      	mov	r0, r8
 800334c:	4649      	mov	r1, r9
 800334e:	f7fd f917 	bl	8000580 <__aeabi_dmul>
 8003352:	a341      	add	r3, pc, #260	; (adr r3, 8003458 <__ieee754_pow+0x3b8>)
 8003354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003358:	f7fd f912 	bl	8000580 <__aeabi_dmul>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4650      	mov	r0, sl
 8003362:	4659      	mov	r1, fp
 8003364:	f7fc ff54 	bl	8000210 <__aeabi_dsub>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4680      	mov	r8, r0
 800336e:	4689      	mov	r9, r1
 8003370:	4630      	mov	r0, r6
 8003372:	4639      	mov	r1, r7
 8003374:	f7fc ff4e 	bl	8000214 <__adddf3>
 8003378:	2400      	movs	r4, #0
 800337a:	4632      	mov	r2, r6
 800337c:	463b      	mov	r3, r7
 800337e:	4620      	mov	r0, r4
 8003380:	460d      	mov	r5, r1
 8003382:	f7fc ff45 	bl	8000210 <__aeabi_dsub>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4640      	mov	r0, r8
 800338c:	4649      	mov	r1, r9
 800338e:	f7fc ff3f 	bl	8000210 <__aeabi_dsub>
 8003392:	9b00      	ldr	r3, [sp, #0]
 8003394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003396:	3b01      	subs	r3, #1
 8003398:	4313      	orrs	r3, r2
 800339a:	4682      	mov	sl, r0
 800339c:	468b      	mov	fp, r1
 800339e:	f040 81f1 	bne.w	8003784 <__ieee754_pow+0x6e4>
 80033a2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8003460 <__ieee754_pow+0x3c0>
 80033a6:	eeb0 8a47 	vmov.f32	s16, s14
 80033aa:	eef0 8a67 	vmov.f32	s17, s15
 80033ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80033b2:	2600      	movs	r6, #0
 80033b4:	4632      	mov	r2, r6
 80033b6:	463b      	mov	r3, r7
 80033b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033bc:	f7fc ff28 	bl	8000210 <__aeabi_dsub>
 80033c0:	4622      	mov	r2, r4
 80033c2:	462b      	mov	r3, r5
 80033c4:	f7fd f8dc 	bl	8000580 <__aeabi_dmul>
 80033c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80033cc:	4680      	mov	r8, r0
 80033ce:	4689      	mov	r9, r1
 80033d0:	4650      	mov	r0, sl
 80033d2:	4659      	mov	r1, fp
 80033d4:	f7fd f8d4 	bl	8000580 <__aeabi_dmul>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4640      	mov	r0, r8
 80033de:	4649      	mov	r1, r9
 80033e0:	f7fc ff18 	bl	8000214 <__adddf3>
 80033e4:	4632      	mov	r2, r6
 80033e6:	463b      	mov	r3, r7
 80033e8:	4680      	mov	r8, r0
 80033ea:	4689      	mov	r9, r1
 80033ec:	4620      	mov	r0, r4
 80033ee:	4629      	mov	r1, r5
 80033f0:	f7fd f8c6 	bl	8000580 <__aeabi_dmul>
 80033f4:	460b      	mov	r3, r1
 80033f6:	4604      	mov	r4, r0
 80033f8:	460d      	mov	r5, r1
 80033fa:	4602      	mov	r2, r0
 80033fc:	4649      	mov	r1, r9
 80033fe:	4640      	mov	r0, r8
 8003400:	f7fc ff08 	bl	8000214 <__adddf3>
 8003404:	4b1d      	ldr	r3, [pc, #116]	; (800347c <__ieee754_pow+0x3dc>)
 8003406:	4299      	cmp	r1, r3
 8003408:	ec45 4b19 	vmov	d9, r4, r5
 800340c:	4606      	mov	r6, r0
 800340e:	460f      	mov	r7, r1
 8003410:	468b      	mov	fp, r1
 8003412:	f340 82fe 	ble.w	8003a12 <__ieee754_pow+0x972>
 8003416:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800341a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800341e:	4303      	orrs	r3, r0
 8003420:	f000 81f0 	beq.w	8003804 <__ieee754_pow+0x764>
 8003424:	a310      	add	r3, pc, #64	; (adr r3, 8003468 <__ieee754_pow+0x3c8>)
 8003426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342a:	ec51 0b18 	vmov	r0, r1, d8
 800342e:	f7fd f8a7 	bl	8000580 <__aeabi_dmul>
 8003432:	a30d      	add	r3, pc, #52	; (adr r3, 8003468 <__ieee754_pow+0x3c8>)
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	e6cb      	b.n	80031d2 <__ieee754_pow+0x132>
 800343a:	bf00      	nop
 800343c:	f3af 8000 	nop.w
 8003440:	60000000 	.word	0x60000000
 8003444:	3ff71547 	.word	0x3ff71547
 8003448:	f85ddf44 	.word	0xf85ddf44
 800344c:	3e54ae0b 	.word	0x3e54ae0b
 8003450:	55555555 	.word	0x55555555
 8003454:	3fd55555 	.word	0x3fd55555
 8003458:	652b82fe 	.word	0x652b82fe
 800345c:	3ff71547 	.word	0x3ff71547
 8003460:	00000000 	.word	0x00000000
 8003464:	bff00000 	.word	0xbff00000
 8003468:	8800759c 	.word	0x8800759c
 800346c:	7e37e43c 	.word	0x7e37e43c
 8003470:	3ff00000 	.word	0x3ff00000
 8003474:	3fd00000 	.word	0x3fd00000
 8003478:	3fe00000 	.word	0x3fe00000
 800347c:	408fffff 	.word	0x408fffff
 8003480:	4bd7      	ldr	r3, [pc, #860]	; (80037e0 <__ieee754_pow+0x740>)
 8003482:	ea03 0309 	and.w	r3, r3, r9
 8003486:	2200      	movs	r2, #0
 8003488:	b92b      	cbnz	r3, 8003496 <__ieee754_pow+0x3f6>
 800348a:	4bd6      	ldr	r3, [pc, #856]	; (80037e4 <__ieee754_pow+0x744>)
 800348c:	f7fd f878 	bl	8000580 <__aeabi_dmul>
 8003490:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003494:	460c      	mov	r4, r1
 8003496:	1523      	asrs	r3, r4, #20
 8003498:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800349c:	4413      	add	r3, r2
 800349e:	9309      	str	r3, [sp, #36]	; 0x24
 80034a0:	4bd1      	ldr	r3, [pc, #836]	; (80037e8 <__ieee754_pow+0x748>)
 80034a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80034a6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80034aa:	429c      	cmp	r4, r3
 80034ac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80034b0:	dd08      	ble.n	80034c4 <__ieee754_pow+0x424>
 80034b2:	4bce      	ldr	r3, [pc, #824]	; (80037ec <__ieee754_pow+0x74c>)
 80034b4:	429c      	cmp	r4, r3
 80034b6:	f340 8163 	ble.w	8003780 <__ieee754_pow+0x6e0>
 80034ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034bc:	3301      	adds	r3, #1
 80034be:	9309      	str	r3, [sp, #36]	; 0x24
 80034c0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80034c4:	2400      	movs	r4, #0
 80034c6:	00e3      	lsls	r3, r4, #3
 80034c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80034ca:	4bc9      	ldr	r3, [pc, #804]	; (80037f0 <__ieee754_pow+0x750>)
 80034cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80034d0:	ed93 7b00 	vldr	d7, [r3]
 80034d4:	4629      	mov	r1, r5
 80034d6:	ec53 2b17 	vmov	r2, r3, d7
 80034da:	eeb0 8a47 	vmov.f32	s16, s14
 80034de:	eef0 8a67 	vmov.f32	s17, s15
 80034e2:	4682      	mov	sl, r0
 80034e4:	f7fc fe94 	bl	8000210 <__aeabi_dsub>
 80034e8:	4652      	mov	r2, sl
 80034ea:	4606      	mov	r6, r0
 80034ec:	460f      	mov	r7, r1
 80034ee:	462b      	mov	r3, r5
 80034f0:	ec51 0b18 	vmov	r0, r1, d8
 80034f4:	f7fc fe8e 	bl	8000214 <__adddf3>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	2000      	movs	r0, #0
 80034fe:	49bd      	ldr	r1, [pc, #756]	; (80037f4 <__ieee754_pow+0x754>)
 8003500:	f7fd f968 	bl	80007d4 <__aeabi_ddiv>
 8003504:	ec41 0b19 	vmov	d9, r0, r1
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4630      	mov	r0, r6
 800350e:	4639      	mov	r1, r7
 8003510:	f7fd f836 	bl	8000580 <__aeabi_dmul>
 8003514:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003518:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800351c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003520:	2300      	movs	r3, #0
 8003522:	9304      	str	r3, [sp, #16]
 8003524:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003528:	46ab      	mov	fp, r5
 800352a:	106d      	asrs	r5, r5, #1
 800352c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003530:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003534:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8003538:	2200      	movs	r2, #0
 800353a:	4640      	mov	r0, r8
 800353c:	4649      	mov	r1, r9
 800353e:	4614      	mov	r4, r2
 8003540:	461d      	mov	r5, r3
 8003542:	f7fd f81d 	bl	8000580 <__aeabi_dmul>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4630      	mov	r0, r6
 800354c:	4639      	mov	r1, r7
 800354e:	f7fc fe5f 	bl	8000210 <__aeabi_dsub>
 8003552:	ec53 2b18 	vmov	r2, r3, d8
 8003556:	4606      	mov	r6, r0
 8003558:	460f      	mov	r7, r1
 800355a:	4620      	mov	r0, r4
 800355c:	4629      	mov	r1, r5
 800355e:	f7fc fe57 	bl	8000210 <__aeabi_dsub>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4650      	mov	r0, sl
 8003568:	4659      	mov	r1, fp
 800356a:	f7fc fe51 	bl	8000210 <__aeabi_dsub>
 800356e:	4642      	mov	r2, r8
 8003570:	464b      	mov	r3, r9
 8003572:	f7fd f805 	bl	8000580 <__aeabi_dmul>
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4630      	mov	r0, r6
 800357c:	4639      	mov	r1, r7
 800357e:	f7fc fe47 	bl	8000210 <__aeabi_dsub>
 8003582:	ec53 2b19 	vmov	r2, r3, d9
 8003586:	f7fc fffb 	bl	8000580 <__aeabi_dmul>
 800358a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800358e:	ec41 0b18 	vmov	d8, r0, r1
 8003592:	4610      	mov	r0, r2
 8003594:	4619      	mov	r1, r3
 8003596:	f7fc fff3 	bl	8000580 <__aeabi_dmul>
 800359a:	a37d      	add	r3, pc, #500	; (adr r3, 8003790 <__ieee754_pow+0x6f0>)
 800359c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a0:	4604      	mov	r4, r0
 80035a2:	460d      	mov	r5, r1
 80035a4:	f7fc ffec 	bl	8000580 <__aeabi_dmul>
 80035a8:	a37b      	add	r3, pc, #492	; (adr r3, 8003798 <__ieee754_pow+0x6f8>)
 80035aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ae:	f7fc fe31 	bl	8000214 <__adddf3>
 80035b2:	4622      	mov	r2, r4
 80035b4:	462b      	mov	r3, r5
 80035b6:	f7fc ffe3 	bl	8000580 <__aeabi_dmul>
 80035ba:	a379      	add	r3, pc, #484	; (adr r3, 80037a0 <__ieee754_pow+0x700>)
 80035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c0:	f7fc fe28 	bl	8000214 <__adddf3>
 80035c4:	4622      	mov	r2, r4
 80035c6:	462b      	mov	r3, r5
 80035c8:	f7fc ffda 	bl	8000580 <__aeabi_dmul>
 80035cc:	a376      	add	r3, pc, #472	; (adr r3, 80037a8 <__ieee754_pow+0x708>)
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	f7fc fe1f 	bl	8000214 <__adddf3>
 80035d6:	4622      	mov	r2, r4
 80035d8:	462b      	mov	r3, r5
 80035da:	f7fc ffd1 	bl	8000580 <__aeabi_dmul>
 80035de:	a374      	add	r3, pc, #464	; (adr r3, 80037b0 <__ieee754_pow+0x710>)
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f7fc fe16 	bl	8000214 <__adddf3>
 80035e8:	4622      	mov	r2, r4
 80035ea:	462b      	mov	r3, r5
 80035ec:	f7fc ffc8 	bl	8000580 <__aeabi_dmul>
 80035f0:	a371      	add	r3, pc, #452	; (adr r3, 80037b8 <__ieee754_pow+0x718>)
 80035f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f6:	f7fc fe0d 	bl	8000214 <__adddf3>
 80035fa:	4622      	mov	r2, r4
 80035fc:	4606      	mov	r6, r0
 80035fe:	460f      	mov	r7, r1
 8003600:	462b      	mov	r3, r5
 8003602:	4620      	mov	r0, r4
 8003604:	4629      	mov	r1, r5
 8003606:	f7fc ffbb 	bl	8000580 <__aeabi_dmul>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4630      	mov	r0, r6
 8003610:	4639      	mov	r1, r7
 8003612:	f7fc ffb5 	bl	8000580 <__aeabi_dmul>
 8003616:	4642      	mov	r2, r8
 8003618:	4604      	mov	r4, r0
 800361a:	460d      	mov	r5, r1
 800361c:	464b      	mov	r3, r9
 800361e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003622:	f7fc fdf7 	bl	8000214 <__adddf3>
 8003626:	ec53 2b18 	vmov	r2, r3, d8
 800362a:	f7fc ffa9 	bl	8000580 <__aeabi_dmul>
 800362e:	4622      	mov	r2, r4
 8003630:	462b      	mov	r3, r5
 8003632:	f7fc fdef 	bl	8000214 <__adddf3>
 8003636:	4642      	mov	r2, r8
 8003638:	4682      	mov	sl, r0
 800363a:	468b      	mov	fp, r1
 800363c:	464b      	mov	r3, r9
 800363e:	4640      	mov	r0, r8
 8003640:	4649      	mov	r1, r9
 8003642:	f7fc ff9d 	bl	8000580 <__aeabi_dmul>
 8003646:	4b6c      	ldr	r3, [pc, #432]	; (80037f8 <__ieee754_pow+0x758>)
 8003648:	2200      	movs	r2, #0
 800364a:	4606      	mov	r6, r0
 800364c:	460f      	mov	r7, r1
 800364e:	f7fc fde1 	bl	8000214 <__adddf3>
 8003652:	4652      	mov	r2, sl
 8003654:	465b      	mov	r3, fp
 8003656:	f7fc fddd 	bl	8000214 <__adddf3>
 800365a:	9c04      	ldr	r4, [sp, #16]
 800365c:	460d      	mov	r5, r1
 800365e:	4622      	mov	r2, r4
 8003660:	460b      	mov	r3, r1
 8003662:	4640      	mov	r0, r8
 8003664:	4649      	mov	r1, r9
 8003666:	f7fc ff8b 	bl	8000580 <__aeabi_dmul>
 800366a:	4b63      	ldr	r3, [pc, #396]	; (80037f8 <__ieee754_pow+0x758>)
 800366c:	4680      	mov	r8, r0
 800366e:	4689      	mov	r9, r1
 8003670:	2200      	movs	r2, #0
 8003672:	4620      	mov	r0, r4
 8003674:	4629      	mov	r1, r5
 8003676:	f7fc fdcb 	bl	8000210 <__aeabi_dsub>
 800367a:	4632      	mov	r2, r6
 800367c:	463b      	mov	r3, r7
 800367e:	f7fc fdc7 	bl	8000210 <__aeabi_dsub>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4650      	mov	r0, sl
 8003688:	4659      	mov	r1, fp
 800368a:	f7fc fdc1 	bl	8000210 <__aeabi_dsub>
 800368e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003692:	f7fc ff75 	bl	8000580 <__aeabi_dmul>
 8003696:	4622      	mov	r2, r4
 8003698:	4606      	mov	r6, r0
 800369a:	460f      	mov	r7, r1
 800369c:	462b      	mov	r3, r5
 800369e:	ec51 0b18 	vmov	r0, r1, d8
 80036a2:	f7fc ff6d 	bl	8000580 <__aeabi_dmul>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4630      	mov	r0, r6
 80036ac:	4639      	mov	r1, r7
 80036ae:	f7fc fdb1 	bl	8000214 <__adddf3>
 80036b2:	4606      	mov	r6, r0
 80036b4:	460f      	mov	r7, r1
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4640      	mov	r0, r8
 80036bc:	4649      	mov	r1, r9
 80036be:	f7fc fda9 	bl	8000214 <__adddf3>
 80036c2:	9c04      	ldr	r4, [sp, #16]
 80036c4:	a33e      	add	r3, pc, #248	; (adr r3, 80037c0 <__ieee754_pow+0x720>)
 80036c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ca:	4620      	mov	r0, r4
 80036cc:	460d      	mov	r5, r1
 80036ce:	f7fc ff57 	bl	8000580 <__aeabi_dmul>
 80036d2:	4642      	mov	r2, r8
 80036d4:	ec41 0b18 	vmov	d8, r0, r1
 80036d8:	464b      	mov	r3, r9
 80036da:	4620      	mov	r0, r4
 80036dc:	4629      	mov	r1, r5
 80036de:	f7fc fd97 	bl	8000210 <__aeabi_dsub>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4630      	mov	r0, r6
 80036e8:	4639      	mov	r1, r7
 80036ea:	f7fc fd91 	bl	8000210 <__aeabi_dsub>
 80036ee:	a336      	add	r3, pc, #216	; (adr r3, 80037c8 <__ieee754_pow+0x728>)
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	f7fc ff44 	bl	8000580 <__aeabi_dmul>
 80036f8:	a335      	add	r3, pc, #212	; (adr r3, 80037d0 <__ieee754_pow+0x730>)
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	4606      	mov	r6, r0
 8003700:	460f      	mov	r7, r1
 8003702:	4620      	mov	r0, r4
 8003704:	4629      	mov	r1, r5
 8003706:	f7fc ff3b 	bl	8000580 <__aeabi_dmul>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4630      	mov	r0, r6
 8003710:	4639      	mov	r1, r7
 8003712:	f7fc fd7f 	bl	8000214 <__adddf3>
 8003716:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003718:	4b38      	ldr	r3, [pc, #224]	; (80037fc <__ieee754_pow+0x75c>)
 800371a:	4413      	add	r3, r2
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	f7fc fd78 	bl	8000214 <__adddf3>
 8003724:	4682      	mov	sl, r0
 8003726:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003728:	468b      	mov	fp, r1
 800372a:	f7fc febf 	bl	80004ac <__aeabi_i2d>
 800372e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003730:	4b33      	ldr	r3, [pc, #204]	; (8003800 <__ieee754_pow+0x760>)
 8003732:	4413      	add	r3, r2
 8003734:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003738:	4606      	mov	r6, r0
 800373a:	460f      	mov	r7, r1
 800373c:	4652      	mov	r2, sl
 800373e:	465b      	mov	r3, fp
 8003740:	ec51 0b18 	vmov	r0, r1, d8
 8003744:	f7fc fd66 	bl	8000214 <__adddf3>
 8003748:	4642      	mov	r2, r8
 800374a:	464b      	mov	r3, r9
 800374c:	f7fc fd62 	bl	8000214 <__adddf3>
 8003750:	4632      	mov	r2, r6
 8003752:	463b      	mov	r3, r7
 8003754:	f7fc fd5e 	bl	8000214 <__adddf3>
 8003758:	9c04      	ldr	r4, [sp, #16]
 800375a:	4632      	mov	r2, r6
 800375c:	463b      	mov	r3, r7
 800375e:	4620      	mov	r0, r4
 8003760:	460d      	mov	r5, r1
 8003762:	f7fc fd55 	bl	8000210 <__aeabi_dsub>
 8003766:	4642      	mov	r2, r8
 8003768:	464b      	mov	r3, r9
 800376a:	f7fc fd51 	bl	8000210 <__aeabi_dsub>
 800376e:	ec53 2b18 	vmov	r2, r3, d8
 8003772:	f7fc fd4d 	bl	8000210 <__aeabi_dsub>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4650      	mov	r0, sl
 800377c:	4659      	mov	r1, fp
 800377e:	e606      	b.n	800338e <__ieee754_pow+0x2ee>
 8003780:	2401      	movs	r4, #1
 8003782:	e6a0      	b.n	80034c6 <__ieee754_pow+0x426>
 8003784:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80037d8 <__ieee754_pow+0x738>
 8003788:	e60d      	b.n	80033a6 <__ieee754_pow+0x306>
 800378a:	bf00      	nop
 800378c:	f3af 8000 	nop.w
 8003790:	4a454eef 	.word	0x4a454eef
 8003794:	3fca7e28 	.word	0x3fca7e28
 8003798:	93c9db65 	.word	0x93c9db65
 800379c:	3fcd864a 	.word	0x3fcd864a
 80037a0:	a91d4101 	.word	0xa91d4101
 80037a4:	3fd17460 	.word	0x3fd17460
 80037a8:	518f264d 	.word	0x518f264d
 80037ac:	3fd55555 	.word	0x3fd55555
 80037b0:	db6fabff 	.word	0xdb6fabff
 80037b4:	3fdb6db6 	.word	0x3fdb6db6
 80037b8:	33333303 	.word	0x33333303
 80037bc:	3fe33333 	.word	0x3fe33333
 80037c0:	e0000000 	.word	0xe0000000
 80037c4:	3feec709 	.word	0x3feec709
 80037c8:	dc3a03fd 	.word	0xdc3a03fd
 80037cc:	3feec709 	.word	0x3feec709
 80037d0:	145b01f5 	.word	0x145b01f5
 80037d4:	be3e2fe0 	.word	0xbe3e2fe0
 80037d8:	00000000 	.word	0x00000000
 80037dc:	3ff00000 	.word	0x3ff00000
 80037e0:	7ff00000 	.word	0x7ff00000
 80037e4:	43400000 	.word	0x43400000
 80037e8:	0003988e 	.word	0x0003988e
 80037ec:	000bb679 	.word	0x000bb679
 80037f0:	08003fa8 	.word	0x08003fa8
 80037f4:	3ff00000 	.word	0x3ff00000
 80037f8:	40080000 	.word	0x40080000
 80037fc:	08003fc8 	.word	0x08003fc8
 8003800:	08003fb8 	.word	0x08003fb8
 8003804:	a3b5      	add	r3, pc, #724	; (adr r3, 8003adc <__ieee754_pow+0xa3c>)
 8003806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380a:	4640      	mov	r0, r8
 800380c:	4649      	mov	r1, r9
 800380e:	f7fc fd01 	bl	8000214 <__adddf3>
 8003812:	4622      	mov	r2, r4
 8003814:	ec41 0b1a 	vmov	d10, r0, r1
 8003818:	462b      	mov	r3, r5
 800381a:	4630      	mov	r0, r6
 800381c:	4639      	mov	r1, r7
 800381e:	f7fc fcf7 	bl	8000210 <__aeabi_dsub>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	ec51 0b1a 	vmov	r0, r1, d10
 800382a:	f7fd f939 	bl	8000aa0 <__aeabi_dcmpgt>
 800382e:	2800      	cmp	r0, #0
 8003830:	f47f adf8 	bne.w	8003424 <__ieee754_pow+0x384>
 8003834:	4aa4      	ldr	r2, [pc, #656]	; (8003ac8 <__ieee754_pow+0xa28>)
 8003836:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800383a:	4293      	cmp	r3, r2
 800383c:	f340 810b 	ble.w	8003a56 <__ieee754_pow+0x9b6>
 8003840:	151b      	asrs	r3, r3, #20
 8003842:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003846:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800384a:	fa4a f303 	asr.w	r3, sl, r3
 800384e:	445b      	add	r3, fp
 8003850:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003854:	4e9d      	ldr	r6, [pc, #628]	; (8003acc <__ieee754_pow+0xa2c>)
 8003856:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800385a:	4116      	asrs	r6, r2
 800385c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8003860:	2000      	movs	r0, #0
 8003862:	ea23 0106 	bic.w	r1, r3, r6
 8003866:	f1c2 0214 	rsb	r2, r2, #20
 800386a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800386e:	fa4a fa02 	asr.w	sl, sl, r2
 8003872:	f1bb 0f00 	cmp.w	fp, #0
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4620      	mov	r0, r4
 800387c:	4629      	mov	r1, r5
 800387e:	bfb8      	it	lt
 8003880:	f1ca 0a00 	rsblt	sl, sl, #0
 8003884:	f7fc fcc4 	bl	8000210 <__aeabi_dsub>
 8003888:	ec41 0b19 	vmov	d9, r0, r1
 800388c:	4642      	mov	r2, r8
 800388e:	464b      	mov	r3, r9
 8003890:	ec51 0b19 	vmov	r0, r1, d9
 8003894:	f7fc fcbe 	bl	8000214 <__adddf3>
 8003898:	2400      	movs	r4, #0
 800389a:	a379      	add	r3, pc, #484	; (adr r3, 8003a80 <__ieee754_pow+0x9e0>)
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	4620      	mov	r0, r4
 80038a2:	460d      	mov	r5, r1
 80038a4:	f7fc fe6c 	bl	8000580 <__aeabi_dmul>
 80038a8:	ec53 2b19 	vmov	r2, r3, d9
 80038ac:	4606      	mov	r6, r0
 80038ae:	460f      	mov	r7, r1
 80038b0:	4620      	mov	r0, r4
 80038b2:	4629      	mov	r1, r5
 80038b4:	f7fc fcac 	bl	8000210 <__aeabi_dsub>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4640      	mov	r0, r8
 80038be:	4649      	mov	r1, r9
 80038c0:	f7fc fca6 	bl	8000210 <__aeabi_dsub>
 80038c4:	a370      	add	r3, pc, #448	; (adr r3, 8003a88 <__ieee754_pow+0x9e8>)
 80038c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ca:	f7fc fe59 	bl	8000580 <__aeabi_dmul>
 80038ce:	a370      	add	r3, pc, #448	; (adr r3, 8003a90 <__ieee754_pow+0x9f0>)
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	4680      	mov	r8, r0
 80038d6:	4689      	mov	r9, r1
 80038d8:	4620      	mov	r0, r4
 80038da:	4629      	mov	r1, r5
 80038dc:	f7fc fe50 	bl	8000580 <__aeabi_dmul>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4640      	mov	r0, r8
 80038e6:	4649      	mov	r1, r9
 80038e8:	f7fc fc94 	bl	8000214 <__adddf3>
 80038ec:	4604      	mov	r4, r0
 80038ee:	460d      	mov	r5, r1
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4630      	mov	r0, r6
 80038f6:	4639      	mov	r1, r7
 80038f8:	f7fc fc8c 	bl	8000214 <__adddf3>
 80038fc:	4632      	mov	r2, r6
 80038fe:	463b      	mov	r3, r7
 8003900:	4680      	mov	r8, r0
 8003902:	4689      	mov	r9, r1
 8003904:	f7fc fc84 	bl	8000210 <__aeabi_dsub>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4620      	mov	r0, r4
 800390e:	4629      	mov	r1, r5
 8003910:	f7fc fc7e 	bl	8000210 <__aeabi_dsub>
 8003914:	4642      	mov	r2, r8
 8003916:	4606      	mov	r6, r0
 8003918:	460f      	mov	r7, r1
 800391a:	464b      	mov	r3, r9
 800391c:	4640      	mov	r0, r8
 800391e:	4649      	mov	r1, r9
 8003920:	f7fc fe2e 	bl	8000580 <__aeabi_dmul>
 8003924:	a35c      	add	r3, pc, #368	; (adr r3, 8003a98 <__ieee754_pow+0x9f8>)
 8003926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392a:	4604      	mov	r4, r0
 800392c:	460d      	mov	r5, r1
 800392e:	f7fc fe27 	bl	8000580 <__aeabi_dmul>
 8003932:	a35b      	add	r3, pc, #364	; (adr r3, 8003aa0 <__ieee754_pow+0xa00>)
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	f7fc fc6a 	bl	8000210 <__aeabi_dsub>
 800393c:	4622      	mov	r2, r4
 800393e:	462b      	mov	r3, r5
 8003940:	f7fc fe1e 	bl	8000580 <__aeabi_dmul>
 8003944:	a358      	add	r3, pc, #352	; (adr r3, 8003aa8 <__ieee754_pow+0xa08>)
 8003946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394a:	f7fc fc63 	bl	8000214 <__adddf3>
 800394e:	4622      	mov	r2, r4
 8003950:	462b      	mov	r3, r5
 8003952:	f7fc fe15 	bl	8000580 <__aeabi_dmul>
 8003956:	a356      	add	r3, pc, #344	; (adr r3, 8003ab0 <__ieee754_pow+0xa10>)
 8003958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395c:	f7fc fc58 	bl	8000210 <__aeabi_dsub>
 8003960:	4622      	mov	r2, r4
 8003962:	462b      	mov	r3, r5
 8003964:	f7fc fe0c 	bl	8000580 <__aeabi_dmul>
 8003968:	a353      	add	r3, pc, #332	; (adr r3, 8003ab8 <__ieee754_pow+0xa18>)
 800396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396e:	f7fc fc51 	bl	8000214 <__adddf3>
 8003972:	4622      	mov	r2, r4
 8003974:	462b      	mov	r3, r5
 8003976:	f7fc fe03 	bl	8000580 <__aeabi_dmul>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4640      	mov	r0, r8
 8003980:	4649      	mov	r1, r9
 8003982:	f7fc fc45 	bl	8000210 <__aeabi_dsub>
 8003986:	4604      	mov	r4, r0
 8003988:	460d      	mov	r5, r1
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4640      	mov	r0, r8
 8003990:	4649      	mov	r1, r9
 8003992:	f7fc fdf5 	bl	8000580 <__aeabi_dmul>
 8003996:	2200      	movs	r2, #0
 8003998:	ec41 0b19 	vmov	d9, r0, r1
 800399c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039a0:	4620      	mov	r0, r4
 80039a2:	4629      	mov	r1, r5
 80039a4:	f7fc fc34 	bl	8000210 <__aeabi_dsub>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	ec51 0b19 	vmov	r0, r1, d9
 80039b0:	f7fc ff10 	bl	80007d4 <__aeabi_ddiv>
 80039b4:	4632      	mov	r2, r6
 80039b6:	4604      	mov	r4, r0
 80039b8:	460d      	mov	r5, r1
 80039ba:	463b      	mov	r3, r7
 80039bc:	4640      	mov	r0, r8
 80039be:	4649      	mov	r1, r9
 80039c0:	f7fc fdde 	bl	8000580 <__aeabi_dmul>
 80039c4:	4632      	mov	r2, r6
 80039c6:	463b      	mov	r3, r7
 80039c8:	f7fc fc24 	bl	8000214 <__adddf3>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4620      	mov	r0, r4
 80039d2:	4629      	mov	r1, r5
 80039d4:	f7fc fc1c 	bl	8000210 <__aeabi_dsub>
 80039d8:	4642      	mov	r2, r8
 80039da:	464b      	mov	r3, r9
 80039dc:	f7fc fc18 	bl	8000210 <__aeabi_dsub>
 80039e0:	460b      	mov	r3, r1
 80039e2:	4602      	mov	r2, r0
 80039e4:	493a      	ldr	r1, [pc, #232]	; (8003ad0 <__ieee754_pow+0xa30>)
 80039e6:	2000      	movs	r0, #0
 80039e8:	f7fc fc12 	bl	8000210 <__aeabi_dsub>
 80039ec:	e9cd 0100 	strd	r0, r1, [sp]
 80039f0:	9b01      	ldr	r3, [sp, #4]
 80039f2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80039f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039fa:	da2f      	bge.n	8003a5c <__ieee754_pow+0x9bc>
 80039fc:	4650      	mov	r0, sl
 80039fe:	ed9d 0b00 	vldr	d0, [sp]
 8003a02:	f000 f9cd 	bl	8003da0 <scalbn>
 8003a06:	ec51 0b10 	vmov	r0, r1, d0
 8003a0a:	ec53 2b18 	vmov	r2, r3, d8
 8003a0e:	f7ff bbe0 	b.w	80031d2 <__ieee754_pow+0x132>
 8003a12:	4b30      	ldr	r3, [pc, #192]	; (8003ad4 <__ieee754_pow+0xa34>)
 8003a14:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003a18:	429e      	cmp	r6, r3
 8003a1a:	f77f af0b 	ble.w	8003834 <__ieee754_pow+0x794>
 8003a1e:	4b2e      	ldr	r3, [pc, #184]	; (8003ad8 <__ieee754_pow+0xa38>)
 8003a20:	440b      	add	r3, r1
 8003a22:	4303      	orrs	r3, r0
 8003a24:	d00b      	beq.n	8003a3e <__ieee754_pow+0x99e>
 8003a26:	a326      	add	r3, pc, #152	; (adr r3, 8003ac0 <__ieee754_pow+0xa20>)
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	ec51 0b18 	vmov	r0, r1, d8
 8003a30:	f7fc fda6 	bl	8000580 <__aeabi_dmul>
 8003a34:	a322      	add	r3, pc, #136	; (adr r3, 8003ac0 <__ieee754_pow+0xa20>)
 8003a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3a:	f7ff bbca 	b.w	80031d2 <__ieee754_pow+0x132>
 8003a3e:	4622      	mov	r2, r4
 8003a40:	462b      	mov	r3, r5
 8003a42:	f7fc fbe5 	bl	8000210 <__aeabi_dsub>
 8003a46:	4642      	mov	r2, r8
 8003a48:	464b      	mov	r3, r9
 8003a4a:	f7fd f81f 	bl	8000a8c <__aeabi_dcmpge>
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	f43f aef0 	beq.w	8003834 <__ieee754_pow+0x794>
 8003a54:	e7e7      	b.n	8003a26 <__ieee754_pow+0x986>
 8003a56:	f04f 0a00 	mov.w	sl, #0
 8003a5a:	e717      	b.n	800388c <__ieee754_pow+0x7ec>
 8003a5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a60:	4619      	mov	r1, r3
 8003a62:	e7d2      	b.n	8003a0a <__ieee754_pow+0x96a>
 8003a64:	491a      	ldr	r1, [pc, #104]	; (8003ad0 <__ieee754_pow+0xa30>)
 8003a66:	2000      	movs	r0, #0
 8003a68:	f7ff bb9e 	b.w	80031a8 <__ieee754_pow+0x108>
 8003a6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a70:	f7ff bb9a 	b.w	80031a8 <__ieee754_pow+0x108>
 8003a74:	9000      	str	r0, [sp, #0]
 8003a76:	f7ff bb76 	b.w	8003166 <__ieee754_pow+0xc6>
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	f7ff bb60 	b.w	8003140 <__ieee754_pow+0xa0>
 8003a80:	00000000 	.word	0x00000000
 8003a84:	3fe62e43 	.word	0x3fe62e43
 8003a88:	fefa39ef 	.word	0xfefa39ef
 8003a8c:	3fe62e42 	.word	0x3fe62e42
 8003a90:	0ca86c39 	.word	0x0ca86c39
 8003a94:	be205c61 	.word	0xbe205c61
 8003a98:	72bea4d0 	.word	0x72bea4d0
 8003a9c:	3e663769 	.word	0x3e663769
 8003aa0:	c5d26bf1 	.word	0xc5d26bf1
 8003aa4:	3ebbbd41 	.word	0x3ebbbd41
 8003aa8:	af25de2c 	.word	0xaf25de2c
 8003aac:	3f11566a 	.word	0x3f11566a
 8003ab0:	16bebd93 	.word	0x16bebd93
 8003ab4:	3f66c16c 	.word	0x3f66c16c
 8003ab8:	5555553e 	.word	0x5555553e
 8003abc:	3fc55555 	.word	0x3fc55555
 8003ac0:	c2f8f359 	.word	0xc2f8f359
 8003ac4:	01a56e1f 	.word	0x01a56e1f
 8003ac8:	3fe00000 	.word	0x3fe00000
 8003acc:	000fffff 	.word	0x000fffff
 8003ad0:	3ff00000 	.word	0x3ff00000
 8003ad4:	4090cbff 	.word	0x4090cbff
 8003ad8:	3f6f3400 	.word	0x3f6f3400
 8003adc:	652b82fe 	.word	0x652b82fe
 8003ae0:	3c971547 	.word	0x3c971547

08003ae4 <__ieee754_sqrt>:
 8003ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae8:	ec55 4b10 	vmov	r4, r5, d0
 8003aec:	4e56      	ldr	r6, [pc, #344]	; (8003c48 <__ieee754_sqrt+0x164>)
 8003aee:	43ae      	bics	r6, r5
 8003af0:	ee10 0a10 	vmov	r0, s0
 8003af4:	ee10 3a10 	vmov	r3, s0
 8003af8:	4629      	mov	r1, r5
 8003afa:	462a      	mov	r2, r5
 8003afc:	d110      	bne.n	8003b20 <__ieee754_sqrt+0x3c>
 8003afe:	ee10 2a10 	vmov	r2, s0
 8003b02:	462b      	mov	r3, r5
 8003b04:	f7fc fd3c 	bl	8000580 <__aeabi_dmul>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	4629      	mov	r1, r5
 8003b10:	f7fc fb80 	bl	8000214 <__adddf3>
 8003b14:	4604      	mov	r4, r0
 8003b16:	460d      	mov	r5, r1
 8003b18:	ec45 4b10 	vmov	d0, r4, r5
 8003b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b20:	2d00      	cmp	r5, #0
 8003b22:	dc10      	bgt.n	8003b46 <__ieee754_sqrt+0x62>
 8003b24:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003b28:	4330      	orrs	r0, r6
 8003b2a:	d0f5      	beq.n	8003b18 <__ieee754_sqrt+0x34>
 8003b2c:	b15d      	cbz	r5, 8003b46 <__ieee754_sqrt+0x62>
 8003b2e:	ee10 2a10 	vmov	r2, s0
 8003b32:	462b      	mov	r3, r5
 8003b34:	ee10 0a10 	vmov	r0, s0
 8003b38:	f7fc fb6a 	bl	8000210 <__aeabi_dsub>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	f7fc fe48 	bl	80007d4 <__aeabi_ddiv>
 8003b44:	e7e6      	b.n	8003b14 <__ieee754_sqrt+0x30>
 8003b46:	1509      	asrs	r1, r1, #20
 8003b48:	d076      	beq.n	8003c38 <__ieee754_sqrt+0x154>
 8003b4a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003b4e:	07ce      	lsls	r6, r1, #31
 8003b50:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8003b54:	bf5e      	ittt	pl
 8003b56:	0fda      	lsrpl	r2, r3, #31
 8003b58:	005b      	lslpl	r3, r3, #1
 8003b5a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8003b5e:	0fda      	lsrs	r2, r3, #31
 8003b60:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8003b64:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8003b68:	2000      	movs	r0, #0
 8003b6a:	106d      	asrs	r5, r5, #1
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	f04f 0e16 	mov.w	lr, #22
 8003b72:	4684      	mov	ip, r0
 8003b74:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b78:	eb0c 0401 	add.w	r4, ip, r1
 8003b7c:	4294      	cmp	r4, r2
 8003b7e:	bfde      	ittt	le
 8003b80:	1b12      	suble	r2, r2, r4
 8003b82:	eb04 0c01 	addle.w	ip, r4, r1
 8003b86:	1840      	addle	r0, r0, r1
 8003b88:	0052      	lsls	r2, r2, #1
 8003b8a:	f1be 0e01 	subs.w	lr, lr, #1
 8003b8e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8003b92:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003b96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003b9a:	d1ed      	bne.n	8003b78 <__ieee754_sqrt+0x94>
 8003b9c:	4671      	mov	r1, lr
 8003b9e:	2720      	movs	r7, #32
 8003ba0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003ba4:	4562      	cmp	r2, ip
 8003ba6:	eb04 060e 	add.w	r6, r4, lr
 8003baa:	dc02      	bgt.n	8003bb2 <__ieee754_sqrt+0xce>
 8003bac:	d113      	bne.n	8003bd6 <__ieee754_sqrt+0xf2>
 8003bae:	429e      	cmp	r6, r3
 8003bb0:	d811      	bhi.n	8003bd6 <__ieee754_sqrt+0xf2>
 8003bb2:	2e00      	cmp	r6, #0
 8003bb4:	eb06 0e04 	add.w	lr, r6, r4
 8003bb8:	da43      	bge.n	8003c42 <__ieee754_sqrt+0x15e>
 8003bba:	f1be 0f00 	cmp.w	lr, #0
 8003bbe:	db40      	blt.n	8003c42 <__ieee754_sqrt+0x15e>
 8003bc0:	f10c 0801 	add.w	r8, ip, #1
 8003bc4:	eba2 020c 	sub.w	r2, r2, ip
 8003bc8:	429e      	cmp	r6, r3
 8003bca:	bf88      	it	hi
 8003bcc:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8003bd0:	1b9b      	subs	r3, r3, r6
 8003bd2:	4421      	add	r1, r4
 8003bd4:	46c4      	mov	ip, r8
 8003bd6:	0052      	lsls	r2, r2, #1
 8003bd8:	3f01      	subs	r7, #1
 8003bda:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8003bde:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8003be2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003be6:	d1dd      	bne.n	8003ba4 <__ieee754_sqrt+0xc0>
 8003be8:	4313      	orrs	r3, r2
 8003bea:	d006      	beq.n	8003bfa <__ieee754_sqrt+0x116>
 8003bec:	1c4c      	adds	r4, r1, #1
 8003bee:	bf13      	iteet	ne
 8003bf0:	3101      	addne	r1, #1
 8003bf2:	3001      	addeq	r0, #1
 8003bf4:	4639      	moveq	r1, r7
 8003bf6:	f021 0101 	bicne.w	r1, r1, #1
 8003bfa:	1043      	asrs	r3, r0, #1
 8003bfc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003c00:	0849      	lsrs	r1, r1, #1
 8003c02:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003c06:	07c2      	lsls	r2, r0, #31
 8003c08:	bf48      	it	mi
 8003c0a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8003c0e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8003c12:	460c      	mov	r4, r1
 8003c14:	463d      	mov	r5, r7
 8003c16:	e77f      	b.n	8003b18 <__ieee754_sqrt+0x34>
 8003c18:	0ada      	lsrs	r2, r3, #11
 8003c1a:	3815      	subs	r0, #21
 8003c1c:	055b      	lsls	r3, r3, #21
 8003c1e:	2a00      	cmp	r2, #0
 8003c20:	d0fa      	beq.n	8003c18 <__ieee754_sqrt+0x134>
 8003c22:	02d7      	lsls	r7, r2, #11
 8003c24:	d50a      	bpl.n	8003c3c <__ieee754_sqrt+0x158>
 8003c26:	f1c1 0420 	rsb	r4, r1, #32
 8003c2a:	fa23 f404 	lsr.w	r4, r3, r4
 8003c2e:	1e4d      	subs	r5, r1, #1
 8003c30:	408b      	lsls	r3, r1
 8003c32:	4322      	orrs	r2, r4
 8003c34:	1b41      	subs	r1, r0, r5
 8003c36:	e788      	b.n	8003b4a <__ieee754_sqrt+0x66>
 8003c38:	4608      	mov	r0, r1
 8003c3a:	e7f0      	b.n	8003c1e <__ieee754_sqrt+0x13a>
 8003c3c:	0052      	lsls	r2, r2, #1
 8003c3e:	3101      	adds	r1, #1
 8003c40:	e7ef      	b.n	8003c22 <__ieee754_sqrt+0x13e>
 8003c42:	46e0      	mov	r8, ip
 8003c44:	e7be      	b.n	8003bc4 <__ieee754_sqrt+0xe0>
 8003c46:	bf00      	nop
 8003c48:	7ff00000 	.word	0x7ff00000

08003c4c <fabs>:
 8003c4c:	ec51 0b10 	vmov	r0, r1, d0
 8003c50:	ee10 2a10 	vmov	r2, s0
 8003c54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003c58:	ec43 2b10 	vmov	d0, r2, r3
 8003c5c:	4770      	bx	lr

08003c5e <finite>:
 8003c5e:	b082      	sub	sp, #8
 8003c60:	ed8d 0b00 	vstr	d0, [sp]
 8003c64:	9801      	ldr	r0, [sp, #4]
 8003c66:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8003c6a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003c6e:	0fc0      	lsrs	r0, r0, #31
 8003c70:	b002      	add	sp, #8
 8003c72:	4770      	bx	lr
 8003c74:	0000      	movs	r0, r0
	...

08003c78 <nan>:
 8003c78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8003c80 <nan+0x8>
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	00000000 	.word	0x00000000
 8003c84:	7ff80000 	.word	0x7ff80000

08003c88 <rint>:
 8003c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c8a:	ec51 0b10 	vmov	r0, r1, d0
 8003c8e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003c92:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8003c96:	2e13      	cmp	r6, #19
 8003c98:	ee10 4a10 	vmov	r4, s0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8003ca2:	dc58      	bgt.n	8003d56 <rint+0xce>
 8003ca4:	2e00      	cmp	r6, #0
 8003ca6:	da2b      	bge.n	8003d00 <rint+0x78>
 8003ca8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8003cac:	4302      	orrs	r2, r0
 8003cae:	d023      	beq.n	8003cf8 <rint+0x70>
 8003cb0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8003cb4:	4302      	orrs	r2, r0
 8003cb6:	4254      	negs	r4, r2
 8003cb8:	4314      	orrs	r4, r2
 8003cba:	0c4b      	lsrs	r3, r1, #17
 8003cbc:	0b24      	lsrs	r4, r4, #12
 8003cbe:	045b      	lsls	r3, r3, #17
 8003cc0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8003cc4:	ea44 0103 	orr.w	r1, r4, r3
 8003cc8:	4b32      	ldr	r3, [pc, #200]	; (8003d94 <rint+0x10c>)
 8003cca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003cce:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	4639      	mov	r1, r7
 8003cda:	f7fc fa9b 	bl	8000214 <__adddf3>
 8003cde:	e9cd 0100 	strd	r0, r1, [sp]
 8003ce2:	463b      	mov	r3, r7
 8003ce4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ce8:	4632      	mov	r2, r6
 8003cea:	f7fc fa91 	bl	8000210 <__aeabi_dsub>
 8003cee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003cf2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8003cf6:	4639      	mov	r1, r7
 8003cf8:	ec41 0b10 	vmov	d0, r0, r1
 8003cfc:	b003      	add	sp, #12
 8003cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d00:	4a25      	ldr	r2, [pc, #148]	; (8003d98 <rint+0x110>)
 8003d02:	4132      	asrs	r2, r6
 8003d04:	ea01 0702 	and.w	r7, r1, r2
 8003d08:	4307      	orrs	r7, r0
 8003d0a:	d0f5      	beq.n	8003cf8 <rint+0x70>
 8003d0c:	0851      	lsrs	r1, r2, #1
 8003d0e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8003d12:	4314      	orrs	r4, r2
 8003d14:	d00c      	beq.n	8003d30 <rint+0xa8>
 8003d16:	ea23 0201 	bic.w	r2, r3, r1
 8003d1a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d1e:	2e13      	cmp	r6, #19
 8003d20:	fa43 f606 	asr.w	r6, r3, r6
 8003d24:	bf0c      	ite	eq
 8003d26:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8003d2a:	2400      	movne	r4, #0
 8003d2c:	ea42 0306 	orr.w	r3, r2, r6
 8003d30:	4918      	ldr	r1, [pc, #96]	; (8003d94 <rint+0x10c>)
 8003d32:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8003d36:	4622      	mov	r2, r4
 8003d38:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	4629      	mov	r1, r5
 8003d40:	f7fc fa68 	bl	8000214 <__adddf3>
 8003d44:	e9cd 0100 	strd	r0, r1, [sp]
 8003d48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d4c:	4622      	mov	r2, r4
 8003d4e:	462b      	mov	r3, r5
 8003d50:	f7fc fa5e 	bl	8000210 <__aeabi_dsub>
 8003d54:	e7d0      	b.n	8003cf8 <rint+0x70>
 8003d56:	2e33      	cmp	r6, #51	; 0x33
 8003d58:	dd07      	ble.n	8003d6a <rint+0xe2>
 8003d5a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003d5e:	d1cb      	bne.n	8003cf8 <rint+0x70>
 8003d60:	ee10 2a10 	vmov	r2, s0
 8003d64:	f7fc fa56 	bl	8000214 <__adddf3>
 8003d68:	e7c6      	b.n	8003cf8 <rint+0x70>
 8003d6a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8003d6e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8003d72:	40d6      	lsrs	r6, r2
 8003d74:	4230      	tst	r0, r6
 8003d76:	d0bf      	beq.n	8003cf8 <rint+0x70>
 8003d78:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8003d7c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8003d80:	bf1f      	itttt	ne
 8003d82:	ea24 0101 	bicne.w	r1, r4, r1
 8003d86:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8003d8a:	fa44 f202 	asrne.w	r2, r4, r2
 8003d8e:	ea41 0402 	orrne.w	r4, r1, r2
 8003d92:	e7cd      	b.n	8003d30 <rint+0xa8>
 8003d94:	08003fd8 	.word	0x08003fd8
 8003d98:	000fffff 	.word	0x000fffff
 8003d9c:	00000000 	.word	0x00000000

08003da0 <scalbn>:
 8003da0:	b570      	push	{r4, r5, r6, lr}
 8003da2:	ec55 4b10 	vmov	r4, r5, d0
 8003da6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8003daa:	4606      	mov	r6, r0
 8003dac:	462b      	mov	r3, r5
 8003dae:	b99a      	cbnz	r2, 8003dd8 <scalbn+0x38>
 8003db0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003db4:	4323      	orrs	r3, r4
 8003db6:	d036      	beq.n	8003e26 <scalbn+0x86>
 8003db8:	4b39      	ldr	r3, [pc, #228]	; (8003ea0 <scalbn+0x100>)
 8003dba:	4629      	mov	r1, r5
 8003dbc:	ee10 0a10 	vmov	r0, s0
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f7fc fbdd 	bl	8000580 <__aeabi_dmul>
 8003dc6:	4b37      	ldr	r3, [pc, #220]	; (8003ea4 <scalbn+0x104>)
 8003dc8:	429e      	cmp	r6, r3
 8003dca:	4604      	mov	r4, r0
 8003dcc:	460d      	mov	r5, r1
 8003dce:	da10      	bge.n	8003df2 <scalbn+0x52>
 8003dd0:	a32b      	add	r3, pc, #172	; (adr r3, 8003e80 <scalbn+0xe0>)
 8003dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd6:	e03a      	b.n	8003e4e <scalbn+0xae>
 8003dd8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003ddc:	428a      	cmp	r2, r1
 8003dde:	d10c      	bne.n	8003dfa <scalbn+0x5a>
 8003de0:	ee10 2a10 	vmov	r2, s0
 8003de4:	4620      	mov	r0, r4
 8003de6:	4629      	mov	r1, r5
 8003de8:	f7fc fa14 	bl	8000214 <__adddf3>
 8003dec:	4604      	mov	r4, r0
 8003dee:	460d      	mov	r5, r1
 8003df0:	e019      	b.n	8003e26 <scalbn+0x86>
 8003df2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003df6:	460b      	mov	r3, r1
 8003df8:	3a36      	subs	r2, #54	; 0x36
 8003dfa:	4432      	add	r2, r6
 8003dfc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003e00:	428a      	cmp	r2, r1
 8003e02:	dd08      	ble.n	8003e16 <scalbn+0x76>
 8003e04:	2d00      	cmp	r5, #0
 8003e06:	a120      	add	r1, pc, #128	; (adr r1, 8003e88 <scalbn+0xe8>)
 8003e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e0c:	da1c      	bge.n	8003e48 <scalbn+0xa8>
 8003e0e:	a120      	add	r1, pc, #128	; (adr r1, 8003e90 <scalbn+0xf0>)
 8003e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e14:	e018      	b.n	8003e48 <scalbn+0xa8>
 8003e16:	2a00      	cmp	r2, #0
 8003e18:	dd08      	ble.n	8003e2c <scalbn+0x8c>
 8003e1a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003e1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003e22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003e26:	ec45 4b10 	vmov	d0, r4, r5
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}
 8003e2c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003e30:	da19      	bge.n	8003e66 <scalbn+0xc6>
 8003e32:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003e36:	429e      	cmp	r6, r3
 8003e38:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8003e3c:	dd0a      	ble.n	8003e54 <scalbn+0xb4>
 8003e3e:	a112      	add	r1, pc, #72	; (adr r1, 8003e88 <scalbn+0xe8>)
 8003e40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1e2      	bne.n	8003e0e <scalbn+0x6e>
 8003e48:	a30f      	add	r3, pc, #60	; (adr r3, 8003e88 <scalbn+0xe8>)
 8003e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4e:	f7fc fb97 	bl	8000580 <__aeabi_dmul>
 8003e52:	e7cb      	b.n	8003dec <scalbn+0x4c>
 8003e54:	a10a      	add	r1, pc, #40	; (adr r1, 8003e80 <scalbn+0xe0>)
 8003e56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0b8      	beq.n	8003dd0 <scalbn+0x30>
 8003e5e:	a10e      	add	r1, pc, #56	; (adr r1, 8003e98 <scalbn+0xf8>)
 8003e60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e64:	e7b4      	b.n	8003dd0 <scalbn+0x30>
 8003e66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003e6a:	3236      	adds	r2, #54	; 0x36
 8003e6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003e70:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8003e74:	4620      	mov	r0, r4
 8003e76:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <scalbn+0x108>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	e7e8      	b.n	8003e4e <scalbn+0xae>
 8003e7c:	f3af 8000 	nop.w
 8003e80:	c2f8f359 	.word	0xc2f8f359
 8003e84:	01a56e1f 	.word	0x01a56e1f
 8003e88:	8800759c 	.word	0x8800759c
 8003e8c:	7e37e43c 	.word	0x7e37e43c
 8003e90:	8800759c 	.word	0x8800759c
 8003e94:	fe37e43c 	.word	0xfe37e43c
 8003e98:	c2f8f359 	.word	0xc2f8f359
 8003e9c:	81a56e1f 	.word	0x81a56e1f
 8003ea0:	43500000 	.word	0x43500000
 8003ea4:	ffff3cb0 	.word	0xffff3cb0
 8003ea8:	3c900000 	.word	0x3c900000

08003eac <__errno>:
 8003eac:	4b01      	ldr	r3, [pc, #4]	; (8003eb4 <__errno+0x8>)
 8003eae:	6818      	ldr	r0, [r3, #0]
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000010 	.word	0x20000010

08003eb8 <__libc_init_array>:
 8003eb8:	b570      	push	{r4, r5, r6, lr}
 8003eba:	4d0d      	ldr	r5, [pc, #52]	; (8003ef0 <__libc_init_array+0x38>)
 8003ebc:	4c0d      	ldr	r4, [pc, #52]	; (8003ef4 <__libc_init_array+0x3c>)
 8003ebe:	1b64      	subs	r4, r4, r5
 8003ec0:	10a4      	asrs	r4, r4, #2
 8003ec2:	2600      	movs	r6, #0
 8003ec4:	42a6      	cmp	r6, r4
 8003ec6:	d109      	bne.n	8003edc <__libc_init_array+0x24>
 8003ec8:	4d0b      	ldr	r5, [pc, #44]	; (8003ef8 <__libc_init_array+0x40>)
 8003eca:	4c0c      	ldr	r4, [pc, #48]	; (8003efc <__libc_init_array+0x44>)
 8003ecc:	f000 f820 	bl	8003f10 <_init>
 8003ed0:	1b64      	subs	r4, r4, r5
 8003ed2:	10a4      	asrs	r4, r4, #2
 8003ed4:	2600      	movs	r6, #0
 8003ed6:	42a6      	cmp	r6, r4
 8003ed8:	d105      	bne.n	8003ee6 <__libc_init_array+0x2e>
 8003eda:	bd70      	pop	{r4, r5, r6, pc}
 8003edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee0:	4798      	blx	r3
 8003ee2:	3601      	adds	r6, #1
 8003ee4:	e7ee      	b.n	8003ec4 <__libc_init_array+0xc>
 8003ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eea:	4798      	blx	r3
 8003eec:	3601      	adds	r6, #1
 8003eee:	e7f2      	b.n	8003ed6 <__libc_init_array+0x1e>
 8003ef0:	08003ff0 	.word	0x08003ff0
 8003ef4:	08003ff0 	.word	0x08003ff0
 8003ef8:	08003ff0 	.word	0x08003ff0
 8003efc:	08003ff4 	.word	0x08003ff4

08003f00 <memset>:
 8003f00:	4402      	add	r2, r0
 8003f02:	4603      	mov	r3, r0
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d100      	bne.n	8003f0a <memset+0xa>
 8003f08:	4770      	bx	lr
 8003f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f0e:	e7f9      	b.n	8003f04 <memset+0x4>

08003f10 <_init>:
 8003f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f12:	bf00      	nop
 8003f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f16:	bc08      	pop	{r3}
 8003f18:	469e      	mov	lr, r3
 8003f1a:	4770      	bx	lr

08003f1c <_fini>:
 8003f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1e:	bf00      	nop
 8003f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f22:	bc08      	pop	{r3}
 8003f24:	469e      	mov	lr, r3
 8003f26:	4770      	bx	lr
