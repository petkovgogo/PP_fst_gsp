
DACSine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac4  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08003c90  08003c90  00013c90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e80  08003e80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e80  08003e80  00013e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e88  08003e88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e88  08003e88  00013e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e8c  08003e8c  00013e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08003e9c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08003e9c  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008505  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e5  00000000  00000000  00028541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  00029c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  0002a398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e62  00000000  00000000  0002aa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008683  00000000  00000000  0004b8e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8de5  00000000  00000000  00053f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011cd4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000217c  00000000  00000000  0011cda0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003c74 	.word	0x08003c74

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003c74 	.word	0x08003c74

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b58:	f000 b96e 	b.w	8000e38 <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9d08      	ldr	r5, [sp, #32]
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f040 8083 	bne.w	8000c8a <__udivmoddi4+0x116>
 8000b84:	428a      	cmp	r2, r1
 8000b86:	4617      	mov	r7, r2
 8000b88:	d947      	bls.n	8000c1a <__udivmoddi4+0xa6>
 8000b8a:	fab2 f282 	clz	r2, r2
 8000b8e:	b142      	cbz	r2, 8000ba2 <__udivmoddi4+0x2e>
 8000b90:	f1c2 0020 	rsb	r0, r2, #32
 8000b94:	fa24 f000 	lsr.w	r0, r4, r0
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	4097      	lsls	r7, r2
 8000b9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000ba0:	4094      	lsls	r4, r2
 8000ba2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba6:	0c23      	lsrs	r3, r4, #16
 8000ba8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bac:	fa1f fe87 	uxth.w	lr, r7
 8000bb0:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x60>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bc6:	f080 8119 	bcs.w	8000dfc <__udivmoddi4+0x288>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 8116 	bls.w	8000dfc <__udivmoddi4+0x288>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	443b      	add	r3, r7
 8000bd4:	1a5b      	subs	r3, r3, r1
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bdc:	fb08 3310 	mls	r3, r8, r0, r3
 8000be0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d909      	bls.n	8000c00 <__udivmoddi4+0x8c>
 8000bec:	193c      	adds	r4, r7, r4
 8000bee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bf2:	f080 8105 	bcs.w	8000e00 <__udivmoddi4+0x28c>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	f240 8102 	bls.w	8000e00 <__udivmoddi4+0x28c>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	443c      	add	r4, r7
 8000c00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c04:	eba4 040e 	sub.w	r4, r4, lr
 8000c08:	2600      	movs	r6, #0
 8000c0a:	b11d      	cbz	r5, 8000c14 <__udivmoddi4+0xa0>
 8000c0c:	40d4      	lsrs	r4, r2
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e9c5 4300 	strd	r4, r3, [r5]
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	b902      	cbnz	r2, 8000c1e <__udivmoddi4+0xaa>
 8000c1c:	deff      	udf	#255	; 0xff
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d150      	bne.n	8000cc8 <__udivmoddi4+0x154>
 8000c26:	1bcb      	subs	r3, r1, r7
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f f887 	uxth.w	r8, r7
 8000c30:	2601      	movs	r6, #1
 8000c32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c36:	0c21      	lsrs	r1, r4, #16
 8000c38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c40:	fb08 f30c 	mul.w	r3, r8, ip
 8000c44:	428b      	cmp	r3, r1
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0xe4>
 8000c48:	1879      	adds	r1, r7, r1
 8000c4a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0xe2>
 8000c50:	428b      	cmp	r3, r1
 8000c52:	f200 80e9 	bhi.w	8000e28 <__udivmoddi4+0x2b4>
 8000c56:	4684      	mov	ip, r0
 8000c58:	1ac9      	subs	r1, r1, r3
 8000c5a:	b2a3      	uxth	r3, r4
 8000c5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c68:	fb08 f800 	mul.w	r8, r8, r0
 8000c6c:	45a0      	cmp	r8, r4
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x10c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x10a>
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	f200 80d9 	bhi.w	8000e30 <__udivmoddi4+0x2bc>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	eba4 0408 	sub.w	r4, r4, r8
 8000c84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c88:	e7bf      	b.n	8000c0a <__udivmoddi4+0x96>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d909      	bls.n	8000ca2 <__udivmoddi4+0x12e>
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	f000 80b1 	beq.w	8000df6 <__udivmoddi4+0x282>
 8000c94:	2600      	movs	r6, #0
 8000c96:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	fab3 f683 	clz	r6, r3
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d14a      	bne.n	8000d40 <__udivmoddi4+0x1cc>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0x140>
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	f200 80b8 	bhi.w	8000e24 <__udivmoddi4+0x2b0>
 8000cb4:	1a84      	subs	r4, r0, r2
 8000cb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	468c      	mov	ip, r1
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d0a8      	beq.n	8000c14 <__udivmoddi4+0xa0>
 8000cc2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc6:	e7a5      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f603 	lsr.w	r6, r0, r3
 8000cd0:	4097      	lsls	r7, r2
 8000cd2:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cda:	40d9      	lsrs	r1, r3
 8000cdc:	4330      	orrs	r0, r6
 8000cde:	0c03      	lsrs	r3, r0, #16
 8000ce0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce4:	fa1f f887 	uxth.w	r8, r7
 8000ce8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf0:	fb06 f108 	mul.w	r1, r6, r8
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cfa:	d909      	bls.n	8000d10 <__udivmoddi4+0x19c>
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d02:	f080 808d 	bcs.w	8000e20 <__udivmoddi4+0x2ac>
 8000d06:	4299      	cmp	r1, r3
 8000d08:	f240 808a 	bls.w	8000e20 <__udivmoddi4+0x2ac>
 8000d0c:	3e02      	subs	r6, #2
 8000d0e:	443b      	add	r3, r7
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b281      	uxth	r1, r0
 8000d14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d20:	fb00 f308 	mul.w	r3, r0, r8
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x1c4>
 8000d28:	1879      	adds	r1, r7, r1
 8000d2a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d2e:	d273      	bcs.n	8000e18 <__udivmoddi4+0x2a4>
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d971      	bls.n	8000e18 <__udivmoddi4+0x2a4>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4439      	add	r1, r7
 8000d38:	1acb      	subs	r3, r1, r3
 8000d3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3e:	e778      	b.n	8000c32 <__udivmoddi4+0xbe>
 8000d40:	f1c6 0c20 	rsb	ip, r6, #32
 8000d44:	fa03 f406 	lsl.w	r4, r3, r6
 8000d48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d4c:	431c      	orrs	r4, r3
 8000d4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d52:	fa01 f306 	lsl.w	r3, r1, r6
 8000d56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5e:	431f      	orrs	r7, r3
 8000d60:	0c3b      	lsrs	r3, r7, #16
 8000d62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d66:	fa1f f884 	uxth.w	r8, r4
 8000d6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d72:	fb09 fa08 	mul.w	sl, r9, r8
 8000d76:	458a      	cmp	sl, r1
 8000d78:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x220>
 8000d82:	1861      	adds	r1, r4, r1
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d88:	d248      	bcs.n	8000e1c <__udivmoddi4+0x2a8>
 8000d8a:	458a      	cmp	sl, r1
 8000d8c:	d946      	bls.n	8000e1c <__udivmoddi4+0x2a8>
 8000d8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d92:	4421      	add	r1, r4
 8000d94:	eba1 010a 	sub.w	r1, r1, sl
 8000d98:	b2bf      	uxth	r7, r7
 8000d9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da6:	fb00 f808 	mul.w	r8, r0, r8
 8000daa:	45b8      	cmp	r8, r7
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x24a>
 8000dae:	19e7      	adds	r7, r4, r7
 8000db0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000db4:	d22e      	bcs.n	8000e14 <__udivmoddi4+0x2a0>
 8000db6:	45b8      	cmp	r8, r7
 8000db8:	d92c      	bls.n	8000e14 <__udivmoddi4+0x2a0>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4427      	add	r7, r4
 8000dbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc2:	eba7 0708 	sub.w	r7, r7, r8
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	454f      	cmp	r7, r9
 8000dcc:	46c6      	mov	lr, r8
 8000dce:	4649      	mov	r1, r9
 8000dd0:	d31a      	bcc.n	8000e08 <__udivmoddi4+0x294>
 8000dd2:	d017      	beq.n	8000e04 <__udivmoddi4+0x290>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x27a>
 8000dd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dda:	eb67 0701 	sbc.w	r7, r7, r1
 8000dde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000de2:	40f2      	lsrs	r2, r6
 8000de4:	ea4c 0202 	orr.w	r2, ip, r2
 8000de8:	40f7      	lsrs	r7, r6
 8000dea:	e9c5 2700 	strd	r2, r7, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	462e      	mov	r6, r5
 8000df8:	4628      	mov	r0, r5
 8000dfa:	e70b      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000dfc:	4606      	mov	r6, r0
 8000dfe:	e6e9      	b.n	8000bd4 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fd      	b.n	8000c00 <__udivmoddi4+0x8c>
 8000e04:	4543      	cmp	r3, r8
 8000e06:	d2e5      	bcs.n	8000dd4 <__udivmoddi4+0x260>
 8000e08:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e0c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e10:	3801      	subs	r0, #1
 8000e12:	e7df      	b.n	8000dd4 <__udivmoddi4+0x260>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e7d2      	b.n	8000dbe <__udivmoddi4+0x24a>
 8000e18:	4660      	mov	r0, ip
 8000e1a:	e78d      	b.n	8000d38 <__udivmoddi4+0x1c4>
 8000e1c:	4681      	mov	r9, r0
 8000e1e:	e7b9      	b.n	8000d94 <__udivmoddi4+0x220>
 8000e20:	4666      	mov	r6, ip
 8000e22:	e775      	b.n	8000d10 <__udivmoddi4+0x19c>
 8000e24:	4630      	mov	r0, r6
 8000e26:	e74a      	b.n	8000cbe <__udivmoddi4+0x14a>
 8000e28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e2c:	4439      	add	r1, r7
 8000e2e:	e713      	b.n	8000c58 <__udivmoddi4+0xe4>
 8000e30:	3802      	subs	r0, #2
 8000e32:	443c      	add	r4, r7
 8000e34:	e724      	b.n	8000c80 <__udivmoddi4+0x10c>
 8000e36:	bf00      	nop

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e40:	f000 fb22 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e44:	f000 f814 	bl	8000e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e48:	f000 f8d4 	bl	8000ff4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e4c:	f000 f8a8 	bl	8000fa0 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000e50:	f000 f87c 	bl	8000f4c <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

    DWT_Init();
 8000e54:	f000 f93e 	bl	80010d4 <DWT_Init>
    HAL_DAC_Start (&hdac, DAC_CHANNEL_1);
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4804      	ldr	r0, [pc, #16]	; (8000e6c <main+0x30>)
 8000e5c:	f000 fcb1 	bl	80017c2 <HAL_DAC_Start>
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

        generateSinewave(1650, 10);
 8000e60:	210a      	movs	r1, #10
 8000e62:	f240 6072 	movw	r0, #1650	; 0x672
 8000e66:	f000 f947 	bl	80010f8 <generateSinewave>
 8000e6a:	e7f9      	b.n	8000e60 <main+0x24>
 8000e6c:	20000028 	.word	0x20000028

08000e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b094      	sub	sp, #80	; 0x50
 8000e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	2234      	movs	r2, #52	; 0x34
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f002 fef0 	bl	8003c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <SystemClock_Config+0xd4>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	4a29      	ldr	r2, [pc, #164]	; (8000f44 <SystemClock_Config+0xd4>)
 8000e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea4:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <SystemClock_Config+0xd4>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <SystemClock_Config+0xd8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ebc:	4a22      	ldr	r2, [pc, #136]	; (8000f48 <SystemClock_Config+0xd8>)
 8000ebe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <SystemClock_Config+0xd8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ecc:	603b      	str	r3, [r7, #0]
 8000ece:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed8:	2310      	movs	r3, #16
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000edc:	2302      	movs	r3, #2
 8000ede:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000ee8:	2354      	movs	r3, #84	; 0x54
 8000eea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eec:	2302      	movs	r3, #2
 8000eee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4618      	mov	r0, r3
 8000efe:	f001 f9a1 	bl	8002244 <HAL_RCC_OscConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f08:	f000 f99e 	bl	8001248 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f0c:	230f      	movs	r3, #15
 8000f0e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f10:	2302      	movs	r3, #2
 8000f12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f22:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	2102      	movs	r1, #2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 febe 	bl	8001cac <HAL_RCC_ClockConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f36:	f000 f987 	bl	8001248 <Error_Handler>
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	3750      	adds	r7, #80	; 0x50
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40007000 	.word	0x40007000

08000f4c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f52:	463b      	mov	r3, r7
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_DAC_Init+0x4c>)
 8000f5c:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <MX_DAC_Init+0x50>)
 8000f5e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <MX_DAC_Init+0x4c>)
 8000f62:	f000 fc0c 	bl	800177e <HAL_DAC_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f6c:	f000 f96c 	bl	8001248 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <MX_DAC_Init+0x4c>)
 8000f80:	f000 fc96 	bl	80018b0 <HAL_DAC_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000f8a:	f000 f95d 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000028 	.word	0x20000028
 8000f9c:	40007400 	.word	0x40007400

08000fa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <MX_USART2_UART_Init+0x50>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fd8:	f001 fbd2 	bl	8002780 <HAL_UART_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fe2:	f000 f931 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000003c 	.word	0x2000003c
 8000ff0:	40004400 	.word	0x40004400

08000ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <MX_GPIO_Init+0xd0>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a2c      	ldr	r2, [pc, #176]	; (80010c4 <MX_GPIO_Init+0xd0>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <MX_GPIO_Init+0xd0>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <MX_GPIO_Init+0xd0>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a25      	ldr	r2, [pc, #148]	; (80010c4 <MX_GPIO_Init+0xd0>)
 8001030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <MX_GPIO_Init+0xd0>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <MX_GPIO_Init+0xd0>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a1e      	ldr	r2, [pc, #120]	; (80010c4 <MX_GPIO_Init+0xd0>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MX_GPIO_Init+0xd0>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_GPIO_Init+0xd0>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <MX_GPIO_Init+0xd0>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_GPIO_Init+0xd0>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2120      	movs	r1, #32
 800107e:	4812      	ldr	r0, [pc, #72]	; (80010c8 <MX_GPIO_Init+0xd4>)
 8001080:	f000 fdfa 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001084:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <MX_GPIO_Init+0xd8>)
 800108c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <MX_GPIO_Init+0xdc>)
 800109a:	f000 fc59 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800109e:	2320      	movs	r3, #32
 80010a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_GPIO_Init+0xd4>)
 80010b6:	f000 fc4b 	bl	8001950 <HAL_GPIO_Init>

}
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	; 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020000 	.word	0x40020000
 80010cc:	10210000 	.word	0x10210000
 80010d0:	40020800 	.word	0x40020800

080010d4 <DWT_Init>:

/* USER CODE BEGIN 4 */

void DWT_Init (void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
    // Enable the CYCCNT
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <DWT_Init+0x20>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <DWT_Init+0x20>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6013      	str	r3, [r2, #0]

    DWT->CYCCNT = 0; // reset the counter
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <DWT_Init+0x20>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	605a      	str	r2, [r3, #4]
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e0001000 	.word	0xe0001000

080010f8 <generateSinewave>:

    while ((DWT->CYCCNT - initialTicks) < us);
}

void generateSinewave (int voltage, int frequency)
{
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    voltage -= TOLERANCE;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3b32      	subs	r3, #50	; 0x32
 8001106:	607b      	str	r3, [r7, #4]

    uint32_t amplitude = voltage * VOLTG_DAC_COEF;
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	031b      	lsls	r3, r3, #12
 800110e:	1a9b      	subs	r3, r3, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff f9cb 	bl	80004ac <__aeabi_i2d>
 8001116:	a34a      	add	r3, pc, #296	; (adr r3, 8001240 <generateSinewave+0x148>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff fb5a 	bl	80007d4 <__aeabi_ddiv>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fcec 	bl	8000b04 <__aeabi_d2uiz>
 800112c:	4603      	mov	r3, r0
 800112e:	617b      	str	r3, [r7, #20]
    uint32_t sampleInterval = 1.0 / frequency * pow (10, 3);
 8001130:	6838      	ldr	r0, [r7, #0]
 8001132:	f7ff f9bb 	bl	80004ac <__aeabi_i2d>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	493c      	ldr	r1, [pc, #240]	; (8001230 <generateSinewave+0x138>)
 8001140:	f7ff fb48 	bl	80007d4 <__aeabi_ddiv>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	4b38      	ldr	r3, [pc, #224]	; (8001234 <generateSinewave+0x13c>)
 8001152:	f7ff fa15 	bl	8000580 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff fcd1 	bl	8000b04 <__aeabi_d2uiz>
 8001162:	4603      	mov	r3, r0
 8001164:	613b      	str	r3, [r7, #16]

    double sampleRate = 2 * PI / sampleInterval;
 8001166:	6938      	ldr	r0, [r7, #16]
 8001168:	f7ff f990 	bl	800048c <__aeabi_ui2d>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	a12d      	add	r1, pc, #180	; (adr r1, 8001228 <generateSinewave+0x130>)
 8001172:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001176:	f7ff fb2d 	bl	80007d4 <__aeabi_ddiv>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	e9c7 2302 	strd	r2, r3, [r7, #8]

    for (double i = 0; i < 2 * PI; i += sampleRate)
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800118e:	e039      	b.n	8001204 <generateSinewave+0x10c>
    {
        HAL_DAC_SetValue (&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
                          (sin (i) + 1) * amplitude + TOLERANCE);
 8001190:	ed97 0b06 	vldr	d0, [r7, #24]
 8001194:	f001 fd0c 	bl	8002bb0 <sin>
 8001198:	ec51 0b10 	vmov	r0, r1, d0
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	4b23      	ldr	r3, [pc, #140]	; (8001230 <generateSinewave+0x138>)
 80011a2:	f7ff f837 	bl	8000214 <__adddf3>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4614      	mov	r4, r2
 80011ac:	461d      	mov	r5, r3
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff f96c 	bl	800048c <__aeabi_ui2d>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4620      	mov	r0, r4
 80011ba:	4629      	mov	r1, r5
 80011bc:	f7ff f9e0 	bl	8000580 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <generateSinewave+0x140>)
 80011ce:	f7ff f821 	bl	8000214 <__adddf3>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
        HAL_DAC_SetValue (&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fc93 	bl	8000b04 <__aeabi_d2uiz>
 80011de:	4603      	mov	r3, r0
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	4815      	ldr	r0, [pc, #84]	; (800123c <generateSinewave+0x144>)
 80011e6:	f000 fb3e 	bl	8001866 <HAL_DAC_SetValue>

        HAL_Delay(1);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f000 f9be 	bl	800156c <HAL_Delay>
    for (double i = 0; i < 2 * PI; i += sampleRate)
 80011f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011f8:	f7ff f80c 	bl	8000214 <__adddf3>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001204:	a308      	add	r3, pc, #32	; (adr r3, 8001228 <generateSinewave+0x130>)
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800120e:	f7ff fc29 	bl	8000a64 <__aeabi_dcmplt>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1bb      	bne.n	8001190 <generateSinewave+0x98>
    }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	bdb0      	pop	{r4, r5, r7, pc}
 8001222:	bf00      	nop
 8001224:	f3af 8000 	nop.w
 8001228:	51eb851f 	.word	0x51eb851f
 800122c:	40191eb8 	.word	0x40191eb8
 8001230:	3ff00000 	.word	0x3ff00000
 8001234:	408f4000 	.word	0x408f4000
 8001238:	40490000 	.word	0x40490000
 800123c:	20000028 	.word	0x20000028
 8001240:	00000000 	.word	0x00000000
 8001244:	40a9c800 	.word	0x40a9c800

08001248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
}
 800124e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq ();
    while (1)
 8001250:	e7fe      	b.n	8001250 <Error_Handler+0x8>
	...

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_MspInit+0x4c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <HAL_MspInit+0x4c>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_MspInit+0x4c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <HAL_MspInit+0x4c>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	6413      	str	r3, [r2, #64]	; 0x40
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001292:	2007      	movs	r0, #7
 8001294:	f000 fa40 	bl	8001718 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a17      	ldr	r2, [pc, #92]	; (8001320 <HAL_DAC_MspInit+0x7c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d127      	bne.n	8001316 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <HAL_DAC_MspInit+0x80>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	4a15      	ldr	r2, [pc, #84]	; (8001324 <HAL_DAC_MspInit+0x80>)
 80012d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_DAC_MspInit+0x80>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_DAC_MspInit+0x80>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <HAL_DAC_MspInit+0x80>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_DAC_MspInit+0x80>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012fe:	2310      	movs	r3, #16
 8001300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001302:	2303      	movs	r3, #3
 8001304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <HAL_DAC_MspInit+0x84>)
 8001312:	f000 fb1d 	bl	8001950 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001316:	bf00      	nop
 8001318:	3728      	adds	r7, #40	; 0x28
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40007400 	.word	0x40007400
 8001324:	40023800 	.word	0x40023800
 8001328:	40020000 	.word	0x40020000

0800132c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <HAL_UART_MspInit+0x84>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d12b      	bne.n	80013a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <HAL_UART_MspInit+0x88>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <HAL_UART_MspInit+0x88>)
 8001358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_UART_MspInit+0x88>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_UART_MspInit+0x88>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <HAL_UART_MspInit+0x88>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_UART_MspInit+0x88>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001386:	230c      	movs	r3, #12
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001396:	2307      	movs	r3, #7
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <HAL_UART_MspInit+0x8c>)
 80013a2:	f000 fad5 	bl	8001950 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013a6:	bf00      	nop
 80013a8:	3728      	adds	r7, #40	; 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40004400 	.word	0x40004400
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020000 	.word	0x40020000

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <NMI_Handler+0x4>

080013c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <MemManage_Handler+0x4>

080013ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <BusFault_Handler+0x4>

080013d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <UsageFault_Handler+0x4>

080013da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001408:	f000 f890 	bl	800152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <SystemInit+0x20>)
 8001416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <SystemInit+0x20>)
 800141c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800146c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800143a:	490e      	ldr	r1, [pc, #56]	; (8001474 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800143c:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001450:	4c0b      	ldr	r4, [pc, #44]	; (8001480 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800145e:	f7ff ffd7 	bl	8001410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001462:	f002 fbdb 	bl	8003c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001466:	f7ff fce9 	bl	8000e3c <main>
  bx  lr    
 800146a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800146c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001474:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001478:	08003e90 	.word	0x08003e90
  ldr r2, =_sbss
 800147c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001480:	20000084 	.word	0x20000084

08001484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC_IRQHandler>
	...

08001488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_Init+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <HAL_Init+0x40>)
 8001492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_Init+0x40>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <HAL_Init+0x40>)
 800149e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_Init+0x40>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <HAL_Init+0x40>)
 80014aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f000 f931 	bl	8001718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 f808 	bl	80014cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014bc:	f7ff feca 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023c00 	.word	0x40023c00

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_InitTick+0x54>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_InitTick+0x58>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f93b 	bl	8001766 <HAL_SYSTICK_Config>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00e      	b.n	8001518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d80a      	bhi.n	8001516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001508:	f000 f911 	bl	800172e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800150c:	4a06      	ldr	r2, [pc, #24]	; (8001528 <HAL_InitTick+0x5c>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000000 	.word	0x20000000
 8001524:	20000008 	.word	0x20000008
 8001528:	20000004 	.word	0x20000004

0800152c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_IncTick+0x20>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_IncTick+0x24>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <HAL_IncTick+0x24>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000008 	.word	0x20000008
 8001550:	20000080 	.word	0x20000080

08001554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <HAL_GetTick+0x14>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000080 	.word	0x20000080

0800156c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001574:	f7ff ffee 	bl	8001554 <HAL_GetTick>
 8001578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001584:	d005      	beq.n	8001592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_Delay+0x44>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001592:	bf00      	nop
 8001594:	f7ff ffde 	bl	8001554 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d8f7      	bhi.n	8001594 <HAL_Delay+0x28>
  {
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000008 	.word	0x20000008

080015b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d0:	4013      	ands	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	60d3      	str	r3, [r2, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <__NVIC_GetPriorityGrouping+0x18>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	f003 0307 	and.w	r3, r3, #7
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db0a      	blt.n	8001642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	490c      	ldr	r1, [pc, #48]	; (8001664 <__NVIC_SetPriority+0x4c>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	0112      	lsls	r2, r2, #4
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	440b      	add	r3, r1
 800163c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001640:	e00a      	b.n	8001658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4908      	ldr	r1, [pc, #32]	; (8001668 <__NVIC_SetPriority+0x50>)
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	3b04      	subs	r3, #4
 8001650:	0112      	lsls	r2, r2, #4
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	440b      	add	r3, r1
 8001656:	761a      	strb	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000e100 	.word	0xe000e100
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f1c3 0307 	rsb	r3, r3, #7
 8001686:	2b04      	cmp	r3, #4
 8001688:	bf28      	it	cs
 800168a:	2304      	movcs	r3, #4
 800168c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3304      	adds	r3, #4
 8001692:	2b06      	cmp	r3, #6
 8001694:	d902      	bls.n	800169c <NVIC_EncodePriority+0x30>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3b03      	subs	r3, #3
 800169a:	e000      	b.n	800169e <NVIC_EncodePriority+0x32>
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	401a      	ands	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	43d9      	mvns	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	4313      	orrs	r3, r2
         );
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3724      	adds	r7, #36	; 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
	...

080016d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e4:	d301      	bcc.n	80016ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00f      	b.n	800170a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <SysTick_Config+0x40>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f2:	210f      	movs	r1, #15
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016f8:	f7ff ff8e 	bl	8001618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <SysTick_Config+0x40>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001702:	4b04      	ldr	r3, [pc, #16]	; (8001714 <SysTick_Config+0x40>)
 8001704:	2207      	movs	r2, #7
 8001706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	e000e010 	.word	0xe000e010

08001718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ff47 	bl	80015b4 <__NVIC_SetPriorityGrouping>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172e:	b580      	push	{r7, lr}
 8001730:	b086      	sub	sp, #24
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001740:	f7ff ff5c 	bl	80015fc <__NVIC_GetPriorityGrouping>
 8001744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	6978      	ldr	r0, [r7, #20]
 800174c:	f7ff ff8e 	bl	800166c <NVIC_EncodePriority>
 8001750:	4602      	mov	r2, r0
 8001752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff5d 	bl	8001618 <__NVIC_SetPriority>
}
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ffb0 	bl	80016d4 <SysTick_Config>
 8001774:	4603      	mov	r3, r0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e014      	b.n	80017ba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	791b      	ldrb	r3, [r3, #4]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d105      	bne.n	80017a6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fd7f 	bl	80012a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2202      	movs	r2, #2
 80017aa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	795b      	ldrb	r3, [r3, #5]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_DAC_Start+0x16>
 80017d4:	2302      	movs	r3, #2
 80017d6:	e040      	b.n	800185a <HAL_DAC_Start+0x98>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2202      	movs	r2, #2
 80017e2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6819      	ldr	r1, [r3, #0]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	2201      	movs	r2, #1
 80017f2:	409a      	lsls	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10f      	bne.n	8001822 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800180c:	2b3c      	cmp	r3, #60	; 0x3c
 800180e:	d11d      	bne.n	800184c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0201 	orr.w	r2, r2, #1
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	e014      	b.n	800184c <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	213c      	movs	r1, #60	; 0x3c
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	429a      	cmp	r2, r3
 800183a:	d107      	bne.n	800184c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0202 	orr.w	r2, r2, #2
 800184a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001866:	b480      	push	{r7}
 8001868:	b087      	sub	sp, #28
 800186a:	af00      	add	r7, sp, #0
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
 8001872:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d105      	bne.n	8001890 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	3308      	adds	r3, #8
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e004      	b.n	800189a <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	3314      	adds	r3, #20
 8001898:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	461a      	mov	r2, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	371c      	adds	r7, #28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	795b      	ldrb	r3, [r3, #5]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_DAC_ConfigChannel+0x18>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e03c      	b.n	8001942 <HAL_DAC_ConfigChannel+0x92>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2201      	movs	r2, #1
 80018cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2202      	movs	r2, #2
 80018d2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	4013      	ands	r3, r2
 80018f0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f003 0310 	and.w	r3, r3, #16
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4313      	orrs	r3, r2
 800190e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6819      	ldr	r1, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f003 0310 	and.w	r3, r3, #16
 8001924:	22c0      	movs	r2, #192	; 0xc0
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	400a      	ands	r2, r1
 8001932:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2201      	movs	r2, #1
 8001938:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	371c      	adds	r7, #28
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	e165      	b.n	8001c38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800196c:	2201      	movs	r2, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	429a      	cmp	r2, r3
 8001986:	f040 8154 	bne.w	8001c32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b01      	cmp	r3, #1
 8001994:	d005      	beq.n	80019a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d130      	bne.n	8001a04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	2203      	movs	r2, #3
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d8:	2201      	movs	r2, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 0201 	and.w	r2, r3, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d017      	beq.n	8001a40 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d123      	bne.n	8001a94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	08da      	lsrs	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	220f      	movs	r2, #15
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	08da      	lsrs	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3208      	adds	r2, #8
 8001a8e:	69b9      	ldr	r1, [r7, #24]
 8001a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0203 	and.w	r2, r3, #3
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80ae 	beq.w	8001c32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b5d      	ldr	r3, [pc, #372]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4a5c      	ldr	r2, [pc, #368]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	4b5a      	ldr	r3, [pc, #360]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001af2:	4a58      	ldr	r2, [pc, #352]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	3302      	adds	r3, #2
 8001afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	220f      	movs	r2, #15
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4f      	ldr	r2, [pc, #316]	; (8001c58 <HAL_GPIO_Init+0x308>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d025      	beq.n	8001b6a <HAL_GPIO_Init+0x21a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4e      	ldr	r2, [pc, #312]	; (8001c5c <HAL_GPIO_Init+0x30c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d01f      	beq.n	8001b66 <HAL_GPIO_Init+0x216>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4d      	ldr	r2, [pc, #308]	; (8001c60 <HAL_GPIO_Init+0x310>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d019      	beq.n	8001b62 <HAL_GPIO_Init+0x212>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4c      	ldr	r2, [pc, #304]	; (8001c64 <HAL_GPIO_Init+0x314>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <HAL_GPIO_Init+0x20e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4b      	ldr	r2, [pc, #300]	; (8001c68 <HAL_GPIO_Init+0x318>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00d      	beq.n	8001b5a <HAL_GPIO_Init+0x20a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a4a      	ldr	r2, [pc, #296]	; (8001c6c <HAL_GPIO_Init+0x31c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d007      	beq.n	8001b56 <HAL_GPIO_Init+0x206>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a49      	ldr	r2, [pc, #292]	; (8001c70 <HAL_GPIO_Init+0x320>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d101      	bne.n	8001b52 <HAL_GPIO_Init+0x202>
 8001b4e:	2306      	movs	r3, #6
 8001b50:	e00c      	b.n	8001b6c <HAL_GPIO_Init+0x21c>
 8001b52:	2307      	movs	r3, #7
 8001b54:	e00a      	b.n	8001b6c <HAL_GPIO_Init+0x21c>
 8001b56:	2305      	movs	r3, #5
 8001b58:	e008      	b.n	8001b6c <HAL_GPIO_Init+0x21c>
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	e006      	b.n	8001b6c <HAL_GPIO_Init+0x21c>
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e004      	b.n	8001b6c <HAL_GPIO_Init+0x21c>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e002      	b.n	8001b6c <HAL_GPIO_Init+0x21c>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <HAL_GPIO_Init+0x21c>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	69fa      	ldr	r2, [r7, #28]
 8001b6e:	f002 0203 	and.w	r2, r2, #3
 8001b72:	0092      	lsls	r2, r2, #2
 8001b74:	4093      	lsls	r3, r2
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b7c:	4935      	ldr	r1, [pc, #212]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	3302      	adds	r3, #2
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b8a:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <HAL_GPIO_Init+0x324>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bae:	4a31      	ldr	r2, [pc, #196]	; (8001c74 <HAL_GPIO_Init+0x324>)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bb4:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <HAL_GPIO_Init+0x324>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bd8:	4a26      	ldr	r2, [pc, #152]	; (8001c74 <HAL_GPIO_Init+0x324>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bde:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <HAL_GPIO_Init+0x324>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c02:	4a1c      	ldr	r2, [pc, #112]	; (8001c74 <HAL_GPIO_Init+0x324>)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <HAL_GPIO_Init+0x324>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c2c:	4a11      	ldr	r2, [pc, #68]	; (8001c74 <HAL_GPIO_Init+0x324>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3301      	adds	r3, #1
 8001c36:	61fb      	str	r3, [r7, #28]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	2b0f      	cmp	r3, #15
 8001c3c:	f67f ae96 	bls.w	800196c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	3724      	adds	r7, #36	; 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40013800 	.word	0x40013800
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	40020400 	.word	0x40020400
 8001c60:	40020800 	.word	0x40020800
 8001c64:	40020c00 	.word	0x40020c00
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40021400 	.word	0x40021400
 8001c70:	40021800 	.word	0x40021800
 8001c74:	40013c00 	.word	0x40013c00

08001c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c88:	787b      	ldrb	r3, [r7, #1]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c8e:	887a      	ldrh	r2, [r7, #2]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c94:	e003      	b.n	8001c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c96:	887b      	ldrh	r3, [r7, #2]
 8001c98:	041a      	lsls	r2, r3, #16
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	619a      	str	r2, [r3, #24]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0cc      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b68      	ldr	r3, [pc, #416]	; (8001e64 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d90c      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b65      	ldr	r3, [pc, #404]	; (8001e64 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0b8      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d020      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d00:	4b59      	ldr	r3, [pc, #356]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	4a58      	ldr	r2, [pc, #352]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d18:	4b53      	ldr	r3, [pc, #332]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4a52      	ldr	r2, [pc, #328]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d24:	4b50      	ldr	r3, [pc, #320]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	494d      	ldr	r1, [pc, #308]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d044      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d107      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4a:	4b47      	ldr	r3, [pc, #284]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d119      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e07f      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d003      	beq.n	8001d6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d107      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6a:	4b3f      	ldr	r3, [pc, #252]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e06f      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7a:	4b3b      	ldr	r3, [pc, #236]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e067      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d8a:	4b37      	ldr	r3, [pc, #220]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f023 0203 	bic.w	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4934      	ldr	r1, [pc, #208]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d9c:	f7ff fbda 	bl	8001554 <HAL_GetTick>
 8001da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da4:	f7ff fbd6 	bl	8001554 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e04f      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dba:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 020c 	and.w	r2, r3, #12
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d1eb      	bne.n	8001da4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dcc:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <HAL_RCC_ClockConfig+0x1b8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d20c      	bcs.n	8001df4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de2:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <HAL_RCC_ClockConfig+0x1b8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e032      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4916      	ldr	r1, [pc, #88]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d009      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e1e:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	490e      	ldr	r1, [pc, #56]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e32:	f000 f855 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8001e36:	4602      	mov	r2, r0
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	490a      	ldr	r1, [pc, #40]	; (8001e6c <HAL_RCC_ClockConfig+0x1c0>)
 8001e44:	5ccb      	ldrb	r3, [r1, r3]
 8001e46:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4a:	4a09      	ldr	r2, [pc, #36]	; (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_RCC_ClockConfig+0x1c8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fb3a 	bl	80014cc <HAL_InitTick>

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40023c00 	.word	0x40023c00
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	08003c90 	.word	0x08003c90
 8001e70:	20000000 	.word	0x20000000
 8001e74:	20000004 	.word	0x20000004

08001e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000000 	.word	0x20000000

08001e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e94:	f7ff fff0 	bl	8001e78 <HAL_RCC_GetHCLKFreq>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	0a9b      	lsrs	r3, r3, #10
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	4903      	ldr	r1, [pc, #12]	; (8001eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea6:	5ccb      	ldrb	r3, [r1, r3]
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	08003ca0 	.word	0x08003ca0

08001eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ebc:	f7ff ffdc 	bl	8001e78 <HAL_RCC_GetHCLKFreq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	0b5b      	lsrs	r3, r3, #13
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	4903      	ldr	r1, [pc, #12]	; (8001edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ece:	5ccb      	ldrb	r3, [r1, r3]
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	08003ca0 	.word	0x08003ca0

08001ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ee4:	b088      	sub	sp, #32
 8001ee6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001efc:	4bce      	ldr	r3, [pc, #824]	; (8002238 <HAL_RCC_GetSysClockFreq+0x358>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b0c      	cmp	r3, #12
 8001f06:	f200 818d 	bhi.w	8002224 <HAL_RCC_GetSysClockFreq+0x344>
 8001f0a:	a201      	add	r2, pc, #4	; (adr r2, 8001f10 <HAL_RCC_GetSysClockFreq+0x30>)
 8001f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f10:	08001f45 	.word	0x08001f45
 8001f14:	08002225 	.word	0x08002225
 8001f18:	08002225 	.word	0x08002225
 8001f1c:	08002225 	.word	0x08002225
 8001f20:	08001f4b 	.word	0x08001f4b
 8001f24:	08002225 	.word	0x08002225
 8001f28:	08002225 	.word	0x08002225
 8001f2c:	08002225 	.word	0x08002225
 8001f30:	08001f51 	.word	0x08001f51
 8001f34:	08002225 	.word	0x08002225
 8001f38:	08002225 	.word	0x08002225
 8001f3c:	08002225 	.word	0x08002225
 8001f40:	080020c5 	.word	0x080020c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f44:	4bbd      	ldr	r3, [pc, #756]	; (800223c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f46:	61bb      	str	r3, [r7, #24]
       break;
 8001f48:	e16f      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f4a:	4bbd      	ldr	r3, [pc, #756]	; (8002240 <HAL_RCC_GetSysClockFreq+0x360>)
 8001f4c:	61bb      	str	r3, [r7, #24]
      break;
 8001f4e:	e16c      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f50:	4bb9      	ldr	r3, [pc, #740]	; (8002238 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f58:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f5a:	4bb7      	ldr	r3, [pc, #732]	; (8002238 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d053      	beq.n	800200e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f66:	4bb4      	ldr	r3, [pc, #720]	; (8002238 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	099b      	lsrs	r3, r3, #6
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f76:	f04f 0100 	mov.w	r1, #0
 8001f7a:	ea02 0400 	and.w	r4, r2, r0
 8001f7e:	603c      	str	r4, [r7, #0]
 8001f80:	400b      	ands	r3, r1
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f88:	4620      	mov	r0, r4
 8001f8a:	4629      	mov	r1, r5
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	014b      	lsls	r3, r1, #5
 8001f96:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f9a:	0142      	lsls	r2, r0, #5
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4623      	mov	r3, r4
 8001fa2:	1ac0      	subs	r0, r0, r3
 8001fa4:	462b      	mov	r3, r5
 8001fa6:	eb61 0103 	sbc.w	r1, r1, r3
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	018b      	lsls	r3, r1, #6
 8001fb4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001fb8:	0182      	lsls	r2, r0, #6
 8001fba:	1a12      	subs	r2, r2, r0
 8001fbc:	eb63 0301 	sbc.w	r3, r3, r1
 8001fc0:	f04f 0000 	mov.w	r0, #0
 8001fc4:	f04f 0100 	mov.w	r1, #0
 8001fc8:	00d9      	lsls	r1, r3, #3
 8001fca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fce:	00d0      	lsls	r0, r2, #3
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4621      	mov	r1, r4
 8001fd6:	1852      	adds	r2, r2, r1
 8001fd8:	4629      	mov	r1, r5
 8001fda:	eb43 0101 	adc.w	r1, r3, r1
 8001fde:	460b      	mov	r3, r1
 8001fe0:	f04f 0000 	mov.w	r0, #0
 8001fe4:	f04f 0100 	mov.w	r1, #0
 8001fe8:	0259      	lsls	r1, r3, #9
 8001fea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001fee:	0250      	lsls	r0, r2, #9
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	f7fe fda0 	bl	8000b44 <__aeabi_uldivmod>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4613      	mov	r3, r2
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	e04c      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800200e:	4b8a      	ldr	r3, [pc, #552]	; (8002238 <HAL_RCC_GetSysClockFreq+0x358>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	099b      	lsrs	r3, r3, #6
 8002014:	461a      	mov	r2, r3
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800201e:	f04f 0100 	mov.w	r1, #0
 8002022:	ea02 0a00 	and.w	sl, r2, r0
 8002026:	ea03 0b01 	and.w	fp, r3, r1
 800202a:	4650      	mov	r0, sl
 800202c:	4659      	mov	r1, fp
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	014b      	lsls	r3, r1, #5
 8002038:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800203c:	0142      	lsls	r2, r0, #5
 800203e:	4610      	mov	r0, r2
 8002040:	4619      	mov	r1, r3
 8002042:	ebb0 000a 	subs.w	r0, r0, sl
 8002046:	eb61 010b 	sbc.w	r1, r1, fp
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	018b      	lsls	r3, r1, #6
 8002054:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002058:	0182      	lsls	r2, r0, #6
 800205a:	1a12      	subs	r2, r2, r0
 800205c:	eb63 0301 	sbc.w	r3, r3, r1
 8002060:	f04f 0000 	mov.w	r0, #0
 8002064:	f04f 0100 	mov.w	r1, #0
 8002068:	00d9      	lsls	r1, r3, #3
 800206a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800206e:	00d0      	lsls	r0, r2, #3
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	eb12 020a 	adds.w	r2, r2, sl
 8002078:	eb43 030b 	adc.w	r3, r3, fp
 800207c:	f04f 0000 	mov.w	r0, #0
 8002080:	f04f 0100 	mov.w	r1, #0
 8002084:	0299      	lsls	r1, r3, #10
 8002086:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800208a:	0290      	lsls	r0, r2, #10
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4610      	mov	r0, r2
 8002092:	4619      	mov	r1, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	461a      	mov	r2, r3
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	f7fe fd52 	bl	8000b44 <__aeabi_uldivmod>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4613      	mov	r3, r2
 80020a6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020a8:	4b63      	ldr	r3, [pc, #396]	; (8002238 <HAL_RCC_GetSysClockFreq+0x358>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	0c1b      	lsrs	r3, r3, #16
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	3301      	adds	r3, #1
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80020b8:	69fa      	ldr	r2, [r7, #28]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c0:	61bb      	str	r3, [r7, #24]
      break;
 80020c2:	e0b2      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020c4:	4b5c      	ldr	r3, [pc, #368]	; (8002238 <HAL_RCC_GetSysClockFreq+0x358>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020cc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ce:	4b5a      	ldr	r3, [pc, #360]	; (8002238 <HAL_RCC_GetSysClockFreq+0x358>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d04d      	beq.n	8002176 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020da:	4b57      	ldr	r3, [pc, #348]	; (8002238 <HAL_RCC_GetSysClockFreq+0x358>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	099b      	lsrs	r3, r3, #6
 80020e0:	461a      	mov	r2, r3
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020ea:	f04f 0100 	mov.w	r1, #0
 80020ee:	ea02 0800 	and.w	r8, r2, r0
 80020f2:	ea03 0901 	and.w	r9, r3, r1
 80020f6:	4640      	mov	r0, r8
 80020f8:	4649      	mov	r1, r9
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	014b      	lsls	r3, r1, #5
 8002104:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002108:	0142      	lsls	r2, r0, #5
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	ebb0 0008 	subs.w	r0, r0, r8
 8002112:	eb61 0109 	sbc.w	r1, r1, r9
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	018b      	lsls	r3, r1, #6
 8002120:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002124:	0182      	lsls	r2, r0, #6
 8002126:	1a12      	subs	r2, r2, r0
 8002128:	eb63 0301 	sbc.w	r3, r3, r1
 800212c:	f04f 0000 	mov.w	r0, #0
 8002130:	f04f 0100 	mov.w	r1, #0
 8002134:	00d9      	lsls	r1, r3, #3
 8002136:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800213a:	00d0      	lsls	r0, r2, #3
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	eb12 0208 	adds.w	r2, r2, r8
 8002144:	eb43 0309 	adc.w	r3, r3, r9
 8002148:	f04f 0000 	mov.w	r0, #0
 800214c:	f04f 0100 	mov.w	r1, #0
 8002150:	0259      	lsls	r1, r3, #9
 8002152:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002156:	0250      	lsls	r0, r2, #9
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4610      	mov	r0, r2
 800215e:	4619      	mov	r1, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	461a      	mov	r2, r3
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	f7fe fcec 	bl	8000b44 <__aeabi_uldivmod>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4613      	mov	r3, r2
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	e04a      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002176:	4b30      	ldr	r3, [pc, #192]	; (8002238 <HAL_RCC_GetSysClockFreq+0x358>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	099b      	lsrs	r3, r3, #6
 800217c:	461a      	mov	r2, r3
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002186:	f04f 0100 	mov.w	r1, #0
 800218a:	ea02 0400 	and.w	r4, r2, r0
 800218e:	ea03 0501 	and.w	r5, r3, r1
 8002192:	4620      	mov	r0, r4
 8002194:	4629      	mov	r1, r5
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	014b      	lsls	r3, r1, #5
 80021a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021a4:	0142      	lsls	r2, r0, #5
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	1b00      	subs	r0, r0, r4
 80021ac:	eb61 0105 	sbc.w	r1, r1, r5
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	018b      	lsls	r3, r1, #6
 80021ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021be:	0182      	lsls	r2, r0, #6
 80021c0:	1a12      	subs	r2, r2, r0
 80021c2:	eb63 0301 	sbc.w	r3, r3, r1
 80021c6:	f04f 0000 	mov.w	r0, #0
 80021ca:	f04f 0100 	mov.w	r1, #0
 80021ce:	00d9      	lsls	r1, r3, #3
 80021d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021d4:	00d0      	lsls	r0, r2, #3
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	1912      	adds	r2, r2, r4
 80021dc:	eb45 0303 	adc.w	r3, r5, r3
 80021e0:	f04f 0000 	mov.w	r0, #0
 80021e4:	f04f 0100 	mov.w	r1, #0
 80021e8:	0299      	lsls	r1, r3, #10
 80021ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80021ee:	0290      	lsls	r0, r2, #10
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	461a      	mov	r2, r3
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	f7fe fca0 	bl	8000b44 <__aeabi_uldivmod>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4613      	mov	r3, r2
 800220a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800220c:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_RCC_GetSysClockFreq+0x358>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	0f1b      	lsrs	r3, r3, #28
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002220:	61bb      	str	r3, [r7, #24]
      break;
 8002222:	e002      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002226:	61bb      	str	r3, [r7, #24]
      break;
 8002228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800222a:	69bb      	ldr	r3, [r7, #24]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3720      	adds	r7, #32
 8002230:	46bd      	mov	sp, r7
 8002232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800
 800223c:	00f42400 	.word	0x00f42400
 8002240:	007a1200 	.word	0x007a1200

08002244 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e28d      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 8083 	beq.w	800236a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002264:	4b94      	ldr	r3, [pc, #592]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 030c 	and.w	r3, r3, #12
 800226c:	2b04      	cmp	r3, #4
 800226e:	d019      	beq.n	80022a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002270:	4b91      	ldr	r3, [pc, #580]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002278:	2b08      	cmp	r3, #8
 800227a:	d106      	bne.n	800228a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800227c:	4b8e      	ldr	r3, [pc, #568]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002288:	d00c      	beq.n	80022a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800228a:	4b8b      	ldr	r3, [pc, #556]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002292:	2b0c      	cmp	r3, #12
 8002294:	d112      	bne.n	80022bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002296:	4b88      	ldr	r3, [pc, #544]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022a2:	d10b      	bne.n	80022bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a4:	4b84      	ldr	r3, [pc, #528]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d05b      	beq.n	8002368 <HAL_RCC_OscConfig+0x124>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d157      	bne.n	8002368 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e25a      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c4:	d106      	bne.n	80022d4 <HAL_RCC_OscConfig+0x90>
 80022c6:	4b7c      	ldr	r3, [pc, #496]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a7b      	ldr	r2, [pc, #492]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	e01d      	b.n	8002310 <HAL_RCC_OscConfig+0xcc>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCC_OscConfig+0xb4>
 80022de:	4b76      	ldr	r3, [pc, #472]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a75      	ldr	r2, [pc, #468]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	4b73      	ldr	r3, [pc, #460]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a72      	ldr	r2, [pc, #456]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	e00b      	b.n	8002310 <HAL_RCC_OscConfig+0xcc>
 80022f8:	4b6f      	ldr	r3, [pc, #444]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a6e      	ldr	r2, [pc, #440]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	4b6c      	ldr	r3, [pc, #432]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a6b      	ldr	r2, [pc, #428]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 800230a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800230e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d013      	beq.n	8002340 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7ff f91c 	bl	8001554 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002320:	f7ff f918 	bl	8001554 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b64      	cmp	r3, #100	; 0x64
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e21f      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	4b61      	ldr	r3, [pc, #388]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0xdc>
 800233e:	e014      	b.n	800236a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7ff f908 	bl	8001554 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002348:	f7ff f904 	bl	8001554 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	; 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e20b      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235a:	4b57      	ldr	r3, [pc, #348]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x104>
 8002366:	e000      	b.n	800236a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d06f      	beq.n	8002456 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002376:	4b50      	ldr	r3, [pc, #320]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	2b00      	cmp	r3, #0
 8002380:	d017      	beq.n	80023b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002382:	4b4d      	ldr	r3, [pc, #308]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800238a:	2b08      	cmp	r3, #8
 800238c:	d105      	bne.n	800239a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800238e:	4b4a      	ldr	r3, [pc, #296]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00b      	beq.n	80023b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800239a:	4b47      	ldr	r3, [pc, #284]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023a2:	2b0c      	cmp	r3, #12
 80023a4:	d11c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023a6:	4b44      	ldr	r3, [pc, #272]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d116      	bne.n	80023e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b2:	4b41      	ldr	r3, [pc, #260]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_RCC_OscConfig+0x186>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d001      	beq.n	80023ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e1d3      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ca:	4b3b      	ldr	r3, [pc, #236]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4937      	ldr	r1, [pc, #220]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023de:	e03a      	b.n	8002456 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e8:	4b34      	ldr	r3, [pc, #208]	; (80024bc <HAL_RCC_OscConfig+0x278>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ee:	f7ff f8b1 	bl	8001554 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f6:	f7ff f8ad 	bl	8001554 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e1b4      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002408:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002414:	4b28      	ldr	r3, [pc, #160]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4925      	ldr	r1, [pc, #148]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002424:	4313      	orrs	r3, r2
 8002426:	600b      	str	r3, [r1, #0]
 8002428:	e015      	b.n	8002456 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242a:	4b24      	ldr	r3, [pc, #144]	; (80024bc <HAL_RCC_OscConfig+0x278>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7ff f890 	bl	8001554 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002438:	f7ff f88c 	bl	8001554 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e193      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244a:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d036      	beq.n	80024d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d016      	beq.n	8002498 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <HAL_RCC_OscConfig+0x27c>)
 800246c:	2201      	movs	r2, #1
 800246e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002470:	f7ff f870 	bl	8001554 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002478:	f7ff f86c 	bl	8001554 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e173      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 800248c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x234>
 8002496:	e01b      	b.n	80024d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_RCC_OscConfig+0x27c>)
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7ff f859 	bl	8001554 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a4:	e00e      	b.n	80024c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a6:	f7ff f855 	bl	8001554 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d907      	bls.n	80024c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e15c      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
 80024b8:	40023800 	.word	0x40023800
 80024bc:	42470000 	.word	0x42470000
 80024c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c4:	4b8a      	ldr	r3, [pc, #552]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80024c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1ea      	bne.n	80024a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8097 	beq.w	800260c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024de:	2300      	movs	r3, #0
 80024e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e2:	4b83      	ldr	r3, [pc, #524]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10f      	bne.n	800250e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	4b7f      	ldr	r3, [pc, #508]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a7e      	ldr	r2, [pc, #504]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80024f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
 80024fe:	4b7c      	ldr	r3, [pc, #496]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800250a:	2301      	movs	r3, #1
 800250c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250e:	4b79      	ldr	r3, [pc, #484]	; (80026f4 <HAL_RCC_OscConfig+0x4b0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d118      	bne.n	800254c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800251a:	4b76      	ldr	r3, [pc, #472]	; (80026f4 <HAL_RCC_OscConfig+0x4b0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a75      	ldr	r2, [pc, #468]	; (80026f4 <HAL_RCC_OscConfig+0x4b0>)
 8002520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002526:	f7ff f815 	bl	8001554 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252e:	f7ff f811 	bl	8001554 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e118      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	4b6c      	ldr	r3, [pc, #432]	; (80026f4 <HAL_RCC_OscConfig+0x4b0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x31e>
 8002554:	4b66      	ldr	r3, [pc, #408]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	4a65      	ldr	r2, [pc, #404]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6713      	str	r3, [r2, #112]	; 0x70
 8002560:	e01c      	b.n	800259c <HAL_RCC_OscConfig+0x358>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b05      	cmp	r3, #5
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0x340>
 800256a:	4b61      	ldr	r3, [pc, #388]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	4a60      	ldr	r2, [pc, #384]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	6713      	str	r3, [r2, #112]	; 0x70
 8002576:	4b5e      	ldr	r3, [pc, #376]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	4a5d      	ldr	r2, [pc, #372]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6713      	str	r3, [r2, #112]	; 0x70
 8002582:	e00b      	b.n	800259c <HAL_RCC_OscConfig+0x358>
 8002584:	4b5a      	ldr	r3, [pc, #360]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	4a59      	ldr	r2, [pc, #356]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	6713      	str	r3, [r2, #112]	; 0x70
 8002590:	4b57      	ldr	r3, [pc, #348]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002594:	4a56      	ldr	r2, [pc, #344]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002596:	f023 0304 	bic.w	r3, r3, #4
 800259a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d015      	beq.n	80025d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a4:	f7fe ffd6 	bl	8001554 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ac:	f7fe ffd2 	bl	8001554 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e0d7      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c2:	4b4b      	ldr	r3, [pc, #300]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0ee      	beq.n	80025ac <HAL_RCC_OscConfig+0x368>
 80025ce:	e014      	b.n	80025fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d0:	f7fe ffc0 	bl	8001554 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d8:	f7fe ffbc 	bl	8001554 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e0c1      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ee:	4b40      	ldr	r3, [pc, #256]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1ee      	bne.n	80025d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d105      	bne.n	800260c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002600:	4b3b      	ldr	r3, [pc, #236]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	4a3a      	ldr	r2, [pc, #232]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800260a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80ad 	beq.w	8002770 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002616:	4b36      	ldr	r3, [pc, #216]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b08      	cmp	r3, #8
 8002620:	d060      	beq.n	80026e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d145      	bne.n	80026b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262a:	4b33      	ldr	r3, [pc, #204]	; (80026f8 <HAL_RCC_OscConfig+0x4b4>)
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7fe ff90 	bl	8001554 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002638:	f7fe ff8c 	bl	8001554 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e093      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264a:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69da      	ldr	r2, [r3, #28]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	019b      	lsls	r3, r3, #6
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	085b      	lsrs	r3, r3, #1
 800266e:	3b01      	subs	r3, #1
 8002670:	041b      	lsls	r3, r3, #16
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	061b      	lsls	r3, r3, #24
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	071b      	lsls	r3, r3, #28
 8002682:	491b      	ldr	r1, [pc, #108]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_RCC_OscConfig+0x4b4>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268e:	f7fe ff61 	bl	8001554 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002696:	f7fe ff5d 	bl	8001554 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e064      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x452>
 80026b4:	e05c      	b.n	8002770 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <HAL_RCC_OscConfig+0x4b4>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe ff4a 	bl	8001554 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c4:	f7fe ff46 	bl	8001554 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e04d      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x480>
 80026e2:	e045      	b.n	8002770 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d107      	bne.n	80026fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e040      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40007000 	.word	0x40007000
 80026f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026fc:	4b1f      	ldr	r3, [pc, #124]	; (800277c <HAL_RCC_OscConfig+0x538>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d030      	beq.n	800276c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002714:	429a      	cmp	r2, r3
 8002716:	d129      	bne.n	800276c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d122      	bne.n	800276c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800272c:	4013      	ands	r3, r2
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002732:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002734:	4293      	cmp	r3, r2
 8002736:	d119      	bne.n	800276c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	085b      	lsrs	r3, r3, #1
 8002744:	3b01      	subs	r3, #1
 8002746:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002748:	429a      	cmp	r2, r3
 800274a:	d10f      	bne.n	800276c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002758:	429a      	cmp	r2, r3
 800275a:	d107      	bne.n	800276c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800

08002780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e03f      	b.n	8002812 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d106      	bne.n	80027ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe fdc0 	bl	800132c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2224      	movs	r2, #36	; 0x24
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f829 	bl	800281c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800281c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002820:	b09f      	sub	sp, #124	; 0x7c
 8002822:	af00      	add	r7, sp, #0
 8002824:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002832:	68d9      	ldr	r1, [r3, #12]
 8002834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	ea40 0301 	orr.w	r3, r0, r1
 800283c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800283e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	431a      	orrs	r2, r3
 8002848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	431a      	orrs	r2, r3
 800284e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	4313      	orrs	r3, r2
 8002854:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002860:	f021 010c 	bic.w	r1, r1, #12
 8002864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800286a:	430b      	orrs	r3, r1
 800286c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800286e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800287a:	6999      	ldr	r1, [r3, #24]
 800287c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	ea40 0301 	orr.w	r3, r0, r1
 8002884:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	4bc5      	ldr	r3, [pc, #788]	; (8002ba0 <UART_SetConfig+0x384>)
 800288c:	429a      	cmp	r2, r3
 800288e:	d004      	beq.n	800289a <UART_SetConfig+0x7e>
 8002890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4bc3      	ldr	r3, [pc, #780]	; (8002ba4 <UART_SetConfig+0x388>)
 8002896:	429a      	cmp	r2, r3
 8002898:	d103      	bne.n	80028a2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800289a:	f7ff fb0d 	bl	8001eb8 <HAL_RCC_GetPCLK2Freq>
 800289e:	6778      	str	r0, [r7, #116]	; 0x74
 80028a0:	e002      	b.n	80028a8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028a2:	f7ff faf5 	bl	8001e90 <HAL_RCC_GetPCLK1Freq>
 80028a6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b0:	f040 80b6 	bne.w	8002a20 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028b6:	461c      	mov	r4, r3
 80028b8:	f04f 0500 	mov.w	r5, #0
 80028bc:	4622      	mov	r2, r4
 80028be:	462b      	mov	r3, r5
 80028c0:	1891      	adds	r1, r2, r2
 80028c2:	6439      	str	r1, [r7, #64]	; 0x40
 80028c4:	415b      	adcs	r3, r3
 80028c6:	647b      	str	r3, [r7, #68]	; 0x44
 80028c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028cc:	1912      	adds	r2, r2, r4
 80028ce:	eb45 0303 	adc.w	r3, r5, r3
 80028d2:	f04f 0000 	mov.w	r0, #0
 80028d6:	f04f 0100 	mov.w	r1, #0
 80028da:	00d9      	lsls	r1, r3, #3
 80028dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028e0:	00d0      	lsls	r0, r2, #3
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	1911      	adds	r1, r2, r4
 80028e8:	6639      	str	r1, [r7, #96]	; 0x60
 80028ea:	416b      	adcs	r3, r5
 80028ec:	667b      	str	r3, [r7, #100]	; 0x64
 80028ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	461a      	mov	r2, r3
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	1891      	adds	r1, r2, r2
 80028fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80028fc:	415b      	adcs	r3, r3
 80028fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002900:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002904:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002908:	f7fe f91c 	bl	8000b44 <__aeabi_uldivmod>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4ba5      	ldr	r3, [pc, #660]	; (8002ba8 <UART_SetConfig+0x38c>)
 8002912:	fba3 2302 	umull	r2, r3, r3, r2
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	011e      	lsls	r6, r3, #4
 800291a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800291c:	461c      	mov	r4, r3
 800291e:	f04f 0500 	mov.w	r5, #0
 8002922:	4622      	mov	r2, r4
 8002924:	462b      	mov	r3, r5
 8002926:	1891      	adds	r1, r2, r2
 8002928:	6339      	str	r1, [r7, #48]	; 0x30
 800292a:	415b      	adcs	r3, r3
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
 800292e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002932:	1912      	adds	r2, r2, r4
 8002934:	eb45 0303 	adc.w	r3, r5, r3
 8002938:	f04f 0000 	mov.w	r0, #0
 800293c:	f04f 0100 	mov.w	r1, #0
 8002940:	00d9      	lsls	r1, r3, #3
 8002942:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002946:	00d0      	lsls	r0, r2, #3
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	1911      	adds	r1, r2, r4
 800294e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002950:	416b      	adcs	r3, r5
 8002952:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	461a      	mov	r2, r3
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	1891      	adds	r1, r2, r2
 8002960:	62b9      	str	r1, [r7, #40]	; 0x28
 8002962:	415b      	adcs	r3, r3
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800296a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800296e:	f7fe f8e9 	bl	8000b44 <__aeabi_uldivmod>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4b8c      	ldr	r3, [pc, #560]	; (8002ba8 <UART_SetConfig+0x38c>)
 8002978:	fba3 1302 	umull	r1, r3, r3, r2
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	2164      	movs	r1, #100	; 0x64
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	3332      	adds	r3, #50	; 0x32
 800298a:	4a87      	ldr	r2, [pc, #540]	; (8002ba8 <UART_SetConfig+0x38c>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	095b      	lsrs	r3, r3, #5
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002998:	441e      	add	r6, r3
 800299a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800299c:	4618      	mov	r0, r3
 800299e:	f04f 0100 	mov.w	r1, #0
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	1894      	adds	r4, r2, r2
 80029a8:	623c      	str	r4, [r7, #32]
 80029aa:	415b      	adcs	r3, r3
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
 80029ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029b2:	1812      	adds	r2, r2, r0
 80029b4:	eb41 0303 	adc.w	r3, r1, r3
 80029b8:	f04f 0400 	mov.w	r4, #0
 80029bc:	f04f 0500 	mov.w	r5, #0
 80029c0:	00dd      	lsls	r5, r3, #3
 80029c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029c6:	00d4      	lsls	r4, r2, #3
 80029c8:	4622      	mov	r2, r4
 80029ca:	462b      	mov	r3, r5
 80029cc:	1814      	adds	r4, r2, r0
 80029ce:	653c      	str	r4, [r7, #80]	; 0x50
 80029d0:	414b      	adcs	r3, r1
 80029d2:	657b      	str	r3, [r7, #84]	; 0x54
 80029d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	461a      	mov	r2, r3
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	1891      	adds	r1, r2, r2
 80029e0:	61b9      	str	r1, [r7, #24]
 80029e2:	415b      	adcs	r3, r3
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80029ee:	f7fe f8a9 	bl	8000b44 <__aeabi_uldivmod>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4b6c      	ldr	r3, [pc, #432]	; (8002ba8 <UART_SetConfig+0x38c>)
 80029f8:	fba3 1302 	umull	r1, r3, r3, r2
 80029fc:	095b      	lsrs	r3, r3, #5
 80029fe:	2164      	movs	r1, #100	; 0x64
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	3332      	adds	r3, #50	; 0x32
 8002a0a:	4a67      	ldr	r2, [pc, #412]	; (8002ba8 <UART_SetConfig+0x38c>)
 8002a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a10:	095b      	lsrs	r3, r3, #5
 8002a12:	f003 0207 	and.w	r2, r3, #7
 8002a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4432      	add	r2, r6
 8002a1c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a1e:	e0b9      	b.n	8002b94 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a22:	461c      	mov	r4, r3
 8002a24:	f04f 0500 	mov.w	r5, #0
 8002a28:	4622      	mov	r2, r4
 8002a2a:	462b      	mov	r3, r5
 8002a2c:	1891      	adds	r1, r2, r2
 8002a2e:	6139      	str	r1, [r7, #16]
 8002a30:	415b      	adcs	r3, r3
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a38:	1912      	adds	r2, r2, r4
 8002a3a:	eb45 0303 	adc.w	r3, r5, r3
 8002a3e:	f04f 0000 	mov.w	r0, #0
 8002a42:	f04f 0100 	mov.w	r1, #0
 8002a46:	00d9      	lsls	r1, r3, #3
 8002a48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a4c:	00d0      	lsls	r0, r2, #3
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	eb12 0804 	adds.w	r8, r2, r4
 8002a56:	eb43 0905 	adc.w	r9, r3, r5
 8002a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f04f 0100 	mov.w	r1, #0
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	008b      	lsls	r3, r1, #2
 8002a6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a72:	0082      	lsls	r2, r0, #2
 8002a74:	4640      	mov	r0, r8
 8002a76:	4649      	mov	r1, r9
 8002a78:	f7fe f864 	bl	8000b44 <__aeabi_uldivmod>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4b49      	ldr	r3, [pc, #292]	; (8002ba8 <UART_SetConfig+0x38c>)
 8002a82:	fba3 2302 	umull	r2, r3, r3, r2
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	011e      	lsls	r6, r3, #4
 8002a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f04f 0100 	mov.w	r1, #0
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	1894      	adds	r4, r2, r2
 8002a98:	60bc      	str	r4, [r7, #8]
 8002a9a:	415b      	adcs	r3, r3
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aa2:	1812      	adds	r2, r2, r0
 8002aa4:	eb41 0303 	adc.w	r3, r1, r3
 8002aa8:	f04f 0400 	mov.w	r4, #0
 8002aac:	f04f 0500 	mov.w	r5, #0
 8002ab0:	00dd      	lsls	r5, r3, #3
 8002ab2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ab6:	00d4      	lsls	r4, r2, #3
 8002ab8:	4622      	mov	r2, r4
 8002aba:	462b      	mov	r3, r5
 8002abc:	1814      	adds	r4, r2, r0
 8002abe:	64bc      	str	r4, [r7, #72]	; 0x48
 8002ac0:	414b      	adcs	r3, r1
 8002ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f04f 0100 	mov.w	r1, #0
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	008b      	lsls	r3, r1, #2
 8002ad8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002adc:	0082      	lsls	r2, r0, #2
 8002ade:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002ae2:	f7fe f82f 	bl	8000b44 <__aeabi_uldivmod>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4b2f      	ldr	r3, [pc, #188]	; (8002ba8 <UART_SetConfig+0x38c>)
 8002aec:	fba3 1302 	umull	r1, r3, r3, r2
 8002af0:	095b      	lsrs	r3, r3, #5
 8002af2:	2164      	movs	r1, #100	; 0x64
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	3332      	adds	r3, #50	; 0x32
 8002afe:	4a2a      	ldr	r2, [pc, #168]	; (8002ba8 <UART_SetConfig+0x38c>)
 8002b00:	fba2 2303 	umull	r2, r3, r2, r3
 8002b04:	095b      	lsrs	r3, r3, #5
 8002b06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b0a:	441e      	add	r6, r3
 8002b0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f04f 0100 	mov.w	r1, #0
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	1894      	adds	r4, r2, r2
 8002b1a:	603c      	str	r4, [r7, #0]
 8002b1c:	415b      	adcs	r3, r3
 8002b1e:	607b      	str	r3, [r7, #4]
 8002b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b24:	1812      	adds	r2, r2, r0
 8002b26:	eb41 0303 	adc.w	r3, r1, r3
 8002b2a:	f04f 0400 	mov.w	r4, #0
 8002b2e:	f04f 0500 	mov.w	r5, #0
 8002b32:	00dd      	lsls	r5, r3, #3
 8002b34:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b38:	00d4      	lsls	r4, r2, #3
 8002b3a:	4622      	mov	r2, r4
 8002b3c:	462b      	mov	r3, r5
 8002b3e:	eb12 0a00 	adds.w	sl, r2, r0
 8002b42:	eb43 0b01 	adc.w	fp, r3, r1
 8002b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f04f 0100 	mov.w	r1, #0
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	008b      	lsls	r3, r1, #2
 8002b5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b5e:	0082      	lsls	r2, r0, #2
 8002b60:	4650      	mov	r0, sl
 8002b62:	4659      	mov	r1, fp
 8002b64:	f7fd ffee 	bl	8000b44 <__aeabi_uldivmod>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <UART_SetConfig+0x38c>)
 8002b6e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	2164      	movs	r1, #100	; 0x64
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	3332      	adds	r3, #50	; 0x32
 8002b80:	4a09      	ldr	r2, [pc, #36]	; (8002ba8 <UART_SetConfig+0x38c>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	f003 020f 	and.w	r2, r3, #15
 8002b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4432      	add	r2, r6
 8002b92:	609a      	str	r2, [r3, #8]
}
 8002b94:	bf00      	nop
 8002b96:	377c      	adds	r7, #124	; 0x7c
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40011000 	.word	0x40011000
 8002ba4:	40011400 	.word	0x40011400
 8002ba8:	51eb851f 	.word	0x51eb851f
 8002bac:	00000000 	.word	0x00000000

08002bb0 <sin>:
 8002bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002bb2:	ec53 2b10 	vmov	r2, r3, d0
 8002bb6:	4826      	ldr	r0, [pc, #152]	; (8002c50 <sin+0xa0>)
 8002bb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002bbc:	4281      	cmp	r1, r0
 8002bbe:	dc07      	bgt.n	8002bd0 <sin+0x20>
 8002bc0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8002c48 <sin+0x98>
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f000 fe5b 	bl	8003880 <__kernel_sin>
 8002bca:	ec51 0b10 	vmov	r0, r1, d0
 8002bce:	e007      	b.n	8002be0 <sin+0x30>
 8002bd0:	4820      	ldr	r0, [pc, #128]	; (8002c54 <sin+0xa4>)
 8002bd2:	4281      	cmp	r1, r0
 8002bd4:	dd09      	ble.n	8002bea <sin+0x3a>
 8002bd6:	ee10 0a10 	vmov	r0, s0
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f7fd fb18 	bl	8000210 <__aeabi_dsub>
 8002be0:	ec41 0b10 	vmov	d0, r0, r1
 8002be4:	b005      	add	sp, #20
 8002be6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bea:	4668      	mov	r0, sp
 8002bec:	f000 f834 	bl	8002c58 <__ieee754_rem_pio2>
 8002bf0:	f000 0003 	and.w	r0, r0, #3
 8002bf4:	2801      	cmp	r0, #1
 8002bf6:	d008      	beq.n	8002c0a <sin+0x5a>
 8002bf8:	2802      	cmp	r0, #2
 8002bfa:	d00d      	beq.n	8002c18 <sin+0x68>
 8002bfc:	b9d0      	cbnz	r0, 8002c34 <sin+0x84>
 8002bfe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002c02:	ed9d 0b00 	vldr	d0, [sp]
 8002c06:	2001      	movs	r0, #1
 8002c08:	e7dd      	b.n	8002bc6 <sin+0x16>
 8002c0a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002c0e:	ed9d 0b00 	vldr	d0, [sp]
 8002c12:	f000 fa2d 	bl	8003070 <__kernel_cos>
 8002c16:	e7d8      	b.n	8002bca <sin+0x1a>
 8002c18:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002c1c:	ed9d 0b00 	vldr	d0, [sp]
 8002c20:	2001      	movs	r0, #1
 8002c22:	f000 fe2d 	bl	8003880 <__kernel_sin>
 8002c26:	ec53 2b10 	vmov	r2, r3, d0
 8002c2a:	ee10 0a10 	vmov	r0, s0
 8002c2e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002c32:	e7d5      	b.n	8002be0 <sin+0x30>
 8002c34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002c38:	ed9d 0b00 	vldr	d0, [sp]
 8002c3c:	f000 fa18 	bl	8003070 <__kernel_cos>
 8002c40:	e7f1      	b.n	8002c26 <sin+0x76>
 8002c42:	bf00      	nop
 8002c44:	f3af 8000 	nop.w
	...
 8002c50:	3fe921fb 	.word	0x3fe921fb
 8002c54:	7fefffff 	.word	0x7fefffff

08002c58 <__ieee754_rem_pio2>:
 8002c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c5c:	ed2d 8b02 	vpush	{d8}
 8002c60:	ec55 4b10 	vmov	r4, r5, d0
 8002c64:	4bca      	ldr	r3, [pc, #808]	; (8002f90 <__ieee754_rem_pio2+0x338>)
 8002c66:	b08b      	sub	sp, #44	; 0x2c
 8002c68:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8002c6c:	4598      	cmp	r8, r3
 8002c6e:	4682      	mov	sl, r0
 8002c70:	9502      	str	r5, [sp, #8]
 8002c72:	dc08      	bgt.n	8002c86 <__ieee754_rem_pio2+0x2e>
 8002c74:	2200      	movs	r2, #0
 8002c76:	2300      	movs	r3, #0
 8002c78:	ed80 0b00 	vstr	d0, [r0]
 8002c7c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8002c80:	f04f 0b00 	mov.w	fp, #0
 8002c84:	e028      	b.n	8002cd8 <__ieee754_rem_pio2+0x80>
 8002c86:	4bc3      	ldr	r3, [pc, #780]	; (8002f94 <__ieee754_rem_pio2+0x33c>)
 8002c88:	4598      	cmp	r8, r3
 8002c8a:	dc78      	bgt.n	8002d7e <__ieee754_rem_pio2+0x126>
 8002c8c:	9b02      	ldr	r3, [sp, #8]
 8002c8e:	4ec2      	ldr	r6, [pc, #776]	; (8002f98 <__ieee754_rem_pio2+0x340>)
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	ee10 0a10 	vmov	r0, s0
 8002c96:	a3b0      	add	r3, pc, #704	; (adr r3, 8002f58 <__ieee754_rem_pio2+0x300>)
 8002c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	dd39      	ble.n	8002d14 <__ieee754_rem_pio2+0xbc>
 8002ca0:	f7fd fab6 	bl	8000210 <__aeabi_dsub>
 8002ca4:	45b0      	cmp	r8, r6
 8002ca6:	4604      	mov	r4, r0
 8002ca8:	460d      	mov	r5, r1
 8002caa:	d01b      	beq.n	8002ce4 <__ieee754_rem_pio2+0x8c>
 8002cac:	a3ac      	add	r3, pc, #688	; (adr r3, 8002f60 <__ieee754_rem_pio2+0x308>)
 8002cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb2:	f7fd faad 	bl	8000210 <__aeabi_dsub>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	e9ca 2300 	strd	r2, r3, [sl]
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	f7fd faa5 	bl	8000210 <__aeabi_dsub>
 8002cc6:	a3a6      	add	r3, pc, #664	; (adr r3, 8002f60 <__ieee754_rem_pio2+0x308>)
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	f7fd faa0 	bl	8000210 <__aeabi_dsub>
 8002cd0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002cd4:	f04f 0b01 	mov.w	fp, #1
 8002cd8:	4658      	mov	r0, fp
 8002cda:	b00b      	add	sp, #44	; 0x2c
 8002cdc:	ecbd 8b02 	vpop	{d8}
 8002ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ce4:	a3a0      	add	r3, pc, #640	; (adr r3, 8002f68 <__ieee754_rem_pio2+0x310>)
 8002ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cea:	f7fd fa91 	bl	8000210 <__aeabi_dsub>
 8002cee:	a3a0      	add	r3, pc, #640	; (adr r3, 8002f70 <__ieee754_rem_pio2+0x318>)
 8002cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf4:	4604      	mov	r4, r0
 8002cf6:	460d      	mov	r5, r1
 8002cf8:	f7fd fa8a 	bl	8000210 <__aeabi_dsub>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	e9ca 2300 	strd	r2, r3, [sl]
 8002d04:	4620      	mov	r0, r4
 8002d06:	4629      	mov	r1, r5
 8002d08:	f7fd fa82 	bl	8000210 <__aeabi_dsub>
 8002d0c:	a398      	add	r3, pc, #608	; (adr r3, 8002f70 <__ieee754_rem_pio2+0x318>)
 8002d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d12:	e7db      	b.n	8002ccc <__ieee754_rem_pio2+0x74>
 8002d14:	f7fd fa7e 	bl	8000214 <__adddf3>
 8002d18:	45b0      	cmp	r8, r6
 8002d1a:	4604      	mov	r4, r0
 8002d1c:	460d      	mov	r5, r1
 8002d1e:	d016      	beq.n	8002d4e <__ieee754_rem_pio2+0xf6>
 8002d20:	a38f      	add	r3, pc, #572	; (adr r3, 8002f60 <__ieee754_rem_pio2+0x308>)
 8002d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d26:	f7fd fa75 	bl	8000214 <__adddf3>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	e9ca 2300 	strd	r2, r3, [sl]
 8002d32:	4620      	mov	r0, r4
 8002d34:	4629      	mov	r1, r5
 8002d36:	f7fd fa6b 	bl	8000210 <__aeabi_dsub>
 8002d3a:	a389      	add	r3, pc, #548	; (adr r3, 8002f60 <__ieee754_rem_pio2+0x308>)
 8002d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d40:	f7fd fa68 	bl	8000214 <__adddf3>
 8002d44:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8002d48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002d4c:	e7c4      	b.n	8002cd8 <__ieee754_rem_pio2+0x80>
 8002d4e:	a386      	add	r3, pc, #536	; (adr r3, 8002f68 <__ieee754_rem_pio2+0x310>)
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	f7fd fa5e 	bl	8000214 <__adddf3>
 8002d58:	a385      	add	r3, pc, #532	; (adr r3, 8002f70 <__ieee754_rem_pio2+0x318>)
 8002d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5e:	4604      	mov	r4, r0
 8002d60:	460d      	mov	r5, r1
 8002d62:	f7fd fa57 	bl	8000214 <__adddf3>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	e9ca 2300 	strd	r2, r3, [sl]
 8002d6e:	4620      	mov	r0, r4
 8002d70:	4629      	mov	r1, r5
 8002d72:	f7fd fa4d 	bl	8000210 <__aeabi_dsub>
 8002d76:	a37e      	add	r3, pc, #504	; (adr r3, 8002f70 <__ieee754_rem_pio2+0x318>)
 8002d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7c:	e7e0      	b.n	8002d40 <__ieee754_rem_pio2+0xe8>
 8002d7e:	4b87      	ldr	r3, [pc, #540]	; (8002f9c <__ieee754_rem_pio2+0x344>)
 8002d80:	4598      	cmp	r8, r3
 8002d82:	f300 80d9 	bgt.w	8002f38 <__ieee754_rem_pio2+0x2e0>
 8002d86:	f000 fe39 	bl	80039fc <fabs>
 8002d8a:	ec55 4b10 	vmov	r4, r5, d0
 8002d8e:	ee10 0a10 	vmov	r0, s0
 8002d92:	a379      	add	r3, pc, #484	; (adr r3, 8002f78 <__ieee754_rem_pio2+0x320>)
 8002d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d98:	4629      	mov	r1, r5
 8002d9a:	f7fd fbf1 	bl	8000580 <__aeabi_dmul>
 8002d9e:	4b80      	ldr	r3, [pc, #512]	; (8002fa0 <__ieee754_rem_pio2+0x348>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	f7fd fa37 	bl	8000214 <__adddf3>
 8002da6:	f7fd fe85 	bl	8000ab4 <__aeabi_d2iz>
 8002daa:	4683      	mov	fp, r0
 8002dac:	f7fd fb7e 	bl	80004ac <__aeabi_i2d>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	ec43 2b18 	vmov	d8, r2, r3
 8002db8:	a367      	add	r3, pc, #412	; (adr r3, 8002f58 <__ieee754_rem_pio2+0x300>)
 8002dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbe:	f7fd fbdf 	bl	8000580 <__aeabi_dmul>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	4629      	mov	r1, r5
 8002dca:	f7fd fa21 	bl	8000210 <__aeabi_dsub>
 8002dce:	a364      	add	r3, pc, #400	; (adr r3, 8002f60 <__ieee754_rem_pio2+0x308>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	4606      	mov	r6, r0
 8002dd6:	460f      	mov	r7, r1
 8002dd8:	ec51 0b18 	vmov	r0, r1, d8
 8002ddc:	f7fd fbd0 	bl	8000580 <__aeabi_dmul>
 8002de0:	f1bb 0f1f 	cmp.w	fp, #31
 8002de4:	4604      	mov	r4, r0
 8002de6:	460d      	mov	r5, r1
 8002de8:	dc0d      	bgt.n	8002e06 <__ieee754_rem_pio2+0x1ae>
 8002dea:	4b6e      	ldr	r3, [pc, #440]	; (8002fa4 <__ieee754_rem_pio2+0x34c>)
 8002dec:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8002df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df4:	4543      	cmp	r3, r8
 8002df6:	d006      	beq.n	8002e06 <__ieee754_rem_pio2+0x1ae>
 8002df8:	4622      	mov	r2, r4
 8002dfa:	462b      	mov	r3, r5
 8002dfc:	4630      	mov	r0, r6
 8002dfe:	4639      	mov	r1, r7
 8002e00:	f7fd fa06 	bl	8000210 <__aeabi_dsub>
 8002e04:	e00f      	b.n	8002e26 <__ieee754_rem_pio2+0x1ce>
 8002e06:	462b      	mov	r3, r5
 8002e08:	4622      	mov	r2, r4
 8002e0a:	4630      	mov	r0, r6
 8002e0c:	4639      	mov	r1, r7
 8002e0e:	f7fd f9ff 	bl	8000210 <__aeabi_dsub>
 8002e12:	ea4f 5328 	mov.w	r3, r8, asr #20
 8002e16:	9303      	str	r3, [sp, #12]
 8002e18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002e1c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8002e20:	f1b8 0f10 	cmp.w	r8, #16
 8002e24:	dc02      	bgt.n	8002e2c <__ieee754_rem_pio2+0x1d4>
 8002e26:	e9ca 0100 	strd	r0, r1, [sl]
 8002e2a:	e039      	b.n	8002ea0 <__ieee754_rem_pio2+0x248>
 8002e2c:	a34e      	add	r3, pc, #312	; (adr r3, 8002f68 <__ieee754_rem_pio2+0x310>)
 8002e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e32:	ec51 0b18 	vmov	r0, r1, d8
 8002e36:	f7fd fba3 	bl	8000580 <__aeabi_dmul>
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	460d      	mov	r5, r1
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4630      	mov	r0, r6
 8002e44:	4639      	mov	r1, r7
 8002e46:	f7fd f9e3 	bl	8000210 <__aeabi_dsub>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4680      	mov	r8, r0
 8002e50:	4689      	mov	r9, r1
 8002e52:	4630      	mov	r0, r6
 8002e54:	4639      	mov	r1, r7
 8002e56:	f7fd f9db 	bl	8000210 <__aeabi_dsub>
 8002e5a:	4622      	mov	r2, r4
 8002e5c:	462b      	mov	r3, r5
 8002e5e:	f7fd f9d7 	bl	8000210 <__aeabi_dsub>
 8002e62:	a343      	add	r3, pc, #268	; (adr r3, 8002f70 <__ieee754_rem_pio2+0x318>)
 8002e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e68:	4604      	mov	r4, r0
 8002e6a:	460d      	mov	r5, r1
 8002e6c:	ec51 0b18 	vmov	r0, r1, d8
 8002e70:	f7fd fb86 	bl	8000580 <__aeabi_dmul>
 8002e74:	4622      	mov	r2, r4
 8002e76:	462b      	mov	r3, r5
 8002e78:	f7fd f9ca 	bl	8000210 <__aeabi_dsub>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4604      	mov	r4, r0
 8002e82:	460d      	mov	r5, r1
 8002e84:	4640      	mov	r0, r8
 8002e86:	4649      	mov	r1, r9
 8002e88:	f7fd f9c2 	bl	8000210 <__aeabi_dsub>
 8002e8c:	9a03      	ldr	r2, [sp, #12]
 8002e8e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b31      	cmp	r3, #49	; 0x31
 8002e96:	dc24      	bgt.n	8002ee2 <__ieee754_rem_pio2+0x28a>
 8002e98:	e9ca 0100 	strd	r0, r1, [sl]
 8002e9c:	4646      	mov	r6, r8
 8002e9e:	464f      	mov	r7, r9
 8002ea0:	e9da 8900 	ldrd	r8, r9, [sl]
 8002ea4:	4630      	mov	r0, r6
 8002ea6:	4642      	mov	r2, r8
 8002ea8:	464b      	mov	r3, r9
 8002eaa:	4639      	mov	r1, r7
 8002eac:	f7fd f9b0 	bl	8000210 <__aeabi_dsub>
 8002eb0:	462b      	mov	r3, r5
 8002eb2:	4622      	mov	r2, r4
 8002eb4:	f7fd f9ac 	bl	8000210 <__aeabi_dsub>
 8002eb8:	9b02      	ldr	r3, [sp, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002ec0:	f6bf af0a 	bge.w	8002cd8 <__ieee754_rem_pio2+0x80>
 8002ec4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8002ec8:	f8ca 3004 	str.w	r3, [sl, #4]
 8002ecc:	f8ca 8000 	str.w	r8, [sl]
 8002ed0:	f8ca 0008 	str.w	r0, [sl, #8]
 8002ed4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002ed8:	f8ca 300c 	str.w	r3, [sl, #12]
 8002edc:	f1cb 0b00 	rsb	fp, fp, #0
 8002ee0:	e6fa      	b.n	8002cd8 <__ieee754_rem_pio2+0x80>
 8002ee2:	a327      	add	r3, pc, #156	; (adr r3, 8002f80 <__ieee754_rem_pio2+0x328>)
 8002ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee8:	ec51 0b18 	vmov	r0, r1, d8
 8002eec:	f7fd fb48 	bl	8000580 <__aeabi_dmul>
 8002ef0:	4604      	mov	r4, r0
 8002ef2:	460d      	mov	r5, r1
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4640      	mov	r0, r8
 8002efa:	4649      	mov	r1, r9
 8002efc:	f7fd f988 	bl	8000210 <__aeabi_dsub>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4606      	mov	r6, r0
 8002f06:	460f      	mov	r7, r1
 8002f08:	4640      	mov	r0, r8
 8002f0a:	4649      	mov	r1, r9
 8002f0c:	f7fd f980 	bl	8000210 <__aeabi_dsub>
 8002f10:	4622      	mov	r2, r4
 8002f12:	462b      	mov	r3, r5
 8002f14:	f7fd f97c 	bl	8000210 <__aeabi_dsub>
 8002f18:	a31b      	add	r3, pc, #108	; (adr r3, 8002f88 <__ieee754_rem_pio2+0x330>)
 8002f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1e:	4604      	mov	r4, r0
 8002f20:	460d      	mov	r5, r1
 8002f22:	ec51 0b18 	vmov	r0, r1, d8
 8002f26:	f7fd fb2b 	bl	8000580 <__aeabi_dmul>
 8002f2a:	4622      	mov	r2, r4
 8002f2c:	462b      	mov	r3, r5
 8002f2e:	f7fd f96f 	bl	8000210 <__aeabi_dsub>
 8002f32:	4604      	mov	r4, r0
 8002f34:	460d      	mov	r5, r1
 8002f36:	e75f      	b.n	8002df8 <__ieee754_rem_pio2+0x1a0>
 8002f38:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <__ieee754_rem_pio2+0x350>)
 8002f3a:	4598      	cmp	r8, r3
 8002f3c:	dd36      	ble.n	8002fac <__ieee754_rem_pio2+0x354>
 8002f3e:	ee10 2a10 	vmov	r2, s0
 8002f42:	462b      	mov	r3, r5
 8002f44:	4620      	mov	r0, r4
 8002f46:	4629      	mov	r1, r5
 8002f48:	f7fd f962 	bl	8000210 <__aeabi_dsub>
 8002f4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002f50:	e9ca 0100 	strd	r0, r1, [sl]
 8002f54:	e694      	b.n	8002c80 <__ieee754_rem_pio2+0x28>
 8002f56:	bf00      	nop
 8002f58:	54400000 	.word	0x54400000
 8002f5c:	3ff921fb 	.word	0x3ff921fb
 8002f60:	1a626331 	.word	0x1a626331
 8002f64:	3dd0b461 	.word	0x3dd0b461
 8002f68:	1a600000 	.word	0x1a600000
 8002f6c:	3dd0b461 	.word	0x3dd0b461
 8002f70:	2e037073 	.word	0x2e037073
 8002f74:	3ba3198a 	.word	0x3ba3198a
 8002f78:	6dc9c883 	.word	0x6dc9c883
 8002f7c:	3fe45f30 	.word	0x3fe45f30
 8002f80:	2e000000 	.word	0x2e000000
 8002f84:	3ba3198a 	.word	0x3ba3198a
 8002f88:	252049c1 	.word	0x252049c1
 8002f8c:	397b839a 	.word	0x397b839a
 8002f90:	3fe921fb 	.word	0x3fe921fb
 8002f94:	4002d97b 	.word	0x4002d97b
 8002f98:	3ff921fb 	.word	0x3ff921fb
 8002f9c:	413921fb 	.word	0x413921fb
 8002fa0:	3fe00000 	.word	0x3fe00000
 8002fa4:	08003ca8 	.word	0x08003ca8
 8002fa8:	7fefffff 	.word	0x7fefffff
 8002fac:	ea4f 5428 	mov.w	r4, r8, asr #20
 8002fb0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8002fb4:	ee10 0a10 	vmov	r0, s0
 8002fb8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8002fbc:	ee10 6a10 	vmov	r6, s0
 8002fc0:	460f      	mov	r7, r1
 8002fc2:	f7fd fd77 	bl	8000ab4 <__aeabi_d2iz>
 8002fc6:	f7fd fa71 	bl	80004ac <__aeabi_i2d>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4630      	mov	r0, r6
 8002fd0:	4639      	mov	r1, r7
 8002fd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002fd6:	f7fd f91b 	bl	8000210 <__aeabi_dsub>
 8002fda:	4b22      	ldr	r3, [pc, #136]	; (8003064 <__ieee754_rem_pio2+0x40c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f7fd facf 	bl	8000580 <__aeabi_dmul>
 8002fe2:	460f      	mov	r7, r1
 8002fe4:	4606      	mov	r6, r0
 8002fe6:	f7fd fd65 	bl	8000ab4 <__aeabi_d2iz>
 8002fea:	f7fd fa5f 	bl	80004ac <__aeabi_i2d>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4630      	mov	r0, r6
 8002ff4:	4639      	mov	r1, r7
 8002ff6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002ffa:	f7fd f909 	bl	8000210 <__aeabi_dsub>
 8002ffe:	4b19      	ldr	r3, [pc, #100]	; (8003064 <__ieee754_rem_pio2+0x40c>)
 8003000:	2200      	movs	r2, #0
 8003002:	f7fd fabd 	bl	8000580 <__aeabi_dmul>
 8003006:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800300a:	ad04      	add	r5, sp, #16
 800300c:	f04f 0803 	mov.w	r8, #3
 8003010:	46a9      	mov	r9, r5
 8003012:	2600      	movs	r6, #0
 8003014:	2700      	movs	r7, #0
 8003016:	4632      	mov	r2, r6
 8003018:	463b      	mov	r3, r7
 800301a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800301e:	46c3      	mov	fp, r8
 8003020:	3d08      	subs	r5, #8
 8003022:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003026:	f7fd fd13 	bl	8000a50 <__aeabi_dcmpeq>
 800302a:	2800      	cmp	r0, #0
 800302c:	d1f3      	bne.n	8003016 <__ieee754_rem_pio2+0x3be>
 800302e:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <__ieee754_rem_pio2+0x410>)
 8003030:	9301      	str	r3, [sp, #4]
 8003032:	2302      	movs	r3, #2
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	4622      	mov	r2, r4
 8003038:	465b      	mov	r3, fp
 800303a:	4651      	mov	r1, sl
 800303c:	4648      	mov	r0, r9
 800303e:	f000 f8df 	bl	8003200 <__kernel_rem_pio2>
 8003042:	9b02      	ldr	r3, [sp, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	4683      	mov	fp, r0
 8003048:	f6bf ae46 	bge.w	8002cd8 <__ieee754_rem_pio2+0x80>
 800304c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003050:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003054:	f8ca 3004 	str.w	r3, [sl, #4]
 8003058:	f8da 300c 	ldr.w	r3, [sl, #12]
 800305c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003060:	e73a      	b.n	8002ed8 <__ieee754_rem_pio2+0x280>
 8003062:	bf00      	nop
 8003064:	41700000 	.word	0x41700000
 8003068:	08003d28 	.word	0x08003d28
 800306c:	00000000 	.word	0x00000000

08003070 <__kernel_cos>:
 8003070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003074:	ec57 6b10 	vmov	r6, r7, d0
 8003078:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800307c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8003080:	ed8d 1b00 	vstr	d1, [sp]
 8003084:	da07      	bge.n	8003096 <__kernel_cos+0x26>
 8003086:	ee10 0a10 	vmov	r0, s0
 800308a:	4639      	mov	r1, r7
 800308c:	f7fd fd12 	bl	8000ab4 <__aeabi_d2iz>
 8003090:	2800      	cmp	r0, #0
 8003092:	f000 8088 	beq.w	80031a6 <__kernel_cos+0x136>
 8003096:	4632      	mov	r2, r6
 8003098:	463b      	mov	r3, r7
 800309a:	4630      	mov	r0, r6
 800309c:	4639      	mov	r1, r7
 800309e:	f7fd fa6f 	bl	8000580 <__aeabi_dmul>
 80030a2:	4b51      	ldr	r3, [pc, #324]	; (80031e8 <__kernel_cos+0x178>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	4604      	mov	r4, r0
 80030a8:	460d      	mov	r5, r1
 80030aa:	f7fd fa69 	bl	8000580 <__aeabi_dmul>
 80030ae:	a340      	add	r3, pc, #256	; (adr r3, 80031b0 <__kernel_cos+0x140>)
 80030b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b4:	4682      	mov	sl, r0
 80030b6:	468b      	mov	fp, r1
 80030b8:	4620      	mov	r0, r4
 80030ba:	4629      	mov	r1, r5
 80030bc:	f7fd fa60 	bl	8000580 <__aeabi_dmul>
 80030c0:	a33d      	add	r3, pc, #244	; (adr r3, 80031b8 <__kernel_cos+0x148>)
 80030c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c6:	f7fd f8a5 	bl	8000214 <__adddf3>
 80030ca:	4622      	mov	r2, r4
 80030cc:	462b      	mov	r3, r5
 80030ce:	f7fd fa57 	bl	8000580 <__aeabi_dmul>
 80030d2:	a33b      	add	r3, pc, #236	; (adr r3, 80031c0 <__kernel_cos+0x150>)
 80030d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d8:	f7fd f89a 	bl	8000210 <__aeabi_dsub>
 80030dc:	4622      	mov	r2, r4
 80030de:	462b      	mov	r3, r5
 80030e0:	f7fd fa4e 	bl	8000580 <__aeabi_dmul>
 80030e4:	a338      	add	r3, pc, #224	; (adr r3, 80031c8 <__kernel_cos+0x158>)
 80030e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ea:	f7fd f893 	bl	8000214 <__adddf3>
 80030ee:	4622      	mov	r2, r4
 80030f0:	462b      	mov	r3, r5
 80030f2:	f7fd fa45 	bl	8000580 <__aeabi_dmul>
 80030f6:	a336      	add	r3, pc, #216	; (adr r3, 80031d0 <__kernel_cos+0x160>)
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	f7fd f888 	bl	8000210 <__aeabi_dsub>
 8003100:	4622      	mov	r2, r4
 8003102:	462b      	mov	r3, r5
 8003104:	f7fd fa3c 	bl	8000580 <__aeabi_dmul>
 8003108:	a333      	add	r3, pc, #204	; (adr r3, 80031d8 <__kernel_cos+0x168>)
 800310a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310e:	f7fd f881 	bl	8000214 <__adddf3>
 8003112:	4622      	mov	r2, r4
 8003114:	462b      	mov	r3, r5
 8003116:	f7fd fa33 	bl	8000580 <__aeabi_dmul>
 800311a:	4622      	mov	r2, r4
 800311c:	462b      	mov	r3, r5
 800311e:	f7fd fa2f 	bl	8000580 <__aeabi_dmul>
 8003122:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003126:	4604      	mov	r4, r0
 8003128:	460d      	mov	r5, r1
 800312a:	4630      	mov	r0, r6
 800312c:	4639      	mov	r1, r7
 800312e:	f7fd fa27 	bl	8000580 <__aeabi_dmul>
 8003132:	460b      	mov	r3, r1
 8003134:	4602      	mov	r2, r0
 8003136:	4629      	mov	r1, r5
 8003138:	4620      	mov	r0, r4
 800313a:	f7fd f869 	bl	8000210 <__aeabi_dsub>
 800313e:	4b2b      	ldr	r3, [pc, #172]	; (80031ec <__kernel_cos+0x17c>)
 8003140:	4598      	cmp	r8, r3
 8003142:	4606      	mov	r6, r0
 8003144:	460f      	mov	r7, r1
 8003146:	dc10      	bgt.n	800316a <__kernel_cos+0xfa>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4650      	mov	r0, sl
 800314e:	4659      	mov	r1, fp
 8003150:	f7fd f85e 	bl	8000210 <__aeabi_dsub>
 8003154:	460b      	mov	r3, r1
 8003156:	4926      	ldr	r1, [pc, #152]	; (80031f0 <__kernel_cos+0x180>)
 8003158:	4602      	mov	r2, r0
 800315a:	2000      	movs	r0, #0
 800315c:	f7fd f858 	bl	8000210 <__aeabi_dsub>
 8003160:	ec41 0b10 	vmov	d0, r0, r1
 8003164:	b003      	add	sp, #12
 8003166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800316a:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <__kernel_cos+0x184>)
 800316c:	4920      	ldr	r1, [pc, #128]	; (80031f0 <__kernel_cos+0x180>)
 800316e:	4598      	cmp	r8, r3
 8003170:	bfcc      	ite	gt
 8003172:	4d21      	ldrgt	r5, [pc, #132]	; (80031f8 <__kernel_cos+0x188>)
 8003174:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8003178:	2400      	movs	r4, #0
 800317a:	4622      	mov	r2, r4
 800317c:	462b      	mov	r3, r5
 800317e:	2000      	movs	r0, #0
 8003180:	f7fd f846 	bl	8000210 <__aeabi_dsub>
 8003184:	4622      	mov	r2, r4
 8003186:	4680      	mov	r8, r0
 8003188:	4689      	mov	r9, r1
 800318a:	462b      	mov	r3, r5
 800318c:	4650      	mov	r0, sl
 800318e:	4659      	mov	r1, fp
 8003190:	f7fd f83e 	bl	8000210 <__aeabi_dsub>
 8003194:	4632      	mov	r2, r6
 8003196:	463b      	mov	r3, r7
 8003198:	f7fd f83a 	bl	8000210 <__aeabi_dsub>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4640      	mov	r0, r8
 80031a2:	4649      	mov	r1, r9
 80031a4:	e7da      	b.n	800315c <__kernel_cos+0xec>
 80031a6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80031e0 <__kernel_cos+0x170>
 80031aa:	e7db      	b.n	8003164 <__kernel_cos+0xf4>
 80031ac:	f3af 8000 	nop.w
 80031b0:	be8838d4 	.word	0xbe8838d4
 80031b4:	bda8fae9 	.word	0xbda8fae9
 80031b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80031bc:	3e21ee9e 	.word	0x3e21ee9e
 80031c0:	809c52ad 	.word	0x809c52ad
 80031c4:	3e927e4f 	.word	0x3e927e4f
 80031c8:	19cb1590 	.word	0x19cb1590
 80031cc:	3efa01a0 	.word	0x3efa01a0
 80031d0:	16c15177 	.word	0x16c15177
 80031d4:	3f56c16c 	.word	0x3f56c16c
 80031d8:	5555554c 	.word	0x5555554c
 80031dc:	3fa55555 	.word	0x3fa55555
 80031e0:	00000000 	.word	0x00000000
 80031e4:	3ff00000 	.word	0x3ff00000
 80031e8:	3fe00000 	.word	0x3fe00000
 80031ec:	3fd33332 	.word	0x3fd33332
 80031f0:	3ff00000 	.word	0x3ff00000
 80031f4:	3fe90000 	.word	0x3fe90000
 80031f8:	3fd20000 	.word	0x3fd20000
 80031fc:	00000000 	.word	0x00000000

08003200 <__kernel_rem_pio2>:
 8003200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003204:	ed2d 8b02 	vpush	{d8}
 8003208:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800320c:	f112 0f14 	cmn.w	r2, #20
 8003210:	9308      	str	r3, [sp, #32]
 8003212:	9101      	str	r1, [sp, #4]
 8003214:	4bc6      	ldr	r3, [pc, #792]	; (8003530 <__kernel_rem_pio2+0x330>)
 8003216:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8003218:	9009      	str	r0, [sp, #36]	; 0x24
 800321a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800321e:	9304      	str	r3, [sp, #16]
 8003220:	9b08      	ldr	r3, [sp, #32]
 8003222:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003226:	bfa8      	it	ge
 8003228:	1ed4      	subge	r4, r2, #3
 800322a:	9306      	str	r3, [sp, #24]
 800322c:	bfb2      	itee	lt
 800322e:	2400      	movlt	r4, #0
 8003230:	2318      	movge	r3, #24
 8003232:	fb94 f4f3 	sdivge	r4, r4, r3
 8003236:	f06f 0317 	mvn.w	r3, #23
 800323a:	fb04 3303 	mla	r3, r4, r3, r3
 800323e:	eb03 0a02 	add.w	sl, r3, r2
 8003242:	9b04      	ldr	r3, [sp, #16]
 8003244:	9a06      	ldr	r2, [sp, #24]
 8003246:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8003520 <__kernel_rem_pio2+0x320>
 800324a:	eb03 0802 	add.w	r8, r3, r2
 800324e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003250:	1aa7      	subs	r7, r4, r2
 8003252:	ae20      	add	r6, sp, #128	; 0x80
 8003254:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003258:	2500      	movs	r5, #0
 800325a:	4545      	cmp	r5, r8
 800325c:	dd18      	ble.n	8003290 <__kernel_rem_pio2+0x90>
 800325e:	9b08      	ldr	r3, [sp, #32]
 8003260:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003264:	aa20      	add	r2, sp, #128	; 0x80
 8003266:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8003520 <__kernel_rem_pio2+0x320>
 800326a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800326e:	f1c3 0301 	rsb	r3, r3, #1
 8003272:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8003276:	9307      	str	r3, [sp, #28]
 8003278:	9b07      	ldr	r3, [sp, #28]
 800327a:	9a04      	ldr	r2, [sp, #16]
 800327c:	4443      	add	r3, r8
 800327e:	429a      	cmp	r2, r3
 8003280:	db2f      	blt.n	80032e2 <__kernel_rem_pio2+0xe2>
 8003282:	ed8d 8b02 	vstr	d8, [sp, #8]
 8003286:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800328a:	462f      	mov	r7, r5
 800328c:	2600      	movs	r6, #0
 800328e:	e01b      	b.n	80032c8 <__kernel_rem_pio2+0xc8>
 8003290:	42ef      	cmn	r7, r5
 8003292:	d407      	bmi.n	80032a4 <__kernel_rem_pio2+0xa4>
 8003294:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003298:	f7fd f908 	bl	80004ac <__aeabi_i2d>
 800329c:	e8e6 0102 	strd	r0, r1, [r6], #8
 80032a0:	3501      	adds	r5, #1
 80032a2:	e7da      	b.n	800325a <__kernel_rem_pio2+0x5a>
 80032a4:	ec51 0b18 	vmov	r0, r1, d8
 80032a8:	e7f8      	b.n	800329c <__kernel_rem_pio2+0x9c>
 80032aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032ae:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80032b2:	f7fd f965 	bl	8000580 <__aeabi_dmul>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032be:	f7fc ffa9 	bl	8000214 <__adddf3>
 80032c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80032c6:	3601      	adds	r6, #1
 80032c8:	9b06      	ldr	r3, [sp, #24]
 80032ca:	429e      	cmp	r6, r3
 80032cc:	f1a7 0708 	sub.w	r7, r7, #8
 80032d0:	ddeb      	ble.n	80032aa <__kernel_rem_pio2+0xaa>
 80032d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80032d6:	3508      	adds	r5, #8
 80032d8:	ecab 7b02 	vstmia	fp!, {d7}
 80032dc:	f108 0801 	add.w	r8, r8, #1
 80032e0:	e7ca      	b.n	8003278 <__kernel_rem_pio2+0x78>
 80032e2:	9b04      	ldr	r3, [sp, #16]
 80032e4:	aa0c      	add	r2, sp, #48	; 0x30
 80032e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80032ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80032ec:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80032ee:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80032f2:	9c04      	ldr	r4, [sp, #16]
 80032f4:	930a      	str	r3, [sp, #40]	; 0x28
 80032f6:	ab98      	add	r3, sp, #608	; 0x260
 80032f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80032fc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8003300:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8003304:	f8cd b008 	str.w	fp, [sp, #8]
 8003308:	4625      	mov	r5, r4
 800330a:	2d00      	cmp	r5, #0
 800330c:	dc78      	bgt.n	8003400 <__kernel_rem_pio2+0x200>
 800330e:	ec47 6b10 	vmov	d0, r6, r7
 8003312:	4650      	mov	r0, sl
 8003314:	f000 fbfc 	bl	8003b10 <scalbn>
 8003318:	ec57 6b10 	vmov	r6, r7, d0
 800331c:	2200      	movs	r2, #0
 800331e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003322:	ee10 0a10 	vmov	r0, s0
 8003326:	4639      	mov	r1, r7
 8003328:	f7fd f92a 	bl	8000580 <__aeabi_dmul>
 800332c:	ec41 0b10 	vmov	d0, r0, r1
 8003330:	f000 fb6e 	bl	8003a10 <floor>
 8003334:	4b7f      	ldr	r3, [pc, #508]	; (8003534 <__kernel_rem_pio2+0x334>)
 8003336:	ec51 0b10 	vmov	r0, r1, d0
 800333a:	2200      	movs	r2, #0
 800333c:	f7fd f920 	bl	8000580 <__aeabi_dmul>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4630      	mov	r0, r6
 8003346:	4639      	mov	r1, r7
 8003348:	f7fc ff62 	bl	8000210 <__aeabi_dsub>
 800334c:	460f      	mov	r7, r1
 800334e:	4606      	mov	r6, r0
 8003350:	f7fd fbb0 	bl	8000ab4 <__aeabi_d2iz>
 8003354:	9007      	str	r0, [sp, #28]
 8003356:	f7fd f8a9 	bl	80004ac <__aeabi_i2d>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4630      	mov	r0, r6
 8003360:	4639      	mov	r1, r7
 8003362:	f7fc ff55 	bl	8000210 <__aeabi_dsub>
 8003366:	f1ba 0f00 	cmp.w	sl, #0
 800336a:	4606      	mov	r6, r0
 800336c:	460f      	mov	r7, r1
 800336e:	dd70      	ble.n	8003452 <__kernel_rem_pio2+0x252>
 8003370:	1e62      	subs	r2, r4, #1
 8003372:	ab0c      	add	r3, sp, #48	; 0x30
 8003374:	9d07      	ldr	r5, [sp, #28]
 8003376:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800337a:	f1ca 0118 	rsb	r1, sl, #24
 800337e:	fa40 f301 	asr.w	r3, r0, r1
 8003382:	441d      	add	r5, r3
 8003384:	408b      	lsls	r3, r1
 8003386:	1ac0      	subs	r0, r0, r3
 8003388:	ab0c      	add	r3, sp, #48	; 0x30
 800338a:	9507      	str	r5, [sp, #28]
 800338c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003390:	f1ca 0317 	rsb	r3, sl, #23
 8003394:	fa40 f303 	asr.w	r3, r0, r3
 8003398:	9302      	str	r3, [sp, #8]
 800339a:	9b02      	ldr	r3, [sp, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	dd66      	ble.n	800346e <__kernel_rem_pio2+0x26e>
 80033a0:	9b07      	ldr	r3, [sp, #28]
 80033a2:	2200      	movs	r2, #0
 80033a4:	3301      	adds	r3, #1
 80033a6:	9307      	str	r3, [sp, #28]
 80033a8:	4615      	mov	r5, r2
 80033aa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80033ae:	4294      	cmp	r4, r2
 80033b0:	f300 8099 	bgt.w	80034e6 <__kernel_rem_pio2+0x2e6>
 80033b4:	f1ba 0f00 	cmp.w	sl, #0
 80033b8:	dd07      	ble.n	80033ca <__kernel_rem_pio2+0x1ca>
 80033ba:	f1ba 0f01 	cmp.w	sl, #1
 80033be:	f000 80a5 	beq.w	800350c <__kernel_rem_pio2+0x30c>
 80033c2:	f1ba 0f02 	cmp.w	sl, #2
 80033c6:	f000 80c1 	beq.w	800354c <__kernel_rem_pio2+0x34c>
 80033ca:	9b02      	ldr	r3, [sp, #8]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d14e      	bne.n	800346e <__kernel_rem_pio2+0x26e>
 80033d0:	4632      	mov	r2, r6
 80033d2:	463b      	mov	r3, r7
 80033d4:	4958      	ldr	r1, [pc, #352]	; (8003538 <__kernel_rem_pio2+0x338>)
 80033d6:	2000      	movs	r0, #0
 80033d8:	f7fc ff1a 	bl	8000210 <__aeabi_dsub>
 80033dc:	4606      	mov	r6, r0
 80033de:	460f      	mov	r7, r1
 80033e0:	2d00      	cmp	r5, #0
 80033e2:	d044      	beq.n	800346e <__kernel_rem_pio2+0x26e>
 80033e4:	4650      	mov	r0, sl
 80033e6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8003528 <__kernel_rem_pio2+0x328>
 80033ea:	f000 fb91 	bl	8003b10 <scalbn>
 80033ee:	4630      	mov	r0, r6
 80033f0:	4639      	mov	r1, r7
 80033f2:	ec53 2b10 	vmov	r2, r3, d0
 80033f6:	f7fc ff0b 	bl	8000210 <__aeabi_dsub>
 80033fa:	4606      	mov	r6, r0
 80033fc:	460f      	mov	r7, r1
 80033fe:	e036      	b.n	800346e <__kernel_rem_pio2+0x26e>
 8003400:	4b4e      	ldr	r3, [pc, #312]	; (800353c <__kernel_rem_pio2+0x33c>)
 8003402:	2200      	movs	r2, #0
 8003404:	4630      	mov	r0, r6
 8003406:	4639      	mov	r1, r7
 8003408:	f7fd f8ba 	bl	8000580 <__aeabi_dmul>
 800340c:	f7fd fb52 	bl	8000ab4 <__aeabi_d2iz>
 8003410:	f7fd f84c 	bl	80004ac <__aeabi_i2d>
 8003414:	4b4a      	ldr	r3, [pc, #296]	; (8003540 <__kernel_rem_pio2+0x340>)
 8003416:	2200      	movs	r2, #0
 8003418:	4680      	mov	r8, r0
 800341a:	4689      	mov	r9, r1
 800341c:	f7fd f8b0 	bl	8000580 <__aeabi_dmul>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4630      	mov	r0, r6
 8003426:	4639      	mov	r1, r7
 8003428:	f7fc fef2 	bl	8000210 <__aeabi_dsub>
 800342c:	f7fd fb42 	bl	8000ab4 <__aeabi_d2iz>
 8003430:	9b02      	ldr	r3, [sp, #8]
 8003432:	f843 0b04 	str.w	r0, [r3], #4
 8003436:	3d01      	subs	r5, #1
 8003438:	9302      	str	r3, [sp, #8]
 800343a:	ab70      	add	r3, sp, #448	; 0x1c0
 800343c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003444:	4640      	mov	r0, r8
 8003446:	4649      	mov	r1, r9
 8003448:	f7fc fee4 	bl	8000214 <__adddf3>
 800344c:	4606      	mov	r6, r0
 800344e:	460f      	mov	r7, r1
 8003450:	e75b      	b.n	800330a <__kernel_rem_pio2+0x10a>
 8003452:	d105      	bne.n	8003460 <__kernel_rem_pio2+0x260>
 8003454:	1e63      	subs	r3, r4, #1
 8003456:	aa0c      	add	r2, sp, #48	; 0x30
 8003458:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800345c:	15c3      	asrs	r3, r0, #23
 800345e:	e79b      	b.n	8003398 <__kernel_rem_pio2+0x198>
 8003460:	4b38      	ldr	r3, [pc, #224]	; (8003544 <__kernel_rem_pio2+0x344>)
 8003462:	2200      	movs	r2, #0
 8003464:	f7fd fb12 	bl	8000a8c <__aeabi_dcmpge>
 8003468:	2800      	cmp	r0, #0
 800346a:	d139      	bne.n	80034e0 <__kernel_rem_pio2+0x2e0>
 800346c:	9002      	str	r0, [sp, #8]
 800346e:	2200      	movs	r2, #0
 8003470:	2300      	movs	r3, #0
 8003472:	4630      	mov	r0, r6
 8003474:	4639      	mov	r1, r7
 8003476:	f7fd faeb 	bl	8000a50 <__aeabi_dcmpeq>
 800347a:	2800      	cmp	r0, #0
 800347c:	f000 80b4 	beq.w	80035e8 <__kernel_rem_pio2+0x3e8>
 8003480:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8003484:	465b      	mov	r3, fp
 8003486:	2200      	movs	r2, #0
 8003488:	9904      	ldr	r1, [sp, #16]
 800348a:	428b      	cmp	r3, r1
 800348c:	da65      	bge.n	800355a <__kernel_rem_pio2+0x35a>
 800348e:	2a00      	cmp	r2, #0
 8003490:	d07b      	beq.n	800358a <__kernel_rem_pio2+0x38a>
 8003492:	ab0c      	add	r3, sp, #48	; 0x30
 8003494:	f1aa 0a18 	sub.w	sl, sl, #24
 8003498:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80a0 	beq.w	80035e2 <__kernel_rem_pio2+0x3e2>
 80034a2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8003528 <__kernel_rem_pio2+0x328>
 80034a6:	4650      	mov	r0, sl
 80034a8:	f000 fb32 	bl	8003b10 <scalbn>
 80034ac:	4f23      	ldr	r7, [pc, #140]	; (800353c <__kernel_rem_pio2+0x33c>)
 80034ae:	ec55 4b10 	vmov	r4, r5, d0
 80034b2:	46d8      	mov	r8, fp
 80034b4:	2600      	movs	r6, #0
 80034b6:	f1b8 0f00 	cmp.w	r8, #0
 80034ba:	f280 80cf 	bge.w	800365c <__kernel_rem_pio2+0x45c>
 80034be:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8003520 <__kernel_rem_pio2+0x320>
 80034c2:	465f      	mov	r7, fp
 80034c4:	f04f 0800 	mov.w	r8, #0
 80034c8:	2f00      	cmp	r7, #0
 80034ca:	f2c0 80fd 	blt.w	80036c8 <__kernel_rem_pio2+0x4c8>
 80034ce:	ab70      	add	r3, sp, #448	; 0x1c0
 80034d0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8003548 <__kernel_rem_pio2+0x348>
 80034d4:	ec55 4b18 	vmov	r4, r5, d8
 80034d8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80034dc:	2600      	movs	r6, #0
 80034de:	e0e5      	b.n	80036ac <__kernel_rem_pio2+0x4ac>
 80034e0:	2302      	movs	r3, #2
 80034e2:	9302      	str	r3, [sp, #8]
 80034e4:	e75c      	b.n	80033a0 <__kernel_rem_pio2+0x1a0>
 80034e6:	f8db 3000 	ldr.w	r3, [fp]
 80034ea:	b955      	cbnz	r5, 8003502 <__kernel_rem_pio2+0x302>
 80034ec:	b123      	cbz	r3, 80034f8 <__kernel_rem_pio2+0x2f8>
 80034ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80034f2:	f8cb 3000 	str.w	r3, [fp]
 80034f6:	2301      	movs	r3, #1
 80034f8:	3201      	adds	r2, #1
 80034fa:	f10b 0b04 	add.w	fp, fp, #4
 80034fe:	461d      	mov	r5, r3
 8003500:	e755      	b.n	80033ae <__kernel_rem_pio2+0x1ae>
 8003502:	1acb      	subs	r3, r1, r3
 8003504:	f8cb 3000 	str.w	r3, [fp]
 8003508:	462b      	mov	r3, r5
 800350a:	e7f5      	b.n	80034f8 <__kernel_rem_pio2+0x2f8>
 800350c:	1e62      	subs	r2, r4, #1
 800350e:	ab0c      	add	r3, sp, #48	; 0x30
 8003510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003514:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003518:	a90c      	add	r1, sp, #48	; 0x30
 800351a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800351e:	e754      	b.n	80033ca <__kernel_rem_pio2+0x1ca>
	...
 800352c:	3ff00000 	.word	0x3ff00000
 8003530:	08003e70 	.word	0x08003e70
 8003534:	40200000 	.word	0x40200000
 8003538:	3ff00000 	.word	0x3ff00000
 800353c:	3e700000 	.word	0x3e700000
 8003540:	41700000 	.word	0x41700000
 8003544:	3fe00000 	.word	0x3fe00000
 8003548:	08003e30 	.word	0x08003e30
 800354c:	1e62      	subs	r2, r4, #1
 800354e:	ab0c      	add	r3, sp, #48	; 0x30
 8003550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003554:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003558:	e7de      	b.n	8003518 <__kernel_rem_pio2+0x318>
 800355a:	a90c      	add	r1, sp, #48	; 0x30
 800355c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003560:	3b01      	subs	r3, #1
 8003562:	430a      	orrs	r2, r1
 8003564:	e790      	b.n	8003488 <__kernel_rem_pio2+0x288>
 8003566:	3301      	adds	r3, #1
 8003568:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800356c:	2900      	cmp	r1, #0
 800356e:	d0fa      	beq.n	8003566 <__kernel_rem_pio2+0x366>
 8003570:	9a08      	ldr	r2, [sp, #32]
 8003572:	18e3      	adds	r3, r4, r3
 8003574:	18a6      	adds	r6, r4, r2
 8003576:	aa20      	add	r2, sp, #128	; 0x80
 8003578:	1c65      	adds	r5, r4, #1
 800357a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800357e:	9302      	str	r3, [sp, #8]
 8003580:	9b02      	ldr	r3, [sp, #8]
 8003582:	42ab      	cmp	r3, r5
 8003584:	da04      	bge.n	8003590 <__kernel_rem_pio2+0x390>
 8003586:	461c      	mov	r4, r3
 8003588:	e6b5      	b.n	80032f6 <__kernel_rem_pio2+0xf6>
 800358a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800358c:	2301      	movs	r3, #1
 800358e:	e7eb      	b.n	8003568 <__kernel_rem_pio2+0x368>
 8003590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003592:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003596:	f7fc ff89 	bl	80004ac <__aeabi_i2d>
 800359a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800359e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035a0:	46b3      	mov	fp, r6
 80035a2:	461c      	mov	r4, r3
 80035a4:	2700      	movs	r7, #0
 80035a6:	f04f 0800 	mov.w	r8, #0
 80035aa:	f04f 0900 	mov.w	r9, #0
 80035ae:	9b06      	ldr	r3, [sp, #24]
 80035b0:	429f      	cmp	r7, r3
 80035b2:	dd06      	ble.n	80035c2 <__kernel_rem_pio2+0x3c2>
 80035b4:	ab70      	add	r3, sp, #448	; 0x1c0
 80035b6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80035ba:	e9c3 8900 	strd	r8, r9, [r3]
 80035be:	3501      	adds	r5, #1
 80035c0:	e7de      	b.n	8003580 <__kernel_rem_pio2+0x380>
 80035c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80035c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80035ca:	f7fc ffd9 	bl	8000580 <__aeabi_dmul>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4640      	mov	r0, r8
 80035d4:	4649      	mov	r1, r9
 80035d6:	f7fc fe1d 	bl	8000214 <__adddf3>
 80035da:	3701      	adds	r7, #1
 80035dc:	4680      	mov	r8, r0
 80035de:	4689      	mov	r9, r1
 80035e0:	e7e5      	b.n	80035ae <__kernel_rem_pio2+0x3ae>
 80035e2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80035e6:	e754      	b.n	8003492 <__kernel_rem_pio2+0x292>
 80035e8:	ec47 6b10 	vmov	d0, r6, r7
 80035ec:	f1ca 0000 	rsb	r0, sl, #0
 80035f0:	f000 fa8e 	bl	8003b10 <scalbn>
 80035f4:	ec57 6b10 	vmov	r6, r7, d0
 80035f8:	4b9f      	ldr	r3, [pc, #636]	; (8003878 <__kernel_rem_pio2+0x678>)
 80035fa:	ee10 0a10 	vmov	r0, s0
 80035fe:	2200      	movs	r2, #0
 8003600:	4639      	mov	r1, r7
 8003602:	f7fd fa43 	bl	8000a8c <__aeabi_dcmpge>
 8003606:	b300      	cbz	r0, 800364a <__kernel_rem_pio2+0x44a>
 8003608:	4b9c      	ldr	r3, [pc, #624]	; (800387c <__kernel_rem_pio2+0x67c>)
 800360a:	2200      	movs	r2, #0
 800360c:	4630      	mov	r0, r6
 800360e:	4639      	mov	r1, r7
 8003610:	f7fc ffb6 	bl	8000580 <__aeabi_dmul>
 8003614:	f7fd fa4e 	bl	8000ab4 <__aeabi_d2iz>
 8003618:	4605      	mov	r5, r0
 800361a:	f7fc ff47 	bl	80004ac <__aeabi_i2d>
 800361e:	4b96      	ldr	r3, [pc, #600]	; (8003878 <__kernel_rem_pio2+0x678>)
 8003620:	2200      	movs	r2, #0
 8003622:	f7fc ffad 	bl	8000580 <__aeabi_dmul>
 8003626:	460b      	mov	r3, r1
 8003628:	4602      	mov	r2, r0
 800362a:	4639      	mov	r1, r7
 800362c:	4630      	mov	r0, r6
 800362e:	f7fc fdef 	bl	8000210 <__aeabi_dsub>
 8003632:	f7fd fa3f 	bl	8000ab4 <__aeabi_d2iz>
 8003636:	f104 0b01 	add.w	fp, r4, #1
 800363a:	ab0c      	add	r3, sp, #48	; 0x30
 800363c:	f10a 0a18 	add.w	sl, sl, #24
 8003640:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003644:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8003648:	e72b      	b.n	80034a2 <__kernel_rem_pio2+0x2a2>
 800364a:	4630      	mov	r0, r6
 800364c:	4639      	mov	r1, r7
 800364e:	f7fd fa31 	bl	8000ab4 <__aeabi_d2iz>
 8003652:	ab0c      	add	r3, sp, #48	; 0x30
 8003654:	46a3      	mov	fp, r4
 8003656:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800365a:	e722      	b.n	80034a2 <__kernel_rem_pio2+0x2a2>
 800365c:	ab70      	add	r3, sp, #448	; 0x1c0
 800365e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8003662:	ab0c      	add	r3, sp, #48	; 0x30
 8003664:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003668:	f7fc ff20 	bl	80004ac <__aeabi_i2d>
 800366c:	4622      	mov	r2, r4
 800366e:	462b      	mov	r3, r5
 8003670:	f7fc ff86 	bl	8000580 <__aeabi_dmul>
 8003674:	4632      	mov	r2, r6
 8003676:	e9c9 0100 	strd	r0, r1, [r9]
 800367a:	463b      	mov	r3, r7
 800367c:	4620      	mov	r0, r4
 800367e:	4629      	mov	r1, r5
 8003680:	f7fc ff7e 	bl	8000580 <__aeabi_dmul>
 8003684:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003688:	4604      	mov	r4, r0
 800368a:	460d      	mov	r5, r1
 800368c:	e713      	b.n	80034b6 <__kernel_rem_pio2+0x2b6>
 800368e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8003692:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8003696:	f7fc ff73 	bl	8000580 <__aeabi_dmul>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4620      	mov	r0, r4
 80036a0:	4629      	mov	r1, r5
 80036a2:	f7fc fdb7 	bl	8000214 <__adddf3>
 80036a6:	3601      	adds	r6, #1
 80036a8:	4604      	mov	r4, r0
 80036aa:	460d      	mov	r5, r1
 80036ac:	9b04      	ldr	r3, [sp, #16]
 80036ae:	429e      	cmp	r6, r3
 80036b0:	dc01      	bgt.n	80036b6 <__kernel_rem_pio2+0x4b6>
 80036b2:	45b0      	cmp	r8, r6
 80036b4:	daeb      	bge.n	800368e <__kernel_rem_pio2+0x48e>
 80036b6:	ab48      	add	r3, sp, #288	; 0x120
 80036b8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80036bc:	e9c3 4500 	strd	r4, r5, [r3]
 80036c0:	3f01      	subs	r7, #1
 80036c2:	f108 0801 	add.w	r8, r8, #1
 80036c6:	e6ff      	b.n	80034c8 <__kernel_rem_pio2+0x2c8>
 80036c8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	dc0b      	bgt.n	80036e6 <__kernel_rem_pio2+0x4e6>
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	dc6e      	bgt.n	80037b0 <__kernel_rem_pio2+0x5b0>
 80036d2:	d045      	beq.n	8003760 <__kernel_rem_pio2+0x560>
 80036d4:	9b07      	ldr	r3, [sp, #28]
 80036d6:	f003 0007 	and.w	r0, r3, #7
 80036da:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80036de:	ecbd 8b02 	vpop	{d8}
 80036e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036e6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d1f3      	bne.n	80036d4 <__kernel_rem_pio2+0x4d4>
 80036ec:	ab48      	add	r3, sp, #288	; 0x120
 80036ee:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80036f2:	46d0      	mov	r8, sl
 80036f4:	46d9      	mov	r9, fp
 80036f6:	f1b9 0f00 	cmp.w	r9, #0
 80036fa:	f1a8 0808 	sub.w	r8, r8, #8
 80036fe:	dc64      	bgt.n	80037ca <__kernel_rem_pio2+0x5ca>
 8003700:	465c      	mov	r4, fp
 8003702:	2c01      	cmp	r4, #1
 8003704:	f1aa 0a08 	sub.w	sl, sl, #8
 8003708:	dc7e      	bgt.n	8003808 <__kernel_rem_pio2+0x608>
 800370a:	2000      	movs	r0, #0
 800370c:	2100      	movs	r1, #0
 800370e:	f1bb 0f01 	cmp.w	fp, #1
 8003712:	f300 8097 	bgt.w	8003844 <__kernel_rem_pio2+0x644>
 8003716:	9b02      	ldr	r3, [sp, #8]
 8003718:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800371c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8003720:	2b00      	cmp	r3, #0
 8003722:	f040 8099 	bne.w	8003858 <__kernel_rem_pio2+0x658>
 8003726:	9b01      	ldr	r3, [sp, #4]
 8003728:	e9c3 5600 	strd	r5, r6, [r3]
 800372c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8003730:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8003734:	e7ce      	b.n	80036d4 <__kernel_rem_pio2+0x4d4>
 8003736:	ab48      	add	r3, sp, #288	; 0x120
 8003738:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f7fc fd68 	bl	8000214 <__adddf3>
 8003744:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003748:	f1bb 0f00 	cmp.w	fp, #0
 800374c:	daf3      	bge.n	8003736 <__kernel_rem_pio2+0x536>
 800374e:	9b02      	ldr	r3, [sp, #8]
 8003750:	b113      	cbz	r3, 8003758 <__kernel_rem_pio2+0x558>
 8003752:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003756:	4619      	mov	r1, r3
 8003758:	9b01      	ldr	r3, [sp, #4]
 800375a:	e9c3 0100 	strd	r0, r1, [r3]
 800375e:	e7b9      	b.n	80036d4 <__kernel_rem_pio2+0x4d4>
 8003760:	2000      	movs	r0, #0
 8003762:	2100      	movs	r1, #0
 8003764:	e7f0      	b.n	8003748 <__kernel_rem_pio2+0x548>
 8003766:	ab48      	add	r3, sp, #288	; 0x120
 8003768:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003770:	f7fc fd50 	bl	8000214 <__adddf3>
 8003774:	3c01      	subs	r4, #1
 8003776:	2c00      	cmp	r4, #0
 8003778:	daf5      	bge.n	8003766 <__kernel_rem_pio2+0x566>
 800377a:	9b02      	ldr	r3, [sp, #8]
 800377c:	b1e3      	cbz	r3, 80037b8 <__kernel_rem_pio2+0x5b8>
 800377e:	4602      	mov	r2, r0
 8003780:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003784:	9c01      	ldr	r4, [sp, #4]
 8003786:	e9c4 2300 	strd	r2, r3, [r4]
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8003792:	f7fc fd3d 	bl	8000210 <__aeabi_dsub>
 8003796:	ad4a      	add	r5, sp, #296	; 0x128
 8003798:	2401      	movs	r4, #1
 800379a:	45a3      	cmp	fp, r4
 800379c:	da0f      	bge.n	80037be <__kernel_rem_pio2+0x5be>
 800379e:	9b02      	ldr	r3, [sp, #8]
 80037a0:	b113      	cbz	r3, 80037a8 <__kernel_rem_pio2+0x5a8>
 80037a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80037a6:	4619      	mov	r1, r3
 80037a8:	9b01      	ldr	r3, [sp, #4]
 80037aa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80037ae:	e791      	b.n	80036d4 <__kernel_rem_pio2+0x4d4>
 80037b0:	465c      	mov	r4, fp
 80037b2:	2000      	movs	r0, #0
 80037b4:	2100      	movs	r1, #0
 80037b6:	e7de      	b.n	8003776 <__kernel_rem_pio2+0x576>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	e7e2      	b.n	8003784 <__kernel_rem_pio2+0x584>
 80037be:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80037c2:	f7fc fd27 	bl	8000214 <__adddf3>
 80037c6:	3401      	adds	r4, #1
 80037c8:	e7e7      	b.n	800379a <__kernel_rem_pio2+0x59a>
 80037ca:	e9d8 4500 	ldrd	r4, r5, [r8]
 80037ce:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80037d2:	4620      	mov	r0, r4
 80037d4:	4632      	mov	r2, r6
 80037d6:	463b      	mov	r3, r7
 80037d8:	4629      	mov	r1, r5
 80037da:	f7fc fd1b 	bl	8000214 <__adddf3>
 80037de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4620      	mov	r0, r4
 80037e8:	4629      	mov	r1, r5
 80037ea:	f7fc fd11 	bl	8000210 <__aeabi_dsub>
 80037ee:	4632      	mov	r2, r6
 80037f0:	463b      	mov	r3, r7
 80037f2:	f7fc fd0f 	bl	8000214 <__adddf3>
 80037f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80037fa:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80037fe:	ed88 7b00 	vstr	d7, [r8]
 8003802:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003806:	e776      	b.n	80036f6 <__kernel_rem_pio2+0x4f6>
 8003808:	e9da 8900 	ldrd	r8, r9, [sl]
 800380c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8003810:	4640      	mov	r0, r8
 8003812:	4632      	mov	r2, r6
 8003814:	463b      	mov	r3, r7
 8003816:	4649      	mov	r1, r9
 8003818:	f7fc fcfc 	bl	8000214 <__adddf3>
 800381c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4640      	mov	r0, r8
 8003826:	4649      	mov	r1, r9
 8003828:	f7fc fcf2 	bl	8000210 <__aeabi_dsub>
 800382c:	4632      	mov	r2, r6
 800382e:	463b      	mov	r3, r7
 8003830:	f7fc fcf0 	bl	8000214 <__adddf3>
 8003834:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003838:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800383c:	ed8a 7b00 	vstr	d7, [sl]
 8003840:	3c01      	subs	r4, #1
 8003842:	e75e      	b.n	8003702 <__kernel_rem_pio2+0x502>
 8003844:	ab48      	add	r3, sp, #288	; 0x120
 8003846:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384e:	f7fc fce1 	bl	8000214 <__adddf3>
 8003852:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003856:	e75a      	b.n	800370e <__kernel_rem_pio2+0x50e>
 8003858:	9b01      	ldr	r3, [sp, #4]
 800385a:	9a01      	ldr	r2, [sp, #4]
 800385c:	601d      	str	r5, [r3, #0]
 800385e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8003862:	605c      	str	r4, [r3, #4]
 8003864:	609f      	str	r7, [r3, #8]
 8003866:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800386a:	60d3      	str	r3, [r2, #12]
 800386c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003870:	6110      	str	r0, [r2, #16]
 8003872:	6153      	str	r3, [r2, #20]
 8003874:	e72e      	b.n	80036d4 <__kernel_rem_pio2+0x4d4>
 8003876:	bf00      	nop
 8003878:	41700000 	.word	0x41700000
 800387c:	3e700000 	.word	0x3e700000

08003880 <__kernel_sin>:
 8003880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003884:	ed2d 8b04 	vpush	{d8-d9}
 8003888:	eeb0 8a41 	vmov.f32	s16, s2
 800388c:	eef0 8a61 	vmov.f32	s17, s3
 8003890:	ec55 4b10 	vmov	r4, r5, d0
 8003894:	b083      	sub	sp, #12
 8003896:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800389a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800389e:	9001      	str	r0, [sp, #4]
 80038a0:	da06      	bge.n	80038b0 <__kernel_sin+0x30>
 80038a2:	ee10 0a10 	vmov	r0, s0
 80038a6:	4629      	mov	r1, r5
 80038a8:	f7fd f904 	bl	8000ab4 <__aeabi_d2iz>
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d051      	beq.n	8003954 <__kernel_sin+0xd4>
 80038b0:	4622      	mov	r2, r4
 80038b2:	462b      	mov	r3, r5
 80038b4:	4620      	mov	r0, r4
 80038b6:	4629      	mov	r1, r5
 80038b8:	f7fc fe62 	bl	8000580 <__aeabi_dmul>
 80038bc:	4682      	mov	sl, r0
 80038be:	468b      	mov	fp, r1
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4620      	mov	r0, r4
 80038c6:	4629      	mov	r1, r5
 80038c8:	f7fc fe5a 	bl	8000580 <__aeabi_dmul>
 80038cc:	a341      	add	r3, pc, #260	; (adr r3, 80039d4 <__kernel_sin+0x154>)
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	4680      	mov	r8, r0
 80038d4:	4689      	mov	r9, r1
 80038d6:	4650      	mov	r0, sl
 80038d8:	4659      	mov	r1, fp
 80038da:	f7fc fe51 	bl	8000580 <__aeabi_dmul>
 80038de:	a33f      	add	r3, pc, #252	; (adr r3, 80039dc <__kernel_sin+0x15c>)
 80038e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e4:	f7fc fc94 	bl	8000210 <__aeabi_dsub>
 80038e8:	4652      	mov	r2, sl
 80038ea:	465b      	mov	r3, fp
 80038ec:	f7fc fe48 	bl	8000580 <__aeabi_dmul>
 80038f0:	a33c      	add	r3, pc, #240	; (adr r3, 80039e4 <__kernel_sin+0x164>)
 80038f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f6:	f7fc fc8d 	bl	8000214 <__adddf3>
 80038fa:	4652      	mov	r2, sl
 80038fc:	465b      	mov	r3, fp
 80038fe:	f7fc fe3f 	bl	8000580 <__aeabi_dmul>
 8003902:	a33a      	add	r3, pc, #232	; (adr r3, 80039ec <__kernel_sin+0x16c>)
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	f7fc fc82 	bl	8000210 <__aeabi_dsub>
 800390c:	4652      	mov	r2, sl
 800390e:	465b      	mov	r3, fp
 8003910:	f7fc fe36 	bl	8000580 <__aeabi_dmul>
 8003914:	a337      	add	r3, pc, #220	; (adr r3, 80039f4 <__kernel_sin+0x174>)
 8003916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391a:	f7fc fc7b 	bl	8000214 <__adddf3>
 800391e:	9b01      	ldr	r3, [sp, #4]
 8003920:	4606      	mov	r6, r0
 8003922:	460f      	mov	r7, r1
 8003924:	b9eb      	cbnz	r3, 8003962 <__kernel_sin+0xe2>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4650      	mov	r0, sl
 800392c:	4659      	mov	r1, fp
 800392e:	f7fc fe27 	bl	8000580 <__aeabi_dmul>
 8003932:	a325      	add	r3, pc, #148	; (adr r3, 80039c8 <__kernel_sin+0x148>)
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	f7fc fc6a 	bl	8000210 <__aeabi_dsub>
 800393c:	4642      	mov	r2, r8
 800393e:	464b      	mov	r3, r9
 8003940:	f7fc fe1e 	bl	8000580 <__aeabi_dmul>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4620      	mov	r0, r4
 800394a:	4629      	mov	r1, r5
 800394c:	f7fc fc62 	bl	8000214 <__adddf3>
 8003950:	4604      	mov	r4, r0
 8003952:	460d      	mov	r5, r1
 8003954:	ec45 4b10 	vmov	d0, r4, r5
 8003958:	b003      	add	sp, #12
 800395a:	ecbd 8b04 	vpop	{d8-d9}
 800395e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003962:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <__kernel_sin+0x150>)
 8003964:	ec51 0b18 	vmov	r0, r1, d8
 8003968:	2200      	movs	r2, #0
 800396a:	f7fc fe09 	bl	8000580 <__aeabi_dmul>
 800396e:	4632      	mov	r2, r6
 8003970:	ec41 0b19 	vmov	d9, r0, r1
 8003974:	463b      	mov	r3, r7
 8003976:	4640      	mov	r0, r8
 8003978:	4649      	mov	r1, r9
 800397a:	f7fc fe01 	bl	8000580 <__aeabi_dmul>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	ec51 0b19 	vmov	r0, r1, d9
 8003986:	f7fc fc43 	bl	8000210 <__aeabi_dsub>
 800398a:	4652      	mov	r2, sl
 800398c:	465b      	mov	r3, fp
 800398e:	f7fc fdf7 	bl	8000580 <__aeabi_dmul>
 8003992:	ec53 2b18 	vmov	r2, r3, d8
 8003996:	f7fc fc3b 	bl	8000210 <__aeabi_dsub>
 800399a:	a30b      	add	r3, pc, #44	; (adr r3, 80039c8 <__kernel_sin+0x148>)
 800399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a0:	4606      	mov	r6, r0
 80039a2:	460f      	mov	r7, r1
 80039a4:	4640      	mov	r0, r8
 80039a6:	4649      	mov	r1, r9
 80039a8:	f7fc fdea 	bl	8000580 <__aeabi_dmul>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4630      	mov	r0, r6
 80039b2:	4639      	mov	r1, r7
 80039b4:	f7fc fc2e 	bl	8000214 <__adddf3>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4620      	mov	r0, r4
 80039be:	4629      	mov	r1, r5
 80039c0:	f7fc fc26 	bl	8000210 <__aeabi_dsub>
 80039c4:	e7c4      	b.n	8003950 <__kernel_sin+0xd0>
 80039c6:	bf00      	nop
 80039c8:	55555549 	.word	0x55555549
 80039cc:	3fc55555 	.word	0x3fc55555
 80039d0:	3fe00000 	.word	0x3fe00000
 80039d4:	5acfd57c 	.word	0x5acfd57c
 80039d8:	3de5d93a 	.word	0x3de5d93a
 80039dc:	8a2b9ceb 	.word	0x8a2b9ceb
 80039e0:	3e5ae5e6 	.word	0x3e5ae5e6
 80039e4:	57b1fe7d 	.word	0x57b1fe7d
 80039e8:	3ec71de3 	.word	0x3ec71de3
 80039ec:	19c161d5 	.word	0x19c161d5
 80039f0:	3f2a01a0 	.word	0x3f2a01a0
 80039f4:	1110f8a6 	.word	0x1110f8a6
 80039f8:	3f811111 	.word	0x3f811111

080039fc <fabs>:
 80039fc:	ec51 0b10 	vmov	r0, r1, d0
 8003a00:	ee10 2a10 	vmov	r2, s0
 8003a04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003a08:	ec43 2b10 	vmov	d0, r2, r3
 8003a0c:	4770      	bx	lr
	...

08003a10 <floor>:
 8003a10:	ec51 0b10 	vmov	r0, r1, d0
 8003a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a18:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003a1c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8003a20:	2e13      	cmp	r6, #19
 8003a22:	ee10 5a10 	vmov	r5, s0
 8003a26:	ee10 8a10 	vmov	r8, s0
 8003a2a:	460c      	mov	r4, r1
 8003a2c:	dc32      	bgt.n	8003a94 <floor+0x84>
 8003a2e:	2e00      	cmp	r6, #0
 8003a30:	da14      	bge.n	8003a5c <floor+0x4c>
 8003a32:	a333      	add	r3, pc, #204	; (adr r3, 8003b00 <floor+0xf0>)
 8003a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a38:	f7fc fbec 	bl	8000214 <__adddf3>
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f7fd f82e 	bl	8000aa0 <__aeabi_dcmpgt>
 8003a44:	b138      	cbz	r0, 8003a56 <floor+0x46>
 8003a46:	2c00      	cmp	r4, #0
 8003a48:	da57      	bge.n	8003afa <floor+0xea>
 8003a4a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8003a4e:	431d      	orrs	r5, r3
 8003a50:	d001      	beq.n	8003a56 <floor+0x46>
 8003a52:	4c2d      	ldr	r4, [pc, #180]	; (8003b08 <floor+0xf8>)
 8003a54:	2500      	movs	r5, #0
 8003a56:	4621      	mov	r1, r4
 8003a58:	4628      	mov	r0, r5
 8003a5a:	e025      	b.n	8003aa8 <floor+0x98>
 8003a5c:	4f2b      	ldr	r7, [pc, #172]	; (8003b0c <floor+0xfc>)
 8003a5e:	4137      	asrs	r7, r6
 8003a60:	ea01 0307 	and.w	r3, r1, r7
 8003a64:	4303      	orrs	r3, r0
 8003a66:	d01f      	beq.n	8003aa8 <floor+0x98>
 8003a68:	a325      	add	r3, pc, #148	; (adr r3, 8003b00 <floor+0xf0>)
 8003a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6e:	f7fc fbd1 	bl	8000214 <__adddf3>
 8003a72:	2200      	movs	r2, #0
 8003a74:	2300      	movs	r3, #0
 8003a76:	f7fd f813 	bl	8000aa0 <__aeabi_dcmpgt>
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	d0eb      	beq.n	8003a56 <floor+0x46>
 8003a7e:	2c00      	cmp	r4, #0
 8003a80:	bfbe      	ittt	lt
 8003a82:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003a86:	fa43 f606 	asrlt.w	r6, r3, r6
 8003a8a:	19a4      	addlt	r4, r4, r6
 8003a8c:	ea24 0407 	bic.w	r4, r4, r7
 8003a90:	2500      	movs	r5, #0
 8003a92:	e7e0      	b.n	8003a56 <floor+0x46>
 8003a94:	2e33      	cmp	r6, #51	; 0x33
 8003a96:	dd0b      	ble.n	8003ab0 <floor+0xa0>
 8003a98:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003a9c:	d104      	bne.n	8003aa8 <floor+0x98>
 8003a9e:	ee10 2a10 	vmov	r2, s0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	f7fc fbb6 	bl	8000214 <__adddf3>
 8003aa8:	ec41 0b10 	vmov	d0, r0, r1
 8003aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8003ab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ab8:	fa23 f707 	lsr.w	r7, r3, r7
 8003abc:	4207      	tst	r7, r0
 8003abe:	d0f3      	beq.n	8003aa8 <floor+0x98>
 8003ac0:	a30f      	add	r3, pc, #60	; (adr r3, 8003b00 <floor+0xf0>)
 8003ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac6:	f7fc fba5 	bl	8000214 <__adddf3>
 8003aca:	2200      	movs	r2, #0
 8003acc:	2300      	movs	r3, #0
 8003ace:	f7fc ffe7 	bl	8000aa0 <__aeabi_dcmpgt>
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	d0bf      	beq.n	8003a56 <floor+0x46>
 8003ad6:	2c00      	cmp	r4, #0
 8003ad8:	da02      	bge.n	8003ae0 <floor+0xd0>
 8003ada:	2e14      	cmp	r6, #20
 8003adc:	d103      	bne.n	8003ae6 <floor+0xd6>
 8003ade:	3401      	adds	r4, #1
 8003ae0:	ea25 0507 	bic.w	r5, r5, r7
 8003ae4:	e7b7      	b.n	8003a56 <floor+0x46>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003aec:	fa03 f606 	lsl.w	r6, r3, r6
 8003af0:	4435      	add	r5, r6
 8003af2:	4545      	cmp	r5, r8
 8003af4:	bf38      	it	cc
 8003af6:	18e4      	addcc	r4, r4, r3
 8003af8:	e7f2      	b.n	8003ae0 <floor+0xd0>
 8003afa:	2500      	movs	r5, #0
 8003afc:	462c      	mov	r4, r5
 8003afe:	e7aa      	b.n	8003a56 <floor+0x46>
 8003b00:	8800759c 	.word	0x8800759c
 8003b04:	7e37e43c 	.word	0x7e37e43c
 8003b08:	bff00000 	.word	0xbff00000
 8003b0c:	000fffff 	.word	0x000fffff

08003b10 <scalbn>:
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	ec55 4b10 	vmov	r4, r5, d0
 8003b16:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8003b1a:	4606      	mov	r6, r0
 8003b1c:	462b      	mov	r3, r5
 8003b1e:	b99a      	cbnz	r2, 8003b48 <scalbn+0x38>
 8003b20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003b24:	4323      	orrs	r3, r4
 8003b26:	d036      	beq.n	8003b96 <scalbn+0x86>
 8003b28:	4b39      	ldr	r3, [pc, #228]	; (8003c10 <scalbn+0x100>)
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	ee10 0a10 	vmov	r0, s0
 8003b30:	2200      	movs	r2, #0
 8003b32:	f7fc fd25 	bl	8000580 <__aeabi_dmul>
 8003b36:	4b37      	ldr	r3, [pc, #220]	; (8003c14 <scalbn+0x104>)
 8003b38:	429e      	cmp	r6, r3
 8003b3a:	4604      	mov	r4, r0
 8003b3c:	460d      	mov	r5, r1
 8003b3e:	da10      	bge.n	8003b62 <scalbn+0x52>
 8003b40:	a32b      	add	r3, pc, #172	; (adr r3, 8003bf0 <scalbn+0xe0>)
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	e03a      	b.n	8003bbe <scalbn+0xae>
 8003b48:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003b4c:	428a      	cmp	r2, r1
 8003b4e:	d10c      	bne.n	8003b6a <scalbn+0x5a>
 8003b50:	ee10 2a10 	vmov	r2, s0
 8003b54:	4620      	mov	r0, r4
 8003b56:	4629      	mov	r1, r5
 8003b58:	f7fc fb5c 	bl	8000214 <__adddf3>
 8003b5c:	4604      	mov	r4, r0
 8003b5e:	460d      	mov	r5, r1
 8003b60:	e019      	b.n	8003b96 <scalbn+0x86>
 8003b62:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003b66:	460b      	mov	r3, r1
 8003b68:	3a36      	subs	r2, #54	; 0x36
 8003b6a:	4432      	add	r2, r6
 8003b6c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003b70:	428a      	cmp	r2, r1
 8003b72:	dd08      	ble.n	8003b86 <scalbn+0x76>
 8003b74:	2d00      	cmp	r5, #0
 8003b76:	a120      	add	r1, pc, #128	; (adr r1, 8003bf8 <scalbn+0xe8>)
 8003b78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b7c:	da1c      	bge.n	8003bb8 <scalbn+0xa8>
 8003b7e:	a120      	add	r1, pc, #128	; (adr r1, 8003c00 <scalbn+0xf0>)
 8003b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b84:	e018      	b.n	8003bb8 <scalbn+0xa8>
 8003b86:	2a00      	cmp	r2, #0
 8003b88:	dd08      	ble.n	8003b9c <scalbn+0x8c>
 8003b8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003b8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003b96:	ec45 4b10 	vmov	d0, r4, r5
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}
 8003b9c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003ba0:	da19      	bge.n	8003bd6 <scalbn+0xc6>
 8003ba2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003ba6:	429e      	cmp	r6, r3
 8003ba8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8003bac:	dd0a      	ble.n	8003bc4 <scalbn+0xb4>
 8003bae:	a112      	add	r1, pc, #72	; (adr r1, 8003bf8 <scalbn+0xe8>)
 8003bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e2      	bne.n	8003b7e <scalbn+0x6e>
 8003bb8:	a30f      	add	r3, pc, #60	; (adr r3, 8003bf8 <scalbn+0xe8>)
 8003bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbe:	f7fc fcdf 	bl	8000580 <__aeabi_dmul>
 8003bc2:	e7cb      	b.n	8003b5c <scalbn+0x4c>
 8003bc4:	a10a      	add	r1, pc, #40	; (adr r1, 8003bf0 <scalbn+0xe0>)
 8003bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0b8      	beq.n	8003b40 <scalbn+0x30>
 8003bce:	a10e      	add	r1, pc, #56	; (adr r1, 8003c08 <scalbn+0xf8>)
 8003bd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bd4:	e7b4      	b.n	8003b40 <scalbn+0x30>
 8003bd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003bda:	3236      	adds	r2, #54	; 0x36
 8003bdc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003be0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8003be4:	4620      	mov	r0, r4
 8003be6:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <scalbn+0x108>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	e7e8      	b.n	8003bbe <scalbn+0xae>
 8003bec:	f3af 8000 	nop.w
 8003bf0:	c2f8f359 	.word	0xc2f8f359
 8003bf4:	01a56e1f 	.word	0x01a56e1f
 8003bf8:	8800759c 	.word	0x8800759c
 8003bfc:	7e37e43c 	.word	0x7e37e43c
 8003c00:	8800759c 	.word	0x8800759c
 8003c04:	fe37e43c 	.word	0xfe37e43c
 8003c08:	c2f8f359 	.word	0xc2f8f359
 8003c0c:	81a56e1f 	.word	0x81a56e1f
 8003c10:	43500000 	.word	0x43500000
 8003c14:	ffff3cb0 	.word	0xffff3cb0
 8003c18:	3c900000 	.word	0x3c900000

08003c1c <__libc_init_array>:
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	4d0d      	ldr	r5, [pc, #52]	; (8003c54 <__libc_init_array+0x38>)
 8003c20:	4c0d      	ldr	r4, [pc, #52]	; (8003c58 <__libc_init_array+0x3c>)
 8003c22:	1b64      	subs	r4, r4, r5
 8003c24:	10a4      	asrs	r4, r4, #2
 8003c26:	2600      	movs	r6, #0
 8003c28:	42a6      	cmp	r6, r4
 8003c2a:	d109      	bne.n	8003c40 <__libc_init_array+0x24>
 8003c2c:	4d0b      	ldr	r5, [pc, #44]	; (8003c5c <__libc_init_array+0x40>)
 8003c2e:	4c0c      	ldr	r4, [pc, #48]	; (8003c60 <__libc_init_array+0x44>)
 8003c30:	f000 f820 	bl	8003c74 <_init>
 8003c34:	1b64      	subs	r4, r4, r5
 8003c36:	10a4      	asrs	r4, r4, #2
 8003c38:	2600      	movs	r6, #0
 8003c3a:	42a6      	cmp	r6, r4
 8003c3c:	d105      	bne.n	8003c4a <__libc_init_array+0x2e>
 8003c3e:	bd70      	pop	{r4, r5, r6, pc}
 8003c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c44:	4798      	blx	r3
 8003c46:	3601      	adds	r6, #1
 8003c48:	e7ee      	b.n	8003c28 <__libc_init_array+0xc>
 8003c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c4e:	4798      	blx	r3
 8003c50:	3601      	adds	r6, #1
 8003c52:	e7f2      	b.n	8003c3a <__libc_init_array+0x1e>
 8003c54:	08003e88 	.word	0x08003e88
 8003c58:	08003e88 	.word	0x08003e88
 8003c5c:	08003e88 	.word	0x08003e88
 8003c60:	08003e8c 	.word	0x08003e8c

08003c64 <memset>:
 8003c64:	4402      	add	r2, r0
 8003c66:	4603      	mov	r3, r0
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d100      	bne.n	8003c6e <memset+0xa>
 8003c6c:	4770      	bx	lr
 8003c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c72:	e7f9      	b.n	8003c68 <memset+0x4>

08003c74 <_init>:
 8003c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c76:	bf00      	nop
 8003c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7a:	bc08      	pop	{r3}
 8003c7c:	469e      	mov	lr, r3
 8003c7e:	4770      	bx	lr

08003c80 <_fini>:
 8003c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c82:	bf00      	nop
 8003c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c86:	bc08      	pop	{r3}
 8003c88:	469e      	mov	lr, r3
 8003c8a:	4770      	bx	lr
